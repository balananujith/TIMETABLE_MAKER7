androidx.window.embedding.SplitPlaceholderRule
androidx.window.embedding.EmptyEmbeddingComponent
androidx.window.layout.WindowMetricsCalculator$Companion$reset$1
androidx.window.embedding.SplitRule$LayoutDir
androidx.window.embedding.EmbeddingBackend
io.flutter.view.AccessibilityViewEmbedder
com.google.android.gms.dynamite.descriptors.com.google.android.gms.measurement.dynamite.ModuleDescriptor
androidx.media.AudioAttributesCompat
com.dexterous.flutterlocalnotifications.ScheduledNotificationBootReceiver
androidx.media.AudioAttributesImplApi26Parcelizer
androidx.window.layout.DisplayCompatHelperApi28
androidx.window.embedding.EmbeddingCompat
io.flutter.plugins.firebase.core.FlutterFirebasePlugin
android.support.v4.media.session.PlaybackStateCompat$CustomAction
com.google.android.datatransport.runtime.scheduling.jobscheduling.JobInfoSchedulerService
androidx.savedstate.SavedStateRegistry$1
androidx.window.layout.WindowMetricsCalculator$Companion$overrideDecorator$1
com.google.firebase.analytics.ktx.FirebaseAnalyticsKtxRegistrar
id.flutter.flutter_background_service.R$style
androidx.annotation.Keep
com.dexterous.flutterlocalnotifications.models.styles.StyleInformation
androidx.window.embedding.SplitController$Companion
androidx.window.layout.FoldingFeature$OcclusionType$Companion
com.dexterous.flutterlocalnotifications.models.Time
io.flutter.embedding.engine.plugins.lifecycle.HiddenLifecycleReference
id.flutter.flutter_background_service.WatchdogReceiver
com.google.android.gms.common.api.GoogleApiActivity
androidx.media.AudioAttributesImplApi21Parcelizer
com.google.android.gms.measurement.internal.AppMeasurementDynamiteService
androidx.window.layout.FoldingFeature
android.support.v4.media.session.MediaSessionCompat$QueueItem
id.flutter.flutter_background_service.R$integer
com.dexterous.flutterlocalnotifications.models.MessageDetails
android.support.v4.media.session.MediaSessionCompat$ResultReceiverWrapper
com.dexterous.flutterlocalnotifications.models.styles.InboxStyleInformation
io.flutter.plugin.editing.ImeSyncDeferringInsetsCallback$AnimationCallback
com.dexterous.flutterlocalnotifications.models.NotificationChannelDetails
android.support.v4.media.MediaBrowserCompat$MediaItem
android.support.v4.media.session.MediaSessionCompat$Token
com.dexterous.flutterlocalnotifications.models.DateTimeComponents
com.google.android.gms.common.GooglePlayServicesIncorrectManifestValueException
id.flutter.flutter_background_service.BackgroundService$1
androidx.activity.OnBackPressedDispatcher$LifecycleOnBackPressedCancellable
io.flutter.plugin.editing.ImeSyncDeferringInsetsCallback
io.flutter.embedding.android.FlutterSplashView$SavedState
com.dexterous.flutterlocalnotifications.models.NotificationChannelGroupDetails
androidx.media.AudioAttributesImplBaseParcelizer
androidx.window.embedding.SplitPairRule
kotlinx.coroutines.internal.StackTraceRecoveryKt
com.dexterous.flutterlocalnotifications.models.styles.MessagingStyleInformation
androidx.window.layout.FoldingFeature$State$Companion
androidx.window.layout.ExtensionWindowLayoutInfoBackend$MulticastConsumer
com.dexterous.flutterlocalnotifications.NotificationStyle
kotlin.internal.jdk7.JDK7PlatformImplementations
io.flutter.embedding.engine.FlutterJNI
com.dexterous.flutterlocalnotifications.models.IconSource
com.google.android.gms.common.api.Scope
kotlin.internal.jdk8.JDK8PlatformImplementations
com.google.android.gms.common.internal.ReflectedParcelable
androidx.window.java.layout.WindowInfoTrackerCallbackAdapter
android.support.v4.media.MediaBrowserCompat$ItemReceiver
com.google.firebase.components.ComponentRegistrar
androidx.window.embedding.EmbeddingInterfaceCompat
androidx.window.embedding.SplitController
androidx.window.layout.FoldingFeature$Orientation
androidx.window.layout.WindowInfoTracker
com.dexterous.flutterlocalnotifications.SoundSource
androidx.window.embedding.EmbeddingRule
android.support.v4.media.AudioAttributesCompatParcelizer
id.flutter.flutter_background_service.R
com.google.android.gms.measurement.AppMeasurementService
androidx.window.layout.SidecarWindowBackend$WindowLayoutChangeCallbackWrapper
androidx.window.embedding.ActivityRule
androidx.core.app.RemoteActionCompatParcelizer
androidx.window.java.R
id.flutter.flutter_background_service.R$layout
androidx.window.core.Version$bigInteger$2
com.google.android.gms.dynamite.DynamiteModule$DynamiteLoaderClassLoader
com.google.firebase.FirebaseCommonRegistrar
io.flutter.plugins.firebase.messaging.FlutterFirebaseMessagingService
com.google.android.gms.common.annotation.KeepName
io.flutter.plugins.GeneratedPluginRegistrant
com.google.android.gms.measurement.AppMeasurementJobService
com.google.firebase.provider.FirebaseInitProvider
android.support.v4.media.AudioAttributesImplApi21Parcelizer
androidx.window.core.ExperimentalWindowApi
androidx.window.layout.ActivityCompatHelperApi30
androidx.window.java.layout.WindowInfoTrackerCallbackAdapter$addListener$1$1$invokeSuspend$$inlined$collect$1
androidx.window.embedding.ExtensionEmbeddingBackend$EmbeddingCallbackImpl
androidx.window.layout.ExtensionsWindowLayoutInfoAdapter
androidx.window.R$attr
androidx.window.core.Version$Companion
androidx.window.layout.HardwareFoldingFeature$Type
androidx.window.R$styleable
androidx.window.layout.ActivityCompatHelperApi24
com.example.time_table_maker_app.MainActivity
androidx.versionedparcelable.ParcelImpl
androidx.core.app.CoreComponentFactory
androidx.window.core.Version
com.google.firebase.installations.FirebaseInstallationsRegistrar
io.flutter.plugins.firebase.core.FlutterFirebasePluginRegistry
com.google.android.gms.common.util.DynamiteApi
androidx.window.layout.DisplayCompatHelperApi17
androidx.activity.ComponentActivity$2
com.dexterous.flutterlocalnotifications.utils.BooleanUtils
id.flutter.flutter_background_service.FlutterBackgroundServicePlugin$2
android.support.v4.media.MediaBrowserCompat$CustomActionResultReceiver
android.support.v4.media.AudioAttributesImplBaseParcelizer
com.google.firebase.concurrent.ExecutorsRegistrar
id.flutter.flutter_background_service.Config
io.flutter.plugins.firebase.messaging.FlutterFirebaseMessagingBackgroundService
android.support.v4.media.session.ParcelableVolumeInfo
androidx.window.layout.DisplayFeature
androidx.window.layout.WindowInfoTrackerImpl
androidx.window.layout.WindowMetricsCalculator$Companion$decorator$1
androidx.window.layout.FoldingFeature$Orientation$Companion
androidx.media.AudioAttributesCompatParcelizer
androidx.window.embedding.SplitPairFilter
com.google.firebase.analytics.connector.internal.AnalyticsConnectorRegistrar
androidx.activity.ComponentActivity$3
com.google.android.gms.common.GooglePlayServicesManifestException
androidx.window.layout.WindowMetrics
id.flutter.flutter_background_service.R$styleable
androidx.window.layout.SidecarWindowBackend$Companion
com.google.firebase.messaging.FirebaseMessagingRegistrar
com.google.android.datatransport.runtime.backends.TransportBackendDiscovery
id.flutter.flutter_background_service.FlutterBackgroundServicePlugin
androidx.window.embedding.EmbeddingInterfaceCompat$EmbeddingCallbackInterface
androidx.window.embedding.SplitRuleParser
com.dexterous.flutterlocalnotifications.models.ScheduledNotificationRepeatFrequency
io.flutter.embedding.engine.renderer.SurfaceTextureWrapper
com.dexterous.flutterlocalnotifications.models.NotificationChannelAction
com.google.android.gms.measurement.AppMeasurement$ConditionalUserProperty
androidx.window.R$id
androidx.media.AudioAttributesImplApi21
androidx.window.layout.SidecarAdapter$Companion
androidx.window.layout.EmptyDecorator
com.dexterous.flutterlocalnotifications.FlutterLocalNotificationsPlugin
androidx.window.embedding.ExtensionEmbeddingBackend$SplitListenerWrapper
androidx.window.layout.HardwareFoldingFeature
androidx.media.AudioAttributesImplApi26
com.dexterous.flutterlocalnotifications.BitmapSource
androidx.window.embedding.SplitRule
io.flutter.plugins.firebase.messaging.FlutterFirebaseAppRegistrar
id.flutter.flutter_background_service.BuildConfig
androidx.window.embedding.ExtensionEmbeddingBackend
androidx.window.layout.WindowMetricsCalculatorCompat
com.google.android.datatransport.runtime.scheduling.jobscheduling.AlarmManagerSchedulerBroadcastReceiver
android.support.v4.media.MediaDescriptionCompat
com.dexterous.flutterlocalnotifications.models.styles.BigTextStyleInformation
androidx.window.layout.SidecarCompat$TranslatingCallback
androidx.window.layout.WindowInfoTracker$Companion
com.dexterous.flutterlocalnotifications.models.PersonDetails
android.support.v4.media.MediaBrowserCompat$SearchResultReceiver
com.google.firebase.components.ComponentDiscoveryService
androidx.window.layout.SidecarCompat$DistinctElementCallback
com.dexterous.flutterlocalnotifications.models.styles.BigPictureStyleInformation
io.flutter.plugins.firebase.core.FlutterFirebaseCoreRegistrar
id.flutter.flutter_background_service.R$attr
androidx.core.app.RemoteActionCompat
androidx.window.layout.FoldingFeature$OcclusionType
androidx.window.embedding.ExtensionEmbeddingBackend$Companion
id.flutter.flutter_background_service.BootReceiver
com.dexterous.flutterlocalnotifications.RepeatInterval
androidx.window.embedding.SplitRule$Api30Impl
androidx.window.layout.ExtensionWindowLayoutInfoBackend
kotlinx.coroutines.android.AndroidDispatcherFactory
androidx.fragment.app.Fragment$2
id.flutter.flutter_background_service.R$drawable
androidx.window.layout.SidecarCompat$DistinctSidecarElementCallback
com.google.android.gms.measurement.AppMeasurementReceiver
androidx.window.layout.FoldingFeature$State
androidx.window.layout.SidecarCompat
androidx.window.layout.SidecarWindowBackend
id.flutter.flutter_background_service.R$color
com.google.android.gms.common.api.Status
androidx.window.layout.ExtensionInterfaceCompat$ExtensionCallbackInterface
android.support.v4.graphics.drawable.IconCompatParcelizer
com.dexterous.flutterlocalnotifications.RuntimeTypeAdapterFactory
androidx.window.embedding.ActivityFilter
androidx.window.core.Bounds
com.dexterous.flutterlocalnotifications.models.styles.DefaultStyleInformation
androidx.versionedparcelable.CustomVersionedParcelable
androidx.window.layout.WindowInfoTrackerDecorator
android.support.v4.media.RatingCompat
androidx.lifecycle.CompositeGeneratedAdaptersObserver
androidx.activity.ImmLeaksCleaner
androidx.media.AudioAttributesImplBase
androidx.window.layout.ExtensionInterfaceCompat
com.dexterous.flutterlocalnotifications.utils.StringUtils
androidx.window.java.layout.WindowInfoTrackerCallbackAdapter$addListener$1$1
androidx.window.embedding.SplitInfo
com.google.android.gms.measurement.AppMeasurement
androidx.window.layout.WindowInfoTrackerImpl$windowLayoutInfo$1
id.flutter.flutter_background_service.BackgroundService
androidx.lifecycle.Lifecycling$1
androidx.window.layout.WindowMetricsCalculatorDecorator
android.support.v4.media.AudioAttributesImplApi26Parcelizer
androidx.savedstate.Recreator
kotlin.coroutines.jvm.internal.BaseContinuationImpl
com.google.android.gms.common.api.internal.LifecycleCallback
com.google.firebase.ktx.FirebaseCommonKtxRegistrar
android.support.v4.media.session.MediaControllerCompat$MediaControllerImplApi21$ExtraBinderRequestResultReceiver
id.flutter.flutter_background_service.Pipe$PipeListener
androidx.window.layout.SidecarWindowBackend$ExtensionListenerImpl
androidx.lifecycle.LiveData$LifecycleBoundObserver
androidx.window.layout.HardwareFoldingFeature$Companion
io.flutter.plugins.firebase.messaging.FlutterFirebaseMessagingReceiver
androidx.window.layout.WindowLayoutInfo
com.google.firebase.messaging.FirebaseMessaging
io.flutter.view.FlutterCallbackInformation
androidx.window.layout.HardwareFoldingFeature$Type$Companion
androidx.lifecycle.ReflectiveGenericLifecycleObserver
com.google.firebase.messaging.FirebaseMessagingService
com.google.android.gms.auth.api.signin.GoogleSignInAccount
androidx.window.layout.WindowMetricsCalculator
id.flutter.flutter_background_service.R$dimen
androidx.core.graphics.drawable.IconCompatParcelizer
com.google.android.gms.common.GooglePlayServicesMissingManifestValueException
androidx.window.layout.WindowMetricsCalculator$Companion
com.google.android.gms.common.api.internal.BasePendingResult
androidx.window.embedding.EmbeddingTranslatingCallback
androidx.window.layout.SidecarCompat$registerConfigurationChangeListener$configChangeObserver$1
androidx.window.embedding.ActivityStack
id.flutter.flutter_background_service.R$string
com.dexterous.flutterlocalnotifications.models.NotificationDetails
com.dexterous.flutterlocalnotifications.ScheduledNotificationReceiver
androidx.window.layout.SidecarCompat$FirstAttachAdapter
io.flutter.embedding.engine.mutatorsstack.FlutterMutatorsStack
androidx.window.layout.SidecarCompat$Companion
androidx.lifecycle.FullLifecycleObserverAdapter
androidx.window.embedding.EmbeddingCompat$Companion
id.flutter.flutter_background_service.BackgroundService$2
android.support.v4.media.MediaMetadataCompat
androidx.media.AudioAttributesImpl
id.flutter.flutter_background_service.FlutterBackgroundServicePlugin$1
com.google.firebase.datatransport.TransportRegistrar
androidx.window.layout.WindowInfoTrackerImpl$Companion
io.flutter.plugins.firebase.messaging.FlutterFirebaseMessagingInitProvider
io.flutter.plugin.platform.SingleViewPresentation
androidx.core.graphics.drawable.IconCompat
androidx.window.embedding.MatcherUtils
androidx.window.layout.WindowBackend
id.flutter.flutter_background_service.Pipe
androidx.window.embedding.EmbeddingAdapter
com.google.firebase.iid.FirebaseInstanceIdReceiver
androidx.lifecycle.SingleGeneratedAdapterObserver
androidx.window.layout.SidecarAdapter
com.google.android.datatransport.cct.CctBackendFactory
id.flutter.flutter_background_service.R$id
android.support.v4.app.RemoteActionCompatParcelizer
io.flutter.embedding.engine.FlutterOverlaySurface
android.support.v4.media.session.PlaybackStateCompat
androidx.window.R
com.google.firebase.analytics.FirebaseAnalytics
id.flutter.flutter_background_service.R$id: int notification_main_column
com.dexterous.flutterlocalnotifications.models.NotificationDetails: java.lang.String INDETERMINATE
androidx.window.layout.WindowMetricsCalculator$Companion$reset$1: androidx.window.layout.WindowMetricsCalculator$Companion$reset$1 INSTANCE
id.flutter.flutter_background_service.Pipe: java.util.List listeners
kotlinx.coroutines.CancellableContinuationImpl: int _decision
id.flutter.flutter_background_service.R$id: int accessibility_custom_action_23
androidx.window.embedding.SplitController: androidx.window.embedding.SplitController globalInstance
kotlinx.coroutines.scheduling.CoroutineScheduler: long controlState
com.google.android.gms.internal.measurement.zzgi: com.google.android.gms.internal.measurement.zzlh zzd
id.flutter.flutter_background_service.R$attr: int fontProviderSystemFontFamily
com.dexterous.flutterlocalnotifications.FlutterLocalNotificationsPlugin: java.lang.String METHOD_CHANNEL
com.dexterous.flutterlocalnotifications.models.NotificationDetails: java.lang.String TIMEOUT_AFTER
androidx.window.R$styleable: int[] SplitPairFilter
com.dexterous.flutterlocalnotifications.FlutterLocalNotificationsPlugin: java.lang.String CREATE_NOTIFICATION_CHANNEL_METHOD
androidx.window.embedding.SplitInfo: float splitRatio
com.dexterous.flutterlocalnotifications.models.NotificationDetails: java.lang.String USES_CHRONOMETER
androidx.window.layout.WindowInfoTrackerImpl: androidx.window.layout.WindowMetricsCalculator windowMetricsCalculator
com.google.android.gms.internal.measurement.zzek: boolean zzk
com.dexterous.flutterlocalnotifications.models.MessageDetails: java.lang.String dataUri
id.flutter.flutter_background_service.R$id: int icon
com.google.android.gms.internal.measurement.zzjk: int zzb
id.flutter.flutter_background_service.R$attr: int splitMinWidth
id.flutter.flutter_background_service.R$styleable: int GradientColor_android_centerColor
com.google.android.gms.internal.measurement.zzek: java.lang.String zzf
com.google.android.gms.dynamite.descriptors.com.google.android.gms.measurement.dynamite.ModuleDescriptor: java.lang.String MODULE_ID
androidx.window.embedding.ExtensionEmbeddingBackend: androidx.window.embedding.ExtensionEmbeddingBackend$Companion Companion
com.dexterous.flutterlocalnotifications.models.NotificationDetails: java.lang.String COLOR_RED
androidx.window.embedding.MatcherUtils: java.lang.String sMatchersTag
com.dexterous.flutterlocalnotifications.models.NotificationChannelDetails: java.lang.String LED_COLOR_GREEN
id.flutter.flutter_background_service.R$id: int accessibility_custom_action_24
io.flutter.embedding.engine.FlutterJNI: boolean initCalled
io.flutter.plugins.GeneratedPluginRegistrant: java.lang.String TAG
com.google.android.gms.internal.measurement.zzfn: java.lang.String zze
com.google.android.gms.internal.measurement.zzgd: long zzV
com.dexterous.flutterlocalnotifications.models.PersonDetails: java.lang.String name
androidx.window.layout.FoldingFeature$Orientation: java.lang.String description
com.dexterous.flutterlocalnotifications.models.styles.BigPictureStyleInformation: java.lang.String contentTitle
id.flutter.flutter_background_service.R$styleable: int FontFamilyFont_android_ttcIndex
com.google.android.gms.internal.measurement.zzlb: int zzd
com.dexterous.flutterlocalnotifications.RuntimeTypeAdapterFactory: java.util.Map subtypeToLabel
id.flutter.flutter_background_service.R$id: int action_text
id.flutter.flutter_background_service.R$id: int accessibility_custom_action_13
com.dexterous.flutterlocalnotifications.models.Time: java.lang.Integer minute
io.flutter.embedding.engine.FlutterJNI: boolean prefetchDefaultFontManagerCalled
id.flutter.flutter_background_service.R$id: int accessibility_custom_action_6
androidx.window.layout.SidecarAdapter: androidx.window.layout.SidecarAdapter$Companion Companion
com.google.android.gms.internal.measurement.zzgd: java.lang.String zzy
com.dexterous.flutterlocalnotifications.RuntimeTypeAdapterFactory: java.util.Map labelToSubtype
com.dexterous.flutterlocalnotifications.models.NotificationDetails: java.lang.String NAME
id.flutter.flutter_background_service.R$style: int TextAppearance_Compat_Notification_Line2
com.dexterous.flutterlocalnotifications.models.NotificationDetails: java.lang.String CHANNEL_NAME
com.dexterous.flutterlocalnotifications.FlutterLocalNotificationsPlugin: android.app.Activity mainActivity
id.flutter.flutter_background_service.R$attr: int splitLayoutDirection
com.dexterous.flutterlocalnotifications.models.NotificationDetails: java.lang.Integer ledOnMs
id.flutter.flutter_background_service.BackgroundService$2: id.flutter.flutter_background_service.BackgroundService this$0
com.dexterous.flutterlocalnotifications.models.styles.MessagingStyleInformation: com.dexterous.flutterlocalnotifications.models.PersonDetails person
com.dexterous.flutterlocalnotifications.models.NotificationDetails: com.dexterous.flutterlocalnotifications.models.DateTimeComponents matchDateTimeComponents
com.google.android.gms.internal.measurement.zzgg: int zzd
androidx.concurrent.futures.AbstractResolvableFuture$Waiter: androidx.concurrent.futures.AbstractResolvableFuture$Waiter next
com.dexterous.flutterlocalnotifications.models.NotificationDetails: java.lang.String BODY
id.flutter.flutter_background_service.R$styleable: int FontFamilyFont_android_fontStyle
id.flutter.flutter_background_service.R$styleable: int SplitPlaceholderRule_splitMinWidth
com.google.android.gms.common.Feature: android.os.Parcelable$Creator CREATOR
com.google.android.gms.internal.measurement.zzfd: boolean zzg
androidx.window.layout.SidecarCompat$FirstAttachAdapter: java.lang.ref.WeakReference activityWeakReference
com.google.android.gms.internal.measurement.zzgd: long zzj
com.dexterous.flutterlocalnotifications.models.styles.InboxStyleInformation: java.lang.Boolean htmlFormatLines
com.dexterous.flutterlocalnotifications.models.NotificationDetails: java.lang.String category
androidx.window.layout.FoldingFeature$OcclusionType: androidx.window.layout.FoldingFeature$OcclusionType FULL
com.google.android.gms.internal.measurement.zzgd: long zzag
com.google.android.gms.internal.measurement.zzgd: com.google.android.gms.internal.measurement.zzfz zzac
com.dexterous.flutterlocalnotifications.models.NotificationDetails: java.lang.Boolean indeterminate
androidx.window.layout.HardwareFoldingFeature$Type: androidx.window.layout.HardwareFoldingFeature$Type$Companion Companion
id.flutter.flutter_background_service.R$dimen: int notification_small_icon_size_as_large
com.google.android.gms.internal.measurement.zzgd: java.lang.String zzaf
com.google.android.gms.internal.measurement.zzfp: boolean zzh
kotlinx.coroutines.DefaultExecutor: int debugStatus
com.dexterous.flutterlocalnotifications.models.styles.BigPictureStyleInformation: com.dexterous.flutterlocalnotifications.BitmapSource bigPictureBitmapSource
id.flutter.flutter_background_service.R$styleable: int[] SplitPairFilter
com.dexterous.flutterlocalnotifications.models.styles.InboxStyleInformation: java.lang.Boolean htmlFormatSummaryText
io.flutter.view.AccessibilityViewEmbedder: java.util.Map originToFlutterId
kotlin.jvm.internal.CallableReference: java.lang.Object receiver
com.dexterous.flutterlocalnotifications.FlutterLocalNotificationsPlugin: java.lang.String SHOW_WEEKLY_AT_DAY_AND_TIME_METHOD
id.flutter.flutter_background_service.R$id: int tag_unhandled_key_listeners
com.dexterous.flutterlocalnotifications.models.NotificationChannelDetails: long[] vibrationPattern
androidx.lifecycle.Lifecycle$Event: androidx.lifecycle.Lifecycle$Event ON_ANY
com.dexterous.flutterlocalnotifications.SoundSource: com.dexterous.flutterlocalnotifications.SoundSource RawResource
io.flutter.plugin.platform.SingleViewPresentation: android.content.Context outerContext
com.google.android.gms.internal.measurement.zzff: com.google.android.gms.internal.measurement.zzli zzh
androidx.window.R$attr: int secondaryActivityName
androidx.window.layout.WindowMetricsCalculator$Companion: androidx.window.layout.WindowMetricsCalculator$Companion $$INSTANCE
com.dexterous.flutterlocalnotifications.models.NotificationDetails: java.lang.Boolean channelShowBadge
com.dexterous.flutterlocalnotifications.models.NotificationDetails: java.lang.Integer ledColor
com.google.android.gms.internal.measurement.zzer: int zzd
androidx.window.R$styleable: int SplitPairRule_finishPrimaryWithSecondary
com.google.android.gms.internal.measurement.zzgi: com.google.android.gms.internal.measurement.zzli zzf
com.dexterous.flutterlocalnotifications.models.PersonDetails: java.lang.String uri
io.flutter.plugin.platform.SingleViewPresentation: io.flutter.plugin.platform.SingleViewPresentation$PresentationState state
com.google.android.gms.internal.measurement.zzfh: java.lang.String zze
androidx.window.layout.FoldingFeature$OcclusionType: java.lang.String description
com.google.android.gms.internal.measurement.zzem: com.google.android.gms.internal.measurement.zzey zze
io.flutter.embedding.engine.FlutterJNI: io.flutter.embedding.engine.dart.PlatformMessageHandler platformMessageHandler
androidx.window.layout.WindowInfoTracker$Companion: androidx.window.layout.WindowInfoTrackerDecorator decorator
com.google.android.gms.internal.measurement.zzft: com.google.android.gms.internal.measurement.zzli zze
androidx.window.embedding.ExtensionEmbeddingBackend: java.util.concurrent.CopyOnWriteArrayList splitChangeCallbacks
com.google.android.gms.internal.measurement.zzem: boolean zzg
com.dexterous.flutterlocalnotifications.models.Time: java.lang.Integer second
com.dexterous.flutterlocalnotifications.models.NotificationDetails: java.lang.String HTML_FORMAT_LINES
id.flutter.flutter_background_service.R$drawable: int notification_icon_background
com.dexterous.flutterlocalnotifications.models.NotificationDetails: java.lang.String STYLE
com.google.android.gms.internal.measurement.zzgm: com.google.android.gms.internal.measurement.zzgm zza
androidx.window.layout.SidecarWindowBackend: androidx.window.layout.SidecarWindowBackend$Companion Companion
com.google.android.gms.internal.measurement.zzer: java.lang.String zzg
com.dexterous.flutterlocalnotifications.models.NotificationDetails: java.lang.Boolean usesChronometer
id.flutter.flutter_background_service.R$styleable: int ActivityRule_alwaysExpand
androidx.window.embedding.SplitController: java.util.concurrent.locks.ReentrantLock globalLock
com.google.android.gms.internal.measurement.zzfn: java.lang.String zzk
com.dexterous.flutterlocalnotifications.FlutterLocalNotificationsPlugin: java.lang.String ZONED_SCHEDULE_METHOD
id.flutter.flutter_background_service.R$styleable: int GradientColor_android_endX
com.dexterous.flutterlocalnotifications.models.NotificationDetails: java.lang.Integer maxProgress
androidx.window.layout.SidecarWindowBackend: java.util.concurrent.CopyOnWriteArrayList windowLayoutChangeCallbacks
com.google.android.gms.common.internal.zzj: android.os.Parcelable$Creator CREATOR
com.dexterous.flutterlocalnotifications.BitmapSource: com.dexterous.flutterlocalnotifications.BitmapSource DrawableResource
com.dexterous.flutterlocalnotifications.BitmapSource: com.dexterous.flutterlocalnotifications.BitmapSource FilePath
id.flutter.flutter_background_service.R$styleable: int SplitPairFilter_secondaryActivityName
androidx.window.layout.SidecarCompat$DistinctElementCallback: java.util.concurrent.locks.ReentrantLock lock
androidx.window.embedding.ActivityFilter: java.lang.String intentAction
androidx.window.embedding.SplitRule: int minSmallestWidth
androidx.window.R$id: int ltr
androidx.window.R$attr: int secondaryActivityAction
androidx.window.layout.ExtensionWindowLayoutInfoBackend: java.util.Map activityToListeners
com.dexterous.flutterlocalnotifications.models.NotificationDetails: java.lang.String ADDITIONAL_FLAGS
com.google.android.gms.internal.measurement.zzer: java.lang.String zzh
com.google.android.gms.internal.measurement.zzgd: java.lang.String zzR
com.google.android.gms.measurement.internal.zzas: android.os.Parcelable$Creator CREATOR
com.google.android.gms.internal.measurement.zzfr: int zzd
id.flutter.flutter_background_service.R$id: int accessibility_custom_action_4
io.flutter.embedding.android.FlutterSplashView$SavedState: android.os.Parcelable$Creator CREATOR
com.dexterous.flutterlocalnotifications.models.styles.BigTextStyleInformation: java.lang.String bigText
id.flutter.flutter_background_service.R$styleable: int FontFamily_fontProviderCerts
com.dexterous.flutterlocalnotifications.models.NotificationDetails: java.lang.String ICON
com.google.android.gms.internal.measurement.zzgb: com.google.android.gms.internal.measurement.zzli zzd
com.google.android.gms.internal.measurement.zzfx: com.google.android.gms.internal.measurement.zzfx zza
com.dexterous.flutterlocalnotifications.RepeatInterval: com.dexterous.flutterlocalnotifications.RepeatInterval Hourly
id.flutter.flutter_background_service.R$id: int time
com.dexterous.flutterlocalnotifications.models.NotificationDetails: java.lang.String largeIcon
io.flutter.plugin.platform.SingleViewPresentation: java.lang.String TAG
com.google.android.gms.measurement.AppMeasurement$ConditionalUserProperty: long mTimeToLive
com.google.android.gms.internal.measurement.zzgd: boolean zzab
com.google.android.gms.internal.measurement.zzfz: com.google.android.gms.internal.measurement.zzfn zzg
com.dexterous.flutterlocalnotifications.models.NotificationDetails: java.lang.String channelDescription
com.google.android.gms.internal.measurement.zzft: long zzh
androidx.window.layout.WindowInfoTrackerImpl: androidx.window.layout.WindowInfoTrackerImpl$Companion Companion
androidx.window.layout.SidecarCompat$DistinctElementCallback: androidx.window.layout.ExtensionInterfaceCompat$ExtensionCallbackInterface callbackInterface
androidx.window.layout.ActivityCompatHelperApi30: androidx.window.layout.ActivityCompatHelperApi30 INSTANCE
id.flutter.flutter_background_service.R$dimen: int notification_main_column_padding_top
kotlin.coroutines.jvm.internal.BaseContinuationImpl: kotlin.coroutines.Continuation completion
com.dexterous.flutterlocalnotifications.models.NotificationDetails: java.lang.String SOUND
com.dexterous.flutterlocalnotifications.models.NotificationDetails: java.lang.String GROUP_CONVERSATION
id.flutter.flutter_background_service.R$id: int accessibility_custom_action_19
com.dexterous.flutterlocalnotifications.models.NotificationChannelAction: com.dexterous.flutterlocalnotifications.models.NotificationChannelAction Update
com.google.android.gms.internal.measurement.zzfx: java.lang.String zze
com.google.android.gms.internal.measurement.zzgb: com.google.android.gms.internal.measurement.zzgb zza
id.flutter.flutter_background_service.R$color: int androidx_core_ripple_material_light
io.flutter.view.AccessibilityViewEmbedder: java.lang.String TAG
com.google.android.gms.internal.measurement.zzet: int zze
com.google.android.gms.internal.measurement.zzgy: com.google.android.gms.internal.measurement.zzli zzf
com.dexterous.flutterlocalnotifications.models.NotificationDetails: java.lang.String CHANNEL_ACTION
id.flutter.flutter_background_service.R$dimen: int compat_notification_large_icon_max_width
com.google.android.gms.internal.measurement.zzei: boolean zzi
io.flutter.embedding.engine.FlutterJNI: io.flutter.plugin.localization.LocalizationPlugin localizationPlugin
com.google.android.gms.internal.measurement.zzfd: int zzh
com.dexterous.flutterlocalnotifications.models.NotificationChannelDetails: java.lang.String LED_COLOR_RED
com.google.android.gms.internal.measurement.zzgd: long zzB
id.flutter.flutter_background_service.R$attr: int fontProviderPackage
androidx.window.R$attr: int primaryActivityName
com.google.android.gms.internal.measurement.zzff: com.google.android.gms.internal.measurement.zzli zzn
com.dexterous.flutterlocalnotifications.models.NotificationChannelAction: com.dexterous.flutterlocalnotifications.models.NotificationChannelAction CreateIfNotExists
com.dexterous.flutterlocalnotifications.models.NotificationDetails: java.lang.String HIDE_EXPANDED_LARGE_ICON
androidx.window.layout.SidecarWindowBackend: boolean DEBUG
io.flutter.plugin.platform.SingleViewPresentation: io.flutter.plugin.platform.AccessibilityEventsDelegate accessibilityEventsDelegate
androidx.window.layout.ActivityCompatHelperApi24: androidx.window.layout.ActivityCompatHelperApi24 INSTANCE
androidx.window.embedding.EmbeddingCompat: boolean DEBUG
com.google.android.gms.internal.measurement.zzgd: int zzg
kotlinx.coroutines.scheduling.CoroutineScheduler: int _isTerminated
com.dexterous.flutterlocalnotifications.models.NotificationDetails: java.lang.Integer importance
com.google.android.gms.internal.measurement.zzfp: com.google.android.gms.internal.measurement.zzgi zzf
kotlinx.coroutines.scheduling.WorkQueue: int consumerIndex
id.flutter.flutter_background_service.R$id: int accessibility_custom_action_2
com.dexterous.flutterlocalnotifications.models.NotificationDetails: java.lang.String timeZoneName
id.flutter.flutter_background_service.R$color: int notification_action_color_filter
com.dexterous.flutterlocalnotifications.models.NotificationDetails: java.lang.String MATCH_DATE_TIME_COMPONENTS
androidx.window.R$id: int androidx_window_activity_scope
id.flutter.flutter_background_service.R$styleable: int GradientColorItem_android_offset
com.dexterous.flutterlocalnotifications.FlutterLocalNotificationsPlugin: java.lang.String GET_NOTIFICATION_APP_LAUNCH_DETAILS_METHOD
androidx.window.layout.WindowInfoTracker$Companion: boolean DEBUG
com.dexterous.flutterlocalnotifications.models.Time: java.lang.Integer hour
com.google.android.gms.measurement.AppMeasurement$ConditionalUserProperty: java.lang.String mTimedOutEventName
com.google.android.gms.internal.measurement.zzgt: int zzd
com.google.android.gms.common.api.Status: android.os.Parcelable$Creator CREATOR
com.google.android.gms.internal.measurement.zzer: com.google.android.gms.internal.measurement.zzer zza
com.google.android.gms.dynamite.DynamiteModule$DynamiteLoaderClassLoader: java.lang.ClassLoader sClassLoader
com.dexterous.flutterlocalnotifications.models.NotificationDetails: java.lang.String URI
androidx.window.embedding.ExtensionEmbeddingBackend: java.lang.String TAG
com.google.android.gms.internal.measurement.zzem: com.google.android.gms.internal.measurement.zzer zzf
id.flutter.flutter_background_service.R$layout: int notification_template_icon_group
androidx.window.embedding.SplitPairFilter: android.content.ComponentName secondaryActivityName
androidx.window.R$attr: int alwaysExpand
id.flutter.flutter_background_service.BackgroundService: android.os.PowerManager$WakeLock lockStatic
com.dexterous.flutterlocalnotifications.models.NotificationDetails: java.lang.String SET_AS_GROUP_SUMMARY
kotlin.jvm.internal.FunctionReference: int flags
com.google.firebase.messaging.RemoteMessage: android.os.Parcelable$Creator CREATOR
com.dexterous.flutterlocalnotifications.FlutterLocalNotificationsPlugin: java.lang.String SHOW_METHOD
androidx.window.core.Bounds: int bottom
com.google.android.gms.internal.measurement.zzgm: int zzd
kotlinx.coroutines.internal.AtomicOp: java.lang.Object _consensus
com.google.android.gms.internal.measurement.zzfd: int zzd
com.google.android.gms.internal.measurement.zzgr: java.lang.String zze
com.google.android.gms.internal.measurement.zzem: int zzd
id.flutter.flutter_background_service.R$id: int accessibility_custom_action_17
androidx.window.layout.HardwareFoldingFeature$Type: androidx.window.layout.HardwareFoldingFeature$Type FOLD
androidx.window.core.Version: androidx.window.core.Version UNKNOWN
androidx.window.R$attr: int splitMinSmallestWidth
com.dexterous.flutterlocalnotifications.models.NotificationDetails: java.lang.String PERSON
com.dexterous.flutterlocalnotifications.models.NotificationDetails: java.lang.Boolean setAsGroupSummary
com.google.android.gms.common.zzs: android.os.Parcelable$Creator CREATOR
android.support.v4.media.session.MediaSessionCompat$ResultReceiverWrapper: android.os.Parcelable$Creator CREATOR
androidx.window.R$styleable: int[] ActivityFilter
com.dexterous.flutterlocalnotifications.models.NotificationChannelDetails: java.lang.String ID
com.google.android.gms.internal.measurement.zzgp: com.google.android.gms.internal.measurement.zzgp zza
com.google.android.gms.dynamite.descriptors.com.google.android.gms.measurement.dynamite.ModuleDescriptor: int MODULE_VERSION
id.flutter.flutter_background_service.R$dimen: int notification_action_text_size
com.google.android.gms.internal.measurement.zzei: boolean zzh
androidx.window.embedding.ExtensionEmbeddingBackend: androidx.window.embedding.ExtensionEmbeddingBackend globalInstance
androidx.window.layout.ExtensionWindowLayoutInfoBackend$MulticastConsumer: java.util.Set registeredListeners
androidx.window.R$styleable: int ActivityFilter_activityName
id.flutter.flutter_background_service.R$dimen: int notification_large_icon_width
com.google.android.gms.internal.measurement.zzek: boolean zzh
com.google.android.gms.internal.measurement.zzfd: java.lang.String zze
androidx.window.core.Bounds: int left
androidx.window.embedding.SplitController: java.util.Set staticSplitRules
com.dexterous.flutterlocalnotifications.NotificationStyle: com.dexterous.flutterlocalnotifications.NotificationStyle[] $VALUES
androidx.window.embedding.SplitRule: float splitRatio
id.flutter.flutter_background_service.BackgroundService: java.util.concurrent.atomic.AtomicBoolean isRunning
kotlinx.coroutines.DispatchedCoroutine: int _decision
com.google.android.gms.internal.measurement.zzgd: java.lang.String zzP
com.google.android.gms.common.zzo: android.os.Parcelable$Creator CREATOR
androidx.window.R$styleable: int SplitPlaceholderRule_splitLayoutDirection
id.flutter.flutter_background_service.BackgroundService: io.flutter.embedding.engine.dart.DartExecutor$DartEntrypoint dartEntrypoint
id.flutter.flutter_background_service.R$id: int tag_on_receive_content_mime_types
com.dexterous.flutterlocalnotifications.models.NotificationDetails: java.lang.String WHEN
com.google.android.gms.common.api.internal.BasePendingResult: com.google.android.gms.common.api.internal.zas mResultGuardian
com.google.android.gms.internal.measurement.zzgt: com.google.android.gms.internal.measurement.zzgp zzf
com.dexterous.flutterlocalnotifications.NotificationStyle: com.dexterous.flutterlocalnotifications.NotificationStyle BigPicture
androidx.window.R$styleable: int SplitPairFilter_primaryActivityName
com.google.android.gms.internal.measurement.zzgd: int zza
id.flutter.flutter_background_service.R$id: int androidx_window_activity_scope
com.google.android.gms.internal.measurement.zzek: int zze
androidx.window.layout.SidecarCompat: java.util.Map windowListenerRegisteredContexts
com.dexterous.flutterlocalnotifications.models.NotificationChannelDetails: java.lang.Boolean showBadge
io.flutter.view.AccessibilityViewEmbedder: java.util.Map embeddedViewToDisplayBounds
androidx.window.core.Version: androidx.window.core.Version VERSION_1_0
com.dexterous.flutterlocalnotifications.models.NotificationDetails: java.lang.String ONGOING
kotlin.jvm.internal.CallableReference: java.lang.Object NO_RECEIVER
androidx.window.layout.WindowInfoTracker$Companion: java.lang.String TAG
androidx.window.layout.FoldingFeature$State: androidx.window.layout.FoldingFeature$State FLAT
androidx.window.embedding.ActivityRule: java.util.Set filters
id.flutter.flutter_background_service.R$styleable: int FontFamily_fontProviderSystemFontFamily
androidx.window.R$styleable: int SplitPairRule_splitMinSmallestWidth
androidx.window.embedding.ExtensionEmbeddingBackend$SplitListenerWrapper: androidx.core.util.Consumer callback
id.flutter.flutter_background_service.R$attr: int activityAction
id.flutter.flutter_background_service.R$id: int accessibility_custom_action_26
io.flutter.view.AccessibilityViewEmbedder: android.util.SparseArray flutterIdToOrigin
id.flutter.flutter_background_service.BackgroundService: java.lang.String notificationChannelId
com.google.android.gms.internal.measurement.zzek: boolean zzl
com.google.android.gms.internal.measurement.zzgk: com.google.android.gms.internal.measurement.zzgk zza
id.flutter.flutter_background_service.R$styleable: int SplitPlaceholderRule_splitRatio
androidx.window.layout.SidecarCompat: androidx.window.sidecar.SidecarInterface sidecar
com.dexterous.flutterlocalnotifications.models.Time: java.lang.String MINUTE
androidx.window.layout.ExtensionWindowLayoutInfoBackend$MulticastConsumer: java.util.concurrent.locks.ReentrantLock multicastConsumerLock
com.dexterous.flutterlocalnotifications.models.NotificationDetails: java.lang.Integer id
com.google.android.gms.internal.measurement.zzfr: long zzf
com.dexterous.flutterlocalnotifications.FlutterLocalNotificationsPlugin: java.lang.String GET_NOTIFICATION_CHANNELS_METHOD
id.flutter.flutter_background_service.R$id: int chronometer
id.flutter.flutter_background_service.BackgroundService: java.lang.String notificationTitle
io.flutter.plugin.editing.ImeSyncDeferringInsetsCallback: boolean needsSave
id.flutter.flutter_background_service.R$id: int right_side
id.flutter.flutter_background_service.R$styleable: int FontFamilyFont_android_fontWeight
androidx.window.layout.WindowInfoTrackerImpl$windowLayoutInfo$1: java.lang.Object L$0
com.google.android.gms.internal.measurement.zzgd: java.lang.String zzp
com.dexterous.flutterlocalnotifications.models.NotificationDetails: java.lang.String BOT
id.flutter.flutter_background_service.R$id: int info
android.support.v4.media.RatingCompat: android.os.Parcelable$Creator CREATOR
id.flutter.flutter_background_service.R$styleable: int[] GradientColor
com.dexterous.flutterlocalnotifications.RepeatInterval: com.dexterous.flutterlocalnotifications.RepeatInterval Daily
id.flutter.flutter_background_service.R$id: int accessibility_custom_action_30
com.dexterous.flutterlocalnotifications.models.MessageDetails: java.lang.String text
androidx.window.layout.WindowInfoTracker: androidx.window.layout.WindowInfoTracker$Companion Companion
kotlinx.coroutines.scheduling.CoroutineScheduler: long parkedWorkersStack
id.flutter.flutter_background_service.FlutterBackgroundServicePlugin: id.flutter.flutter_background_service.Config config
com.google.android.gms.signin.internal.zag: android.os.Parcelable$Creator CREATOR
androidx.window.R$attr: int activityAction
io.flutter.embedding.engine.FlutterJNI: java.lang.String TAG
kotlin.jvm.internal.CallableReference: boolean isTopLevel
com.dexterous.flutterlocalnotifications.models.NotificationChannelDetails: com.dexterous.flutterlocalnotifications.SoundSource soundSource
com.dexterous.flutterlocalnotifications.models.NotificationDetails: java.lang.String IMPORTANCE
id.flutter.flutter_background_service.R$style: int TextAppearance_Compat_Notification_Title
androidx.window.layout.SidecarCompat$TranslatingCallback: androidx.window.layout.SidecarCompat this$0
androidx.window.layout.SidecarCompat$DistinctElementCallback: java.util.WeakHashMap activityWindowLayoutInfo
com.google.android.gms.internal.measurement.zzft: int zzd
com.dexterous.flutterlocalnotifications.models.NotificationDetails: java.lang.String ONLY_ALERT_ONCE
id.flutter.flutter_background_service.R$attr: int fontProviderCerts
id.flutter.flutter_background_service.R$id: int accessibility_custom_action_8
com.google.android.gms.internal.measurement.zzgd: java.lang.String zzad
com.dexterous.flutterlocalnotifications.models.MessageDetails: java.lang.String dataMimeType
androidx.window.embedding.EmbeddingCompat: java.lang.String TAG
kotlinx.coroutines.EventLoopImplBase$DelayedTask: java.lang.Object _heap
com.google.android.gms.internal.measurement.zzgd: long zzk
id.flutter.flutter_background_service.R$styleable: int[] ColorStateListItem
com.google.android.gms.internal.measurement.zzfn: java.lang.String zzj
id.flutter.flutter_background_service.R$attr: int primaryActivityName
kotlinx.coroutines.internal.LockFreeLinkedListNode: java.lang.Object _removedRef
id.flutter.flutter_background_service.R$color: int androidx_core_secondary_text_default_material_light
com.google.android.gms.common.internal.MethodInvocation: android.os.Parcelable$Creator CREATOR
id.flutter.flutter_background_service.R$styleable: int SplitPlaceholderRule_splitMinSmallestWidth
id.flutter.flutter_background_service.R$dimen: int notification_top_pad_large_text
kotlinx.coroutines.CancellableContinuationImpl: java.lang.Object _state
com.google.android.gms.common.zzq: android.os.Parcelable$Creator CREATOR
com.google.android.gms.measurement.internal.zzq: android.os.Parcelable$Creator CREATOR
com.dexterous.flutterlocalnotifications.FlutterLocalNotificationsPlugin: java.lang.String INVALID_ICON_ERROR_CODE
com.dexterous.flutterlocalnotifications.models.NotificationDetails: java.lang.String sound
com.google.android.gms.internal.measurement.zzff: java.lang.String zzr
androidx.window.layout.HardwareFoldingFeature: androidx.window.layout.FoldingFeature$State state
id.flutter.flutter_background_service.R$styleable: int Capability_queryPatterns
id.flutter.flutter_background_service.R$drawable: int notify_panel_notification_icon_bg
id.flutter.flutter_background_service.R$id: int locale
androidx.window.R$id: int rtl
com.dexterous.flutterlocalnotifications.models.NotificationDetails: java.lang.String LED_ON_MS
kotlinx.coroutines.channels.AbstractSendChannel: java.lang.Object onCloseHandler
id.flutter.flutter_background_service.R$id: int accessibility_custom_action_3
id.flutter.flutter_background_service.R$styleable: int[] SplitPlaceholderRule
kotlinx.coroutines.JobSupport$Finishing: java.lang.Object _rootCause
androidx.window.R$attr: int splitRatio
androidx.window.layout.SidecarCompat$FirstAttachAdapter: androidx.window.layout.SidecarCompat sidecarCompat
com.dexterous.flutterlocalnotifications.models.NotificationDetails: java.lang.Boolean fullScreenIntent
com.dexterous.flutterlocalnotifications.models.NotificationChannelDetails: java.lang.String LED_COLOR_ALPHA
com.dexterous.flutterlocalnotifications.models.styles.DefaultStyleInformation: java.lang.Boolean htmlFormatTitle
com.google.android.gms.internal.measurement.zzgd: int zzC
com.google.android.gms.internal.measurement.zzgd: boolean zzF
com.dexterous.flutterlocalnotifications.models.NotificationDetails: java.lang.String PLATFORM_SPECIFICS
com.google.android.gms.internal.measurement.zzfn: com.google.android.gms.internal.measurement.zzfn zza
com.google.android.gms.internal.measurement.zzem: java.lang.String zzh
id.flutter.flutter_background_service.R$styleable: int ColorStateListItem_android_alpha
kotlinx.coroutines.android.AndroidExceptionPreHandler: java.lang.Object _preHandler
id.flutter.flutter_background_service.R$id: int notification_main_column_container
com.dexterous.flutterlocalnotifications.models.NotificationChannelGroupDetails: java.lang.String NAME
com.dexterous.flutterlocalnotifications.models.IconSource: com.dexterous.flutterlocalnotifications.models.IconSource BitmapFilePath
androidx.window.R$styleable: int ActivityRule_alwaysExpand
id.flutter.flutter_background_service.R$dimen: int notification_big_circle_margin
com.dexterous.flutterlocalnotifications.models.NotificationDetails: java.lang.Boolean enableLights
com.dexterous.flutterlocalnotifications.models.styles.MessagingStyleInformation: java.lang.Boolean groupConversation
com.google.android.gms.internal.measurement.zzft: java.lang.String zzf
com.dexterous.flutterlocalnotifications.models.NotificationDetails: java.lang.String SUB_TEXT
kotlin.coroutines.jvm.internal.SuspendLambda: int arity
com.google.android.gms.internal.measurement.zzfx: com.google.android.gms.internal.measurement.zzli zzj
android.support.v4.media.session.MediaSessionCompat$Token: android.os.Parcelable$Creator CREATOR
androidx.fragment.app.FragmentState: android.os.Parcelable$Creator CREATOR
kotlinx.coroutines.internal.DispatchedContinuation: java.lang.Object _reusableCancellableContinuation
com.dexterous.flutterlocalnotifications.FlutterLocalNotificationsPlugin: java.lang.String PERIODICALLY_SHOW_METHOD
kotlinx.coroutines.EventLoopImplBase: java.lang.Object _queue
com.dexterous.flutterlocalnotifications.models.styles.BigPictureStyleInformation: java.lang.String largeIcon
androidx.window.layout.SidecarWindowBackend$WindowLayoutChangeCallbackWrapper: android.app.Activity activity
io.flutter.view.FlutterCallbackInformation: java.lang.String callbackLibraryPath
id.flutter.flutter_background_service.R$id: int accessibility_custom_action_31
com.dexterous.flutterlocalnotifications.models.NotificationDetails: java.lang.String BIG_TEXT
io.flutter.embedding.engine.renderer.SurfaceTextureWrapper: android.graphics.SurfaceTexture surfaceTexture
com.google.android.gms.measurement.AppMeasurement$ConditionalUserProperty: java.lang.String mTriggeredEventName
com.dexterous.flutterlocalnotifications.FlutterLocalNotificationsPlugin: java.lang.String INVALID_BIG_PICTURE_ERROR_CODE
com.google.android.gms.internal.measurement.zzfh: com.google.android.gms.internal.measurement.zzfh zza
kotlinx.coroutines.internal.LockFreeTaskQueueCore: long _state
id.flutter.flutter_background_service.R$layout: int notification_action
com.dexterous.flutterlocalnotifications.models.NotificationDetails: java.lang.Integer iconResourceId
com.dexterous.flutterlocalnotifications.models.NotificationChannelGroupDetails: java.lang.String ID
com.dexterous.flutterlocalnotifications.models.NotificationDetails: java.lang.String SOUND_SOURCE
com.google.android.gms.internal.measurement.zzgm: java.lang.String zzg
androidx.window.layout.EmptyDecorator: androidx.window.layout.EmptyDecorator INSTANCE
com.dexterous.flutterlocalnotifications.models.NotificationDetails: java.lang.String SHORTCUT_ID
com.google.android.gms.internal.measurement.zzgi: com.google.android.gms.internal.measurement.zzgi zza
androidx.window.R$styleable: int SplitPairFilter_secondaryActivityAction
id.flutter.flutter_background_service.R$id: int right_icon
com.dexterous.flutterlocalnotifications.FlutterLocalNotificationsPlugin: java.lang.String DELETE_NOTIFICATION_CHANNEL_GROUP_METHOD
com.google.android.gms.internal.measurement.zzgd: com.google.android.gms.internal.measurement.zzli zzae
com.google.android.gms.internal.measurement.zzgd: java.lang.String zzX
com.google.android.gms.internal.measurement.zzey: java.lang.String zzf
com.dexterous.flutterlocalnotifications.models.NotificationChannelDetails: java.lang.String ENABLE_VIBRATION
id.flutter.flutter_background_service.R$styleable: int ActivityFilter_activityName
com.dexterous.flutterlocalnotifications.models.NotificationChannelDetails: java.lang.Boolean enableLights
id.flutter.flutter_background_service.R$id: int accessibility_custom_action_20
id.flutter.flutter_background_service.R$id: int tag_state_description
androidx.window.core.Version: java.lang.String description
com.google.android.gms.common.internal.zav: android.os.Parcelable$Creator CREATOR
com.google.android.gms.internal.measurement.zzgd: java.lang.String zzH
id.flutter.flutter_background_service.R$styleable: int GradientColor_android_endColor
id.flutter.flutter_background_service.BackgroundService: id.flutter.flutter_background_service.Config config
io.flutter.view.AccessibilityViewEmbedder: android.view.View rootAccessibilityView
com.google.android.gms.measurement.internal.zzac: android.os.Parcelable$Creator CREATOR
com.dexterous.flutterlocalnotifications.models.NotificationDetails: java.lang.Integer visibility
androidx.window.embedding.SplitPairRule: boolean clearTop
com.google.android.gms.internal.measurement.zzgd: com.google.android.gms.internal.measurement.zzgd zzd
id.flutter.flutter_background_service.BackgroundService$1: id.flutter.flutter_background_service.BackgroundService this$0
com.google.android.gms.internal.measurement.zzgi: com.google.android.gms.internal.measurement.zzlh zze
com.google.android.gms.internal.measurement.zzgd: int zzJ
com.google.android.gms.internal.measurement.zzfn: int zzd
com.dexterous.flutterlocalnotifications.models.styles.BigPictureStyleInformation: com.dexterous.flutterlocalnotifications.BitmapSource largeIconBitmapSource
androidx.window.embedding.EmbeddingCompat: androidx.window.embedding.EmbeddingCompat$Companion Companion
androidx.window.R$styleable: int[] SplitPairRule
id.flutter.flutter_background_service.R$styleable: int FontFamilyFont_font
com.dexterous.flutterlocalnotifications.models.NotificationDetails: java.lang.String KEY
com.dexterous.flutterlocalnotifications.FlutterLocalNotificationsPlugin: java.lang.String SCHEDULE_METHOD
com.dexterous.flutterlocalnotifications.models.NotificationDetails: java.lang.String CALLED_AT
id.flutter.flutter_background_service.R$id: int blocking
com.dexterous.flutterlocalnotifications.models.NotificationChannelDetails: java.lang.String description
com.google.android.gms.internal.measurement.zzgd: java.lang.String zzt
com.dexterous.flutterlocalnotifications.models.styles.BigTextStyleInformation: java.lang.String summaryText
com.google.android.gms.measurement.AppMeasurement$ConditionalUserProperty: java.lang.String mAppId
com.google.android.gms.internal.measurement.zzgp: com.google.android.gms.internal.measurement.zzli zzd
com.google.android.gms.internal.measurement.zzff: long zze
androidx.window.layout.FoldingFeature$State: androidx.window.layout.FoldingFeature$State$Companion Companion
com.dexterous.flutterlocalnotifications.models.PersonDetails: java.lang.String key
android.support.v4.media.session.ParcelableVolumeInfo: android.os.Parcelable$Creator CREATOR
com.google.android.gms.internal.measurement.zzgk: int zzd
id.flutter.flutter_background_service.FlutterBackgroundServicePlugin: id.flutter.flutter_background_service.Pipe$PipeListener listener
id.flutter.flutter_background_service.BackgroundService: java.lang.String notificationContent
com.dexterous.flutterlocalnotifications.models.NotificationDetails: java.lang.Long calledAt
id.flutter.flutter_background_service.R$styleable: int GradientColor_android_endY
id.flutter.flutter_background_service.FlutterBackgroundServicePlugin: android.os.Handler mainHandler
id.flutter.flutter_background_service.R$style: int TextAppearance_Compat_Notification
androidx.window.layout.ExtensionWindowLayoutInfoBackend: java.util.concurrent.locks.ReentrantLock extensionWindowBackendLock
androidx.window.R$id: int locale
com.dexterous.flutterlocalnotifications.models.NotificationDetails: java.lang.String CONTENT_TITLE
androidx.window.layout.FoldingFeature$Orientation: androidx.window.layout.FoldingFeature$Orientation HORIZONTAL
com.google.android.gms.internal.measurement.zzfj: int zzd
id.flutter.flutter_background_service.R$attr: int secondaryActivityName
id.flutter.flutter_background_service.R$id: int accessibility_custom_action_10
com.dexterous.flutterlocalnotifications.models.NotificationChannelDetails: java.lang.String DESCRIPTION
androidx.window.layout.WindowInfoTrackerImpl$windowLayoutInfo$1: java.lang.Object L$1
com.dexterous.flutterlocalnotifications.models.NotificationChannelDetails: java.lang.String name
com.dexterous.flutterlocalnotifications.models.NotificationDetails: java.lang.String MILLISECONDS_SINCE_EPOCH
id.flutter.flutter_background_service.R$attr: int queryPatterns
id.flutter.flutter_background_service.R$id: int tag_screen_reader_focusable
id.flutter.flutter_background_service.R$styleable: int FontFamily_fontProviderAuthority
com.google.android.gms.internal.measurement.zzfp: int zze
id.flutter.flutter_background_service.R$styleable: int Capability_shortcutMatchRequired
com.google.android.gms.internal.measurement.zzgd: int zze
id.flutter.flutter_background_service.R$styleable: int SplitPlaceholderRule_splitLayoutDirection
androidx.window.layout.SidecarWindowBackend: androidx.window.layout.ExtensionInterfaceCompat windowExtension
id.flutter.flutter_background_service.R$id: int tag_accessibility_pane_title
com.google.android.gms.internal.measurement.zzgy: int zzd
com.google.android.gms.common.api.Scope: android.os.Parcelable$Creator CREATOR
androidx.window.layout.SidecarCompat: androidx.window.layout.ExtensionInterfaceCompat$ExtensionCallbackInterface extensionCallback
com.dexterous.flutterlocalnotifications.models.NotificationDetails: java.lang.String REPEAT_TIME
com.dexterous.flutterlocalnotifications.FlutterLocalNotificationsPlugin: java.lang.String CREATE_NOTIFICATION_CHANNEL_GROUP_METHOD
id.flutter.flutter_background_service.R$styleable: int SplitPairRule_clearTop
id.flutter.flutter_background_service.R$id: int forever
id.flutter.flutter_background_service.R$layout: int notification_template_part_chronometer
com.dexterous.flutterlocalnotifications.models.NotificationDetails: java.lang.String TICKER
android.support.v4.os.ResultReceiver: android.os.Parcelable$Creator CREATOR
kotlin.jvm.internal.CallableReference: java.lang.String name
id.flutter.flutter_background_service.R$styleable: int[] FontFamily
com.dexterous.flutterlocalnotifications.models.NotificationDetails: java.lang.String ENABLE_LIGHTS
id.flutter.flutter_background_service.R$id: int normal
com.google.android.gms.internal.measurement.zzff: java.lang.String zzp
com.google.android.gms.internal.measurement.zzky: com.google.android.gms.internal.measurement.zzks zza
kotlinx.coroutines.JobSupport$Finishing: int _isCompleting
androidx.window.embedding.ExtensionEmbeddingBackend: java.util.concurrent.CopyOnWriteArraySet splitRules
id.flutter.flutter_background_service.R$dimen: int compat_button_padding_horizontal_material
id.flutter.flutter_background_service.BackgroundService: int notificationId
com.google.android.gms.internal.measurement.zzfv: long zzf
androidx.window.layout.SidecarCompat: java.util.Map componentCallbackMap
androidx.concurrent.futures.AbstractResolvableFuture: androidx.concurrent.futures.AbstractResolvableFuture$Waiter waiters
com.dexterous.flutterlocalnotifications.models.NotificationDetails: java.lang.String PRIORITY
com.dexterous.flutterlocalnotifications.models.NotificationDetails: java.lang.String MESSAGES
androidx.window.embedding.SplitPlaceholderRule: android.content.Intent placeholderIntent
com.dexterous.flutterlocalnotifications.models.NotificationDetails: java.lang.String TIME_ZONE_NAME
id.flutter.flutter_background_service.R$dimen: int compat_button_padding_vertical_material
com.dexterous.flutterlocalnotifications.models.NotificationChannelDetails: java.lang.String SHOW_BADGE
id.flutter.flutter_background_service.R$id: int tag_accessibility_actions
com.dexterous.flutterlocalnotifications.models.styles.MessagingStyleInformation: java.lang.String conversationTitle
com.google.android.gms.internal.measurement.zzgg: com.google.android.gms.internal.measurement.zzli zzf
androidx.window.embedding.SplitRule$Api30Impl: androidx.window.embedding.SplitRule$Api30Impl INSTANCE
com.google.android.gms.internal.measurement.zzgd: java.lang.String zzE
com.google.android.gms.internal.measurement.zzgd: long zzl
io.flutter.embedding.engine.renderer.SurfaceTextureWrapper: boolean released
com.dexterous.flutterlocalnotifications.models.NotificationDetails: java.lang.String title
android.support.v4.media.MediaDescriptionCompat: android.os.Parcelable$Creator CREATOR
androidx.window.layout.WindowMetricsCalculator: androidx.window.layout.WindowMetricsCalculator$Companion Companion
com.dexterous.flutterlocalnotifications.models.styles.InboxStyleInformation: java.lang.String contentTitle
com.google.android.gms.internal.measurement.zzfj: com.google.android.gms.internal.measurement.zzfj zza
com.google.android.gms.internal.measurement.zzfb: com.google.android.gms.internal.measurement.zzli zzf
com.dexterous.flutterlocalnotifications.FlutterLocalNotificationsPlugin: android.content.Intent launchIntent
id.flutter.flutter_background_service.R$styleable: int SplitPairFilter_secondaryActivityAction
com.dexterous.flutterlocalnotifications.models.styles.BigTextStyleInformation: java.lang.String contentTitle
com.google.android.gms.measurement.AppMeasurement$ConditionalUserProperty: long mTriggerTimeout
com.google.android.gms.measurement.internal.zzau: android.os.Parcelable$Creator CREATOR
com.dexterous.flutterlocalnotifications.FlutterLocalNotificationsPlugin: java.lang.String CANCEL_ALL_METHOD
androidx.window.core.Version: java.lang.String VERSION_PATTERN_STRING
com.google.android.gms.measurement.AppMeasurement$ConditionalUserProperty: android.os.Bundle mExpiredEventParams
com.dexterous.flutterlocalnotifications.models.NotificationDetails: com.dexterous.flutterlocalnotifications.NotificationStyle style
io.flutter.plugin.editing.ImeSyncDeferringInsetsCallback: android.view.View view
id.flutter.flutter_background_service.R$styleable: int[] GradientColorItem
kotlinx.coroutines.internal.LockFreeLinkedListNode: java.lang.Object _next
com.dexterous.flutterlocalnotifications.models.NotificationDetails: java.lang.String SCHEDULED_NOTIFICATION_REPEAT_FREQUENCY
com.google.android.gms.internal.measurement.zzff: java.lang.String zzf
com.dexterous.flutterlocalnotifications.models.NotificationChannelDetails: java.lang.String SOUND
com.google.android.gms.cloudmessaging.zzd: android.os.Parcelable$Creator CREATOR
id.flutter.flutter_background_service.R$id: int accessibility_custom_action_0
id.flutter.flutter_background_service.R$id: int text
com.google.android.gms.measurement.AppMeasurement$ConditionalUserProperty: java.lang.String mName
id.flutter.flutter_background_service.WatchdogReceiver: java.lang.String ACTION_RESPAWN
id.flutter.flutter_background_service.R$attr: int fontProviderAuthority
com.dexterous.flutterlocalnotifications.models.NotificationDetails: java.lang.String HTML_FORMAT_CONTENT_TITLE
id.flutter.flutter_background_service.R$id: int line3
io.flutter.embedding.android.FlutterSplashView$SavedState: java.lang.String previousCompletedSplashIsolate
com.google.android.gms.measurement.AppMeasurement$ConditionalUserProperty: boolean mActive
androidx.window.embedding.ActivityFilter: android.content.ComponentName componentName
com.google.android.gms.signin.internal.zaa: android.os.Parcelable$Creator CREATOR
com.google.android.gms.internal.measurement.zzfj: java.lang.String zze
com.google.android.gms.internal.measurement.zzfz: java.lang.String zzf
androidx.window.layout.FoldingFeature$State: androidx.window.layout.FoldingFeature$State HALF_OPENED
com.google.android.gms.internal.measurement.zzfz: com.google.android.gms.internal.measurement.zzfz zza
com.dexterous.flutterlocalnotifications.models.NotificationDetails: java.lang.String HTML_FORMAT_CONTENT
id.flutter.flutter_background_service.R$drawable: int notification_bg_low
id.flutter.flutter_background_service.R$id: int accessibility_custom_action_11
androidx.window.layout.WindowLayoutInfo: java.util.List displayFeatures
com.dexterous.flutterlocalnotifications.models.NotificationDetails: java.lang.String LED_COLOR_RED
id.flutter.flutter_background_service.R$style: int Widget_Compat_NotificationActionText
com.dexterous.flutterlocalnotifications.models.NotificationDetails: java.lang.String HTML_FORMAT_BIG_TEXT
com.dexterous.flutterlocalnotifications.models.MessageDetails: java.lang.Long timestamp
io.flutter.view.FlutterCallbackInformation: java.lang.String callbackClassName
com.dexterous.flutterlocalnotifications.models.NotificationDetails: java.lang.String VISIBILITY
com.google.android.gms.signin.internal.zak: android.os.Parcelable$Creator CREATOR
com.google.android.gms.internal.measurement.zzgd: int zzf
id.flutter.flutter_background_service.BuildConfig: java.lang.String LIBRARY_PACKAGE_NAME
id.flutter.flutter_background_service.R$id: int action_divider
id.flutter.flutter_background_service.R$dimen: int compat_button_inset_horizontal_material
com.dexterous.flutterlocalnotifications.models.NotificationDetails: java.lang.Boolean playSound
id.flutter.flutter_background_service.R$styleable: int[] Capability
androidx.window.java.layout.WindowInfoTrackerCallbackAdapter$addListener$1$1$invokeSuspend$$inlined$collect$1: androidx.core.util.Consumer $consumer$inlined
id.flutter.flutter_background_service.R$attr: int fontWeight
com.dexterous.flutterlocalnotifications.FlutterLocalNotificationsPlugin: java.lang.String SELECT_NOTIFICATION
com.dexterous.flutterlocalnotifications.models.NotificationChannelDetails: java.lang.String NAME
com.dexterous.flutterlocalnotifications.models.NotificationDetails: long[] vibrationPattern
com.dexterous.flutterlocalnotifications.FlutterLocalNotificationsPlugin: java.lang.String INVALID_SOUND_ERROR_CODE
id.flutter.flutter_background_service.R$id: int accessibility_custom_action_18
com.dexterous.flutterlocalnotifications.models.NotificationDetails: java.lang.String DAY
id.flutter.flutter_background_service.R$styleable: int GradientColor_android_startColor
id.flutter.flutter_background_service.R$layout: int notification_template_custom_big
com.google.android.gms.internal.measurement.zzfn: java.lang.String zzg
androidx.window.embedding.ActivityStack: boolean isEmpty
android.support.v4.media.session.PlaybackStateCompat: android.os.Parcelable$Creator CREATOR
com.dexterous.flutterlocalnotifications.models.PersonDetails: java.lang.Boolean bot
com.dexterous.flutterlocalnotifications.models.NotificationDetails: java.lang.String DATA_URI
id.flutter.flutter_background_service.R$style: int Widget_Compat_NotificationActionContainer
com.dexterous.flutterlocalnotifications.models.NotificationDetails: java.lang.String ALLOW_WHILE_IDLE
id.flutter.flutter_background_service.R$dimen: int notification_content_margin_start
id.flutter.flutter_background_service.BackgroundService: id.flutter.flutter_background_service.Pipe$PipeListener listener
com.dexterous.flutterlocalnotifications.models.Time: java.lang.String SECOND
androidx.window.layout.WindowMetrics: androidx.window.core.Bounds _bounds
com.google.android.gms.internal.measurement.zzgd: java.lang.String zzD
androidx.window.layout.WindowInfoTracker$Companion: androidx.window.layout.WindowInfoTracker$Companion $$INSTANCE
com.google.android.gms.internal.measurement.zzfb: com.google.android.gms.internal.measurement.zzfb zza
com.google.android.gms.internal.measurement.zzfx: long zzg
com.dexterous.flutterlocalnotifications.models.NotificationDetails: java.lang.String icon
androidx.concurrent.futures.AbstractResolvableFuture$Waiter: java.lang.Thread thread
id.flutter.flutter_background_service.R$attr: int placeholderActivityName
id.flutter.flutter_background_service.R$style: int TextAppearance_Compat_Notification_Info
id.flutter.flutter_background_service.R$styleable: int SplitPairRule_finishPrimaryWithSecondary
com.dexterous.flutterlocalnotifications.FlutterLocalNotificationsPlugin: java.lang.String SCHEDULED_NOTIFICATIONS
id.flutter.flutter_background_service.BackgroundService: java.lang.String LOCK_NAME
id.flutter.flutter_background_service.R$attr: int ttcIndex
id.flutter.flutter_background_service.FlutterBackgroundServicePlugin$2: io.flutter.plugin.common.EventChannel$EventSink val$sink
android.support.v4.media.MediaMetadataCompat: android.os.Parcelable$Creator CREATOR
com.dexterous.flutterlocalnotifications.SoundSource: com.dexterous.flutterlocalnotifications.SoundSource[] $VALUES
com.google.android.gms.internal.measurement.zzgg: com.google.android.gms.internal.measurement.zzgg zza
com.google.android.gms.internal.measurement.zzgd: boolean zzZ
com.google.android.gms.internal.measurement.zzfb: java.lang.String zze
com.google.android.gms.internal.measurement.zzgt: com.google.android.gms.internal.measurement.zzli zze
com.google.android.gms.internal.measurement.zzei: com.google.android.gms.internal.measurement.zzli zzf
androidx.window.core.Version: int minor
id.flutter.flutter_background_service.FlutterBackgroundServicePlugin: io.flutter.plugin.common.MethodChannel channel
com.dexterous.flutterlocalnotifications.RepeatInterval: com.dexterous.flutterlocalnotifications.RepeatInterval[] $VALUES
id.flutter.flutter_background_service.R$dimen: int notification_small_icon_background_padding
com.google.android.gms.internal.measurement.zzgd: com.google.android.gms.internal.measurement.zzgg zzS
androidx.concurrent.futures.AbstractResolvableFuture: java.lang.Object value
com.google.android.gms.internal.measurement.zzer: java.lang.String zzi
com.dexterous.flutterlocalnotifications.models.styles.BigPictureStyleInformation: java.lang.Boolean htmlFormatContentTitle
id.flutter.flutter_background_service.R$styleable: int GradientColor_android_tileMode
io.flutter.plugin.platform.SingleViewPresentation: io.flutter.plugin.platform.SingleViewPresentation$AccessibilityDelegatingFrameLayout rootView
androidx.lifecycle.Lifecycle$Event: androidx.lifecycle.Lifecycle$Event ON_START
com.dexterous.flutterlocalnotifications.models.NotificationDetails: java.lang.Boolean onlyAlertOnce
id.flutter.flutter_background_service.R$attr: int shortcutMatchRequired
com.dexterous.flutterlocalnotifications.models.NotificationDetails: java.lang.Integer groupAlertBehavior
id.flutter.flutter_background_service.R$styleable: int FontFamily_fontProviderPackage
com.google.android.gms.internal.measurement.zzet: boolean zzh
io.flutter.plugin.editing.ImeSyncDeferringInsetsCallback: int deferredInsetTypes
com.google.android.gms.internal.measurement.zzgg: int zze
id.flutter.flutter_background_service.R$dimen: int notification_right_icon_size
id.flutter.flutter_background_service.R$layout: int custom_dialog
kotlinx.coroutines.EventLoopImplBase: int _isCompleted
androidx.lifecycle.Lifecycle$Event: androidx.lifecycle.Lifecycle$Event ON_RESUME
androidx.window.embedding.ExtensionEmbeddingBackend: androidx.window.embedding.EmbeddingInterfaceCompat embeddingExtension
com.google.android.gms.internal.measurement.zzgy: double zzj
id.flutter.flutter_background_service.R$drawable: int ic_bg_service_small
com.google.android.gms.measurement.AppMeasurement$ConditionalUserProperty: long mCreationTimestamp
androidx.window.layout.SidecarAdapter: java.lang.String TAG
androidx.window.layout.FoldingFeature$OcclusionType: androidx.window.layout.FoldingFeature$OcclusionType NONE
com.dexterous.flutterlocalnotifications.models.NotificationChannelDetails: java.lang.String IMPORTANCE
com.dexterous.flutterlocalnotifications.models.styles.DefaultStyleInformation: java.lang.Boolean htmlFormatBody
io.flutter.embedding.engine.FlutterJNI: io.flutter.plugin.platform.PlatformViewsController platformViewsController
androidx.window.core.Version: kotlin.Lazy bigInteger$delegate
com.dexterous.flutterlocalnotifications.models.NotificationDetails: java.lang.String ENABLE_VIBRATION
androidx.window.layout.WindowMetricsCalculatorCompat: androidx.window.layout.WindowMetricsCalculatorCompat INSTANCE
io.flutter.plugin.platform.SingleViewPresentation: boolean startFocused
id.flutter.flutter_background_service.R$dimen: int compat_button_inset_vertical_material
com.google.android.gms.internal.measurement.zzgk: int zze
com.google.android.gms.internal.measurement.zzei: int zzd
com.google.android.gms.internal.measurement.zzek: com.google.android.gms.internal.measurement.zzli zzg
com.dexterous.flutterlocalnotifications.models.NotificationDetails: java.lang.String LINES
com.dexterous.flutterlocalnotifications.models.NotificationDetails: java.lang.String AUTO_CANCEL
com.dexterous.flutterlocalnotifications.FlutterLocalNotificationsPlugin: io.flutter.plugin.common.MethodChannel channel
com.google.android.gms.internal.measurement.zzek: boolean zzj
androidx.window.layout.DisplayCompatHelperApi28: androidx.window.layout.DisplayCompatHelperApi28 INSTANCE
androidx.window.R$styleable: int[] ActivityRule
androidx.window.embedding.SplitInfo: androidx.window.embedding.ActivityStack primaryActivityStack
androidx.window.layout.FoldingFeature$OcclusionType: androidx.window.layout.FoldingFeature$OcclusionType$Companion Companion
com.google.android.gms.internal.measurement.zzek: int zzd
com.google.android.gms.internal.measurement.zzgy: int zze
androidx.window.embedding.EmbeddingCompat: androidx.window.embedding.EmbeddingAdapter adapter
id.flutter.flutter_background_service.R$id: int accessibility_custom_action_15
id.flutter.flutter_background_service.R$id: int accessibility_custom_action_21
com.dexterous.flutterlocalnotifications.models.IconSource: com.dexterous.flutterlocalnotifications.models.IconSource FlutterBitmapAsset
com.dexterous.flutterlocalnotifications.models.styles.BigTextStyleInformation: java.lang.Boolean htmlFormatSummaryText
kotlinx.coroutines.CompletedExceptionally: int _handled
androidx.window.embedding.SplitPairFilter: java.lang.String secondaryActivityIntentAction
kotlin.jvm.internal.CallableReference: java.lang.Class owner
androidx.window.layout.FoldingFeature$Orientation: androidx.window.layout.FoldingFeature$Orientation VERTICAL
com.google.android.gms.internal.measurement.zzfb: boolean zzg
com.dexterous.flutterlocalnotifications.models.NotificationDetails: java.lang.String BIG_PICTURE_BITMAP_SOURCE
kotlin.jvm.internal.FunctionReference: int arity
com.google.android.gms.internal.measurement.zzfx: int zzd
id.flutter.flutter_background_service.R$style: int TextAppearance_Compat_Notification_Time
com.google.android.gms.internal.measurement.zzgm: java.lang.String zzf
com.google.android.gms.cloudmessaging.CloudMessage: android.os.Parcelable$Creator CREATOR
id.flutter.flutter_background_service.R$attr: int font
com.google.android.gms.internal.measurement.zzgm: double zzj
com.dexterous.flutterlocalnotifications.models.NotificationDetails: java.lang.String CONVERSATION_TITLE
com.google.android.gms.internal.measurement.zzgd: com.google.android.gms.internal.measurement.zzlg zzT
id.flutter.flutter_background_service.R$styleable: int GradientColor_android_centerY
com.dexterous.flutterlocalnotifications.FlutterLocalNotificationsPlugin: java.lang.String GET_ACTIVE_NOTIFICATIONS_ERROR_CODE
kotlinx.coroutines.android.HandlerContext: kotlinx.coroutines.android.HandlerContext _immediate
id.flutter.flutter_background_service.R$id: int accessibility_custom_action_7
id.flutter.flutter_background_service.R$styleable: int FontFamily_fontProviderQuery
id.flutter.flutter_background_service.R$id: int action_image
com.dexterous.flutterlocalnotifications.models.NotificationDetails: java.lang.String ID
id.flutter.flutter_background_service.R$drawable: int notification_bg
com.google.android.gms.internal.measurement.zzgd: long zzM
io.flutter.embedding.engine.mutatorsstack.FlutterMutatorsStack: java.util.List finalClippingPaths
com.google.android.gms.internal.measurement.zzgd: java.lang.String zzA
com.google.android.gms.internal.measurement.zzei: com.google.android.gms.internal.measurement.zzli zzg
id.flutter.flutter_background_service.R$attr: int alpha
com.dexterous.flutterlocalnotifications.models.IconSource: com.dexterous.flutterlocalnotifications.models.IconSource[] $VALUES
com.dexterous.flutterlocalnotifications.models.NotificationChannelGroupDetails: java.lang.String name
com.dexterous.flutterlocalnotifications.models.NotificationChannelDetails: com.dexterous.flutterlocalnotifications.models.NotificationChannelAction channelAction
io.flutter.plugin.editing.ImeSyncDeferringInsetsCallback: int overlayInsetTypes
com.dexterous.flutterlocalnotifications.models.NotificationDetails: int[] additionalFlags
com.dexterous.flutterlocalnotifications.models.NotificationDetails: java.lang.String VIBRATION_PATTERN
androidx.window.R$attr: int splitMinWidth
com.dexterous.flutterlocalnotifications.RuntimeTypeAdapterFactory: java.lang.String typeFieldName
com.dexterous.flutterlocalnotifications.models.NotificationDetails: java.lang.Integer color
com.dexterous.flutterlocalnotifications.models.NotificationDetails: java.lang.String channelName
id.flutter.flutter_background_service.BackgroundService: java.lang.String TAG
com.google.android.gms.internal.measurement.zzet: boolean zzi
io.flutter.embedding.engine.FlutterJNI: java.lang.String vmServiceUri
com.dexterous.flutterlocalnotifications.FlutterLocalNotificationsPlugin: java.lang.String PAYLOAD
com.dexterous.flutterlocalnotifications.models.NotificationDetails: java.lang.String CHANNEL_DESCRIPTION
com.dexterous.flutterlocalnotifications.models.styles.InboxStyleInformation: java.util.ArrayList lines
io.flutter.embedding.engine.FlutterJNI: float refreshRateFPS
com.dexterous.flutterlocalnotifications.models.NotificationDetails: java.lang.String GROUP_KEY
androidx.window.layout.HardwareFoldingFeature: androidx.window.layout.HardwareFoldingFeature$Type type
com.dexterous.flutterlocalnotifications.models.NotificationDetails: java.lang.String groupKey
com.dexterous.flutterlocalnotifications.models.ScheduledNotificationRepeatFrequency: com.dexterous.flutterlocalnotifications.models.ScheduledNotificationRepeatFrequency Weekly
com.google.android.gms.internal.measurement.zzgt: com.google.android.gms.internal.measurement.zzgt zza
kotlinx.coroutines.DefaultExecutor: java.lang.Thread _thread
com.dexterous.flutterlocalnotifications.models.NotificationDetails: java.lang.Long when
com.dexterous.flutterlocalnotifications.models.NotificationDetails: java.lang.String LED_COLOR_ALPHA
android.support.v4.media.session.PlaybackStateCompat$CustomAction: android.os.Parcelable$Creator CREATOR
com.google.android.gms.internal.measurement.zzgy: boolean zzi
id.flutter.flutter_background_service.R$drawable: int notification_action_background
id.flutter.flutter_background_service.R$styleable: int FontFamilyFont_fontVariationSettings
id.flutter.flutter_background_service.R$id: int accessibility_custom_action_25
androidx.window.layout.SidecarWindowBackend: java.util.concurrent.locks.ReentrantLock globalLock
kotlin.coroutines.jvm.internal.ContinuationImpl: kotlin.coroutines.Continuation intercepted
androidx.window.core.Bounds: int right
com.google.android.gms.internal.measurement.zzgd: java.lang.String zzo
androidx.window.layout.SidecarCompat$DistinctSidecarElementCallback: java.util.concurrent.locks.ReentrantLock lock
com.dexterous.flutterlocalnotifications.models.NotificationDetails: java.lang.String SHOW_WHEN
androidx.window.embedding.ExtensionEmbeddingBackend$SplitListenerWrapper: java.util.List lastValue
com.google.android.gms.internal.measurement.zzgy: java.lang.String zzh
id.flutter.flutter_background_service.R$styleable: int SplitPairRule_splitMinSmallestWidth
com.google.android.gms.internal.measurement.zzgd: java.lang.String zzr
com.dexterous.flutterlocalnotifications.FlutterLocalNotificationsPlugin: java.lang.String GET_ACTIVE_NOTIFICATIONS_METHOD
androidx.window.layout.WindowMetricsCalculator$Companion$decorator$1: androidx.window.layout.WindowMetricsCalculator$Companion$decorator$1 INSTANCE
com.dexterous.flutterlocalnotifications.models.NotificationDetails: java.lang.Long timeoutAfter
kotlinx.coroutines.scheduling.CoroutineScheduler$Worker: int workerCtl
androidx.window.layout.SidecarCompat$DistinctSidecarElementCallback: java.util.WeakHashMap mActivityWindowLayoutInfo
io.flutter.plugin.platform.SingleViewPresentation: android.widget.FrameLayout container
com.google.android.gms.common.internal.GetServiceRequest: android.os.Parcelable$Creator CREATOR
androidx.window.layout.SidecarCompat: androidx.window.layout.SidecarAdapter sidecarAdapter
com.dexterous.flutterlocalnotifications.models.styles.BigPictureStyleInformation: java.lang.Boolean htmlFormatSummaryText
com.google.android.gms.internal.measurement.zzgd: int zzK
com.dexterous.flutterlocalnotifications.models.NotificationDetails: java.lang.String DATA_MIME_TYPE
id.flutter.flutter_background_service.R$id: int title
id.flutter.flutter_background_service.R$id: int accessibility_custom_action_5
com.google.android.gms.internal.measurement.zzey: int zzd
com.google.android.gms.internal.measurement.zzfv: int zzd
androidx.window.layout.ExtensionWindowLayoutInfoBackend: androidx.window.extensions.layout.WindowLayoutComponent component
com.google.android.gms.internal.measurement.zzgr: int zzd
id.flutter.flutter_background_service.R$id: int tag_on_apply_window_listener
androidx.window.layout.WindowInfoTrackerImpl: androidx.window.layout.WindowBackend windowBackend
com.google.android.gms.auth.api.signin.GoogleSignInAccount: android.os.Parcelable$Creator CREATOR
androidx.lifecycle.Lifecycle$Event: androidx.lifecycle.Lifecycle$Event ON_STOP
id.flutter.flutter_background_service.R$dimen: int notification_top_pad
io.flutter.embedding.engine.FlutterJNI: io.flutter.embedding.engine.FlutterJNI$AccessibilityDelegate accessibilityDelegate
com.dexterous.flutterlocalnotifications.models.NotificationDetails: java.lang.String shortcutId
id.flutter.flutter_background_service.FlutterBackgroundServicePlugin: id.flutter.flutter_background_service.Pipe servicePipe
com.dexterous.flutterlocalnotifications.models.IconSource: com.dexterous.flutterlocalnotifications.models.IconSource ContentUri
com.dexterous.flutterlocalnotifications.models.NotificationChannelDetails: java.lang.Boolean enableVibration
id.flutter.flutter_background_service.R$id: int accessibility_custom_action_29
id.flutter.flutter_background_service.BuildConfig: boolean DEBUG
com.dexterous.flutterlocalnotifications.models.NotificationDetails: java.lang.String channelId
io.flutter.embedding.engine.renderer.SurfaceTextureWrapper: boolean attached
id.flutter.flutter_background_service.R$styleable: int FontFamily_fontProviderFetchTimeout
com.google.android.gms.internal.measurement.zzgd: com.google.android.gms.internal.measurement.zzli zzi
com.google.android.gms.internal.measurement.zzgd: int zzs
id.flutter.flutter_background_service.R$drawable: int notification_bg_low_pressed
com.dexterous.flutterlocalnotifications.models.styles.BigPictureStyleInformation: java.lang.String summaryText
com.google.android.gms.internal.measurement.zzfb: int zzd
com.dexterous.flutterlocalnotifications.models.NotificationDetails: java.lang.Boolean allowWhileIdle
id.flutter.flutter_background_service.BackgroundService$2: org.json.JSONObject val$arg
androidx.window.embedding.SplitRule: int minWidth
com.google.android.gms.internal.measurement.zzfz: int zzd
com.google.android.gms.common.internal.TelemetryData: android.os.Parcelable$Creator CREATOR
androidx.window.core.Version: androidx.window.core.Version$Companion Companion
androidx.window.embedding.SplitPairRule: boolean finishPrimaryWithSecondary
io.flutter.plugin.editing.ImeSyncDeferringInsetsCallback$AnimationCallback: io.flutter.plugin.editing.ImeSyncDeferringInsetsCallback this$0
com.dexterous.flutterlocalnotifications.models.NotificationDetails: com.dexterous.flutterlocalnotifications.models.styles.StyleInformation styleInformation
com.google.android.gms.common.internal.zat: android.os.Parcelable$Creator CREATOR
com.dexterous.flutterlocalnotifications.models.NotificationDetails: java.lang.Boolean showWhen
id.flutter.flutter_background_service.R$id: int accessibility_custom_action_16
androidx.window.R$attr: int placeholderActivityName
com.dexterous.flutterlocalnotifications.FlutterLocalNotificationsPlugin: java.lang.String CANCEL_METHOD
id.flutter.flutter_background_service.R$dimen: int notification_large_icon_height
com.dexterous.flutterlocalnotifications.models.styles.InboxStyleInformation: java.lang.Boolean htmlFormatContentTitle
com.google.android.gms.internal.measurement.zzei: int zze
com.google.android.gms.internal.measurement.zzfn: java.lang.String zzi
androidx.window.embedding.SplitPairRule: boolean finishSecondaryWithPrimary
kotlinx.coroutines.JobSupport: java.lang.Object _state
com.google.android.gms.internal.measurement.zzei: com.google.android.gms.internal.measurement.zzei zza
io.flutter.plugin.platform.SingleViewPresentation: android.view.View$OnFocusChangeListener focusChangeListener
com.dexterous.flutterlocalnotifications.models.NotificationDetails: java.lang.String HTML_FORMAT_SUMMARY_TEXT
id.flutter.flutter_background_service.R$styleable: int[] FontFamilyFont
androidx.window.R$styleable: int[] SplitPlaceholderRule
androidx.window.layout.SidecarCompat$DistinctSidecarElementCallback: androidx.window.layout.SidecarAdapter sidecarAdapter
com.dexterous.flutterlocalnotifications.models.NotificationDetails: com.dexterous.flutterlocalnotifications.BitmapSource largeIconBitmapSource
com.google.android.gms.internal.measurement.zzet: com.google.android.gms.internal.measurement.zzet zza
androidx.window.embedding.SplitRule: int layoutDirection
id.flutter.flutter_background_service.FlutterBackgroundServicePlugin: android.content.Context context
kotlin.jvm.internal.CallableReference: java.lang.String signature
id.flutter.flutter_background_service.R$attr: int fontStyle
id.flutter.flutter_background_service.R$attr: int finishSecondaryWithPrimary
id.flutter.flutter_background_service.FlutterBackgroundServicePlugin: java.util.Map eventSinks
com.dexterous.flutterlocalnotifications.models.NotificationDetails: java.lang.String HTML_FORMAT_TITLE
androidx.window.layout.ExtensionWindowLayoutInfoBackend$MulticastConsumer: android.app.Activity activity
com.dexterous.flutterlocalnotifications.models.NotificationDetails: java.lang.String LARGE_ICON
com.google.android.gms.internal.measurement.zzey: com.google.android.gms.internal.measurement.zzey zza
com.dexterous.flutterlocalnotifications.FlutterLocalNotificationsPlugin: java.lang.String CANCEL_TAG
androidx.window.layout.HardwareFoldingFeature$Type: java.lang.String description
kotlinx.coroutines.scheduling.CoroutineScheduler$Worker: java.lang.Object nextParkedWorker
id.flutter.flutter_background_service.R$id: int accessibility_custom_action_12
com.dexterous.flutterlocalnotifications.models.NotificationDetails: java.lang.String PAYLOAD
kotlinx.coroutines.scheduling.WorkQueue: int blockingTasksInBuffer
id.flutter.flutter_background_service.R$string: int status_bar_notification_info_overflow
com.dexterous.flutterlocalnotifications.models.NotificationDetails: java.lang.String GROUP_ALERT_BEHAVIOR
id.flutter.flutter_background_service.R$attr: int splitMinSmallestWidth
androidx.window.embedding.MatcherUtils: androidx.window.embedding.MatcherUtils INSTANCE
io.flutter.embedding.engine.FlutterJNI: io.flutter.embedding.engine.FlutterJNI$AsyncWaitForVsyncDelegate asyncWaitForVsyncDelegate
com.google.android.gms.internal.measurement.zzgd: long zzN
com.google.android.gms.internal.measurement.zzfp: com.google.android.gms.internal.measurement.zzfp zza
androidx.window.core.Version: androidx.window.core.Version CURRENT
com.dexterous.flutterlocalnotifications.models.NotificationDetails: java.lang.String TEXT
id.flutter.flutter_background_service.R$dimen: int compat_notification_large_icon_max_height
com.dexterous.flutterlocalnotifications.models.NotificationDetails: java.lang.String LED_COLOR_GREEN
com.google.firebase.datatransport.TransportRegistrar: java.lang.String LIBRARY_NAME
io.flutter.embedding.engine.FlutterJNI: java.lang.Long nativeShellHolderId
androidx.window.core.Bounds: int top
com.dexterous.flutterlocalnotifications.models.NotificationChannelDetails: java.lang.String SOUND_SOURCE
androidx.lifecycle.Lifecycle$Event: androidx.lifecycle.Lifecycle$Event[] $VALUES
androidx.window.layout.WindowInfoTrackerImpl: int BUFFER_CAPACITY
com.dexterous.flutterlocalnotifications.FlutterLocalNotificationsPlugin: java.lang.String NOTIFICATION_DETAILS
com.google.android.gms.internal.measurement.zzlb: java.util.Map zza
id.flutter.flutter_background_service.R$id: int action_container
com.dexterous.flutterlocalnotifications.models.NotificationDetails: java.lang.Long millisecondsSinceEpoch
com.dexterous.flutterlocalnotifications.models.NotificationDetails: java.lang.Integer progress
com.google.android.gms.internal.measurement.zzgd: java.lang.String zzL
com.google.android.gms.internal.measurement.zzgm: long zze
kotlinx.coroutines.scheduling.WorkQueue: int producerIndex
id.flutter.flutter_background_service.R$styleable: int FontFamilyFont_fontStyle
androidx.versionedparcelable.ParcelImpl: android.os.Parcelable$Creator CREATOR
androidx.window.embedding.ExtensionEmbeddingBackend$EmbeddingCallbackImpl: java.util.List lastInfo
id.flutter.flutter_background_service.R$dimen: int compat_control_corner_material
com.dexterous.flutterlocalnotifications.models.NotificationDetails: java.lang.String LARGE_ICON_BITMAP_SOURCE
com.google.android.gms.internal.measurement.zzfx: java.lang.String zzf
androidx.concurrent.futures.AbstractResolvableFuture: androidx.concurrent.futures.AbstractResolvableFuture$Listener listeners
androidx.window.core.Version: int patch
io.flutter.embedding.engine.mutatorsstack.FlutterMutatorsStack: java.util.List mutators
com.dexterous.flutterlocalnotifications.models.styles.MessagingStyleInformation: java.util.ArrayList messages
id.flutter.flutter_background_service.R$id: int accessibility_custom_action_22
id.flutter.flutter_background_service.R$attr: int finishPrimaryWithSecondary
androidx.window.R$styleable: int SplitPlaceholderRule_splitMinSmallestWidth
androidx.window.layout.SidecarCompat$registerConfigurationChangeListener$configChangeObserver$1: androidx.window.layout.SidecarCompat this$0
com.google.android.gms.measurement.AppMeasurement$ConditionalUserProperty: android.os.Bundle mTriggeredEventParams
com.google.android.gms.internal.measurement.zzfp: int zzd
id.flutter.flutter_background_service.R$attr: int fontProviderFetchStrategy
androidx.window.layout.SidecarCompat: java.lang.String TAG
com.google.android.gms.internal.measurement.zzgr: com.google.android.gms.internal.measurement.zzgr zza
com.dexterous.flutterlocalnotifications.models.NotificationDetails: java.lang.String body
id.flutter.flutter_background_service.R$dimen: int notification_media_narrow_margin
id.flutter.flutter_background_service.R$styleable: int SplitPairRule_splitRatio
androidx.window.layout.FoldingFeature$State: java.lang.String description
androidx.window.layout.SidecarWindowBackend$WindowLayoutChangeCallbackWrapper: androidx.window.layout.WindowLayoutInfo lastInfo
androidx.lifecycle.Lifecycle$Event: androidx.lifecycle.Lifecycle$Event ON_CREATE
com.google.android.gms.measurement.AppMeasurement$ConditionalUserProperty: java.lang.String mExpiredEventName
com.google.android.gms.internal.measurement.zzfh: int zzd
id.flutter.flutter_background_service.R$styleable: int FontFamily_fontProviderFetchStrategy
com.dexterous.flutterlocalnotifications.models.NotificationDetails: java.lang.String SHOW_PROGRESS
com.dexterous.flutterlocalnotifications.models.NotificationDetails: java.lang.String CHANNEL_SHOW_BADGE
androidx.window.R$styleable: int SplitPairFilter_secondaryActivityName
com.dexterous.flutterlocalnotifications.FlutterLocalNotificationsPlugin: java.lang.String INVALID_DRAWABLE_RESOURCE_ERROR_MESSAGE
io.flutter.view.FlutterCallbackInformation: java.lang.String callbackName
com.dexterous.flutterlocalnotifications.models.IconSource: com.dexterous.flutterlocalnotifications.models.IconSource DrawableResource
com.dexterous.flutterlocalnotifications.models.NotificationDetails: java.lang.String tag
id.flutter.flutter_background_service.R$styleable: int SplitPairRule_finishSecondaryWithPrimary
androidx.window.core.Version: androidx.window.core.Version VERSION_0_1
id.flutter.flutter_background_service.R$id: int text2
androidx.window.R$attr: int splitLayoutDirection
id.flutter.flutter_background_service.R$drawable: int notification_bg_normal_pressed
com.google.android.gms.internal.measurement.zzfx: float zzh
android.support.v4.media.MediaBrowserCompat$MediaItem: android.os.Parcelable$Creator CREATOR
androidx.window.embedding.ActivityStack: java.util.List activities
com.google.android.gms.internal.measurement.zzet: com.google.android.gms.internal.measurement.zzem zzg
androidx.window.layout.SidecarWindowBackend$WindowLayoutChangeCallbackWrapper: java.util.concurrent.Executor executor
id.flutter.flutter_background_service.R$id: int tag_on_receive_content_listener
com.google.android.gms.measurement.AppMeasurement$ConditionalUserProperty: long mTriggeredTimestamp
com.google.firebase.installations.FirebaseInstallationsRegistrar: java.lang.String LIBRARY_NAME
com.dexterous.flutterlocalnotifications.models.NotificationDetails: com.dexterous.flutterlocalnotifications.models.NotificationChannelAction channelAction
com.dexterous.flutterlocalnotifications.models.NotificationDetails: java.lang.String IMPORTANT
com.dexterous.flutterlocalnotifications.FlutterLocalNotificationsPlugin: com.google.gson.Gson gson
com.dexterous.flutterlocalnotifications.SoundSource: com.dexterous.flutterlocalnotifications.SoundSource Uri
com.google.android.gms.internal.measurement.zzff: com.google.android.gms.internal.measurement.zzli zzm
com.dexterous.flutterlocalnotifications.FlutterLocalNotificationsPlugin: java.lang.String PENDING_NOTIFICATION_REQUESTS_METHOD
com.dexterous.flutterlocalnotifications.models.NotificationChannelGroupDetails: java.lang.String DESCRIPTION
com.dexterous.flutterlocalnotifications.models.NotificationChannelGroupDetails: java.lang.String id
com.dexterous.flutterlocalnotifications.models.NotificationDetails: java.lang.String subText
com.dexterous.flutterlocalnotifications.models.PersonDetails: java.lang.String icon
com.google.android.gms.internal.measurement.zzgd: java.lang.String zzu
id.flutter.flutter_background_service.R$color: int notification_icon_bg_color
id.flutter.flutter_background_service.R$attr: int fontProviderQuery
com.google.android.gms.internal.measurement.zzft: int zzi
com.google.android.gms.internal.measurement.zzet: java.lang.String zzf
androidx.window.layout.DisplayCompatHelperApi17: androidx.window.layout.DisplayCompatHelperApi17 INSTANCE
com.dexterous.flutterlocalnotifications.FlutterLocalNotificationsPlugin: java.lang.String DEFAULT_ICON
androidx.window.layout.WindowInfoTrackerImpl$windowLayoutInfo$1: java.lang.Object L$2
com.dexterous.flutterlocalnotifications.FlutterLocalNotificationsPlugin: java.lang.String NOTIFICATION_LAUNCHED_APP
io.flutter.embedding.engine.renderer.SurfaceTextureWrapper: java.lang.Runnable onFrameConsumed
androidx.window.embedding.ExtensionEmbeddingBackend$SplitListenerWrapper: android.app.Activity activity
androidx.window.layout.SidecarCompat$DistinctSidecarElementCallback: androidx.window.sidecar.SidecarInterface$SidecarCallback callbackInterface
com.google.android.gms.internal.measurement.zzff: java.lang.String zzk
androidx.window.layout.ExtensionWindowLayoutInfoBackend$MulticastConsumer: androidx.window.layout.WindowLayoutInfo lastKnownValue
com.dexterous.flutterlocalnotifications.FlutterLocalNotificationsPlugin: java.lang.String GET_NOTIFICATION_CHANNELS_ERROR_CODE
androidx.window.layout.WindowMetricsCalculator$Companion: kotlin.jvm.functions.Function1 decorator
com.dexterous.flutterlocalnotifications.models.styles.BigTextStyleInformation: java.lang.Boolean htmlFormatBigText
kotlinx.coroutines.internal.ThreadSafeHeap: int _size
io.flutter.plugin.editing.ImeSyncDeferringInsetsCallback: io.flutter.plugin.editing.ImeSyncDeferringInsetsCallback$AnimationCallback animationCallback
com.google.android.gms.internal.measurement.zzfp: com.google.android.gms.internal.measurement.zzgi zzg
com.google.android.gms.internal.measurement.zzff: int zzd
androidx.window.embedding.MatcherUtils: boolean sDebugMatchers
com.dexterous.flutterlocalnotifications.models.NotificationDetails: java.lang.String ticker
com.google.android.gms.internal.measurement.zzgd: java.lang.String zzW
com.google.android.gms.internal.measurement.zzgd: int zzI
id.flutter.flutter_background_service.R$id: int tag_transition_group
com.google.android.gms.measurement.AppMeasurement$ConditionalUserProperty: java.lang.Object mValue
com.google.android.gms.internal.measurement.zzfd: com.google.android.gms.internal.measurement.zzfd zza
kotlinx.coroutines.internal.ResizableAtomicArray: java.util.concurrent.atomic.AtomicReferenceArray array
com.dexterous.flutterlocalnotifications.models.NotificationChannelDetails: java.lang.String id
androidx.window.R$styleable: int SplitPlaceholderRule_splitMinWidth
com.dexterous.flutterlocalnotifications.models.PersonDetails: java.lang.Boolean important
com.google.android.gms.internal.measurement.zzgd: boolean zzz
com.google.android.gms.internal.measurement.zzey: int zze
com.dexterous.flutterlocalnotifications.models.PersonDetails: com.dexterous.flutterlocalnotifications.models.IconSource iconBitmapSource
kotlinx.coroutines.InvokeOnCancelling: int _invoked
com.dexterous.flutterlocalnotifications.models.NotificationDetails: java.lang.String STYLE_INFORMATION
com.dexterous.flutterlocalnotifications.RuntimeTypeAdapterFactory: java.lang.Class baseType
com.google.android.gms.internal.measurement.zzer: int zze
com.dexterous.flutterlocalnotifications.RepeatInterval: com.dexterous.flutterlocalnotifications.RepeatInterval Weekly
id.flutter.flutter_background_service.R$id: int icon_group
androidx.window.java.layout.WindowInfoTrackerCallbackAdapter: java.util.Map consumerToJobMap
com.dexterous.flutterlocalnotifications.models.DateTimeComponents: com.dexterous.flutterlocalnotifications.models.DateTimeComponents DayOfWeekAndTime
androidx.window.layout.HardwareFoldingFeature: androidx.window.core.Bounds featureBounds
id.flutter.flutter_background_service.BackgroundService: io.flutter.plugin.common.MethodChannel methodChannel
id.flutter.flutter_background_service.FlutterBackgroundServicePlugin$2: id.flutter.flutter_background_service.FlutterBackgroundServicePlugin this$0
com.dexterous.flutterlocalnotifications.FlutterLocalNotificationsPlugin: java.lang.String INVALID_LED_DETAILS_ERROR_MESSAGE
com.google.android.gms.internal.measurement.zzgd: long zzm
com.google.android.gms.internal.measurement.zzgd: int zzQ
com.dexterous.flutterlocalnotifications.models.NotificationDetails: java.lang.Integer day
id.flutter.flutter_background_service.R$layout: int notification_action_tombstone
com.dexterous.flutterlocalnotifications.models.NotificationChannelDetails: java.lang.String PLAY_SOUND
id.flutter.flutter_background_service.R$styleable: int GradientColor_android_startY
androidx.window.embedding.SplitController: androidx.window.embedding.SplitController$Companion Companion
id.flutter.flutter_background_service.R$id: int accessibility_custom_action_14
id.flutter.flutter_background_service.R$styleable: int[] SplitPairRule
androidx.window.layout.WindowMetricsCalculatorCompat: java.lang.String TAG
kotlin.jvm.internal.CallableReference: kotlin.reflect.KCallable reflected
com.google.android.gms.internal.measurement.zzff: com.google.android.gms.internal.measurement.zzli zzj
androidx.fragment.app.FragmentManagerState: android.os.Parcelable$Creator CREATOR
com.google.android.gms.internal.measurement.zzfz: java.lang.String zze
com.dexterous.flutterlocalnotifications.models.NotificationDetails: java.lang.String REPEAT_INTERVAL
com.google.android.gms.common.ConnectionResult: android.os.Parcelable$Creator CREATOR
com.dexterous.flutterlocalnotifications.FlutterLocalNotificationsPlugin: java.lang.String GET_ACTIVE_NOTIFICATIONS_ERROR_MESSAGE
io.flutter.embedding.engine.mutatorsstack.FlutterMutatorsStack: android.graphics.Matrix finalMatrix
com.dexterous.flutterlocalnotifications.models.NotificationChannelDetails: java.lang.String ENABLE_LIGHTS
com.google.android.gms.internal.measurement.zzgm: long zzh
com.dexterous.flutterlocalnotifications.models.NotificationDetails: java.lang.String MAX_PROGRESS
com.dexterous.flutterlocalnotifications.FlutterLocalNotificationsPlugin: java.lang.String INVALID_LED_DETAILS_ERROR_CODE
com.dexterous.flutterlocalnotifications.FlutterLocalNotificationsPlugin: java.lang.String INVALID_RAW_RESOURCE_ERROR_MESSAGE
com.dexterous.flutterlocalnotifications.models.NotificationDetails: java.lang.String TIMESTAMP
kotlin.jvm.internal.Lambda: int arity
com.dexterous.flutterlocalnotifications.models.NotificationDetails: java.lang.String ICON_SOURCE
com.google.android.gms.internal.measurement.zzgd: java.lang.String zzv
com.google.android.gms.internal.measurement.zzer: boolean zzf
id.flutter.flutter_background_service.R$id: int tag_window_insets_animation_callback
com.dexterous.flutterlocalnotifications.models.NotificationChannelDetails: java.lang.String VIBRATION_PATTERN
com.dexterous.flutterlocalnotifications.models.NotificationDetails: java.lang.Boolean enableVibration
com.google.android.gms.measurement.AppMeasurement$ConditionalUserProperty: android.os.Bundle mTimedOutEventParams
com.google.android.gms.internal.measurement.zzlb: com.google.android.gms.internal.measurement.zznl zzc
kotlin.coroutines.jvm.internal.ContinuationImpl: kotlin.coroutines.CoroutineContext _context
androidx.window.R$styleable: int SplitPairRule_splitRatio
androidx.window.embedding.ActivityRule: boolean alwaysExpand
id.flutter.flutter_background_service.R$id: int accessibility_action_clickable_span
id.flutter.flutter_background_service.R$dimen: int notification_subtext_size
com.dexterous.flutterlocalnotifications.models.NotificationDetails: java.lang.String PROGRESS
com.dexterous.flutterlocalnotifications.RepeatInterval: com.dexterous.flutterlocalnotifications.RepeatInterval EveryMinute
com.google.android.gms.internal.measurement.zzek: com.google.android.gms.internal.measurement.zzer zzi
com.google.firebase.messaging.FirebaseMessagingRegistrar: java.lang.String LIBRARY_NAME
com.google.android.gms.internal.measurement.zzgd: long zzU
com.google.android.gms.internal.measurement.zzgk: com.google.android.gms.internal.measurement.zzlh zzf
androidx.window.layout.WindowInfoTrackerImpl$windowLayoutInfo$1: androidx.window.layout.WindowInfoTrackerImpl this$0
id.flutter.flutter_background_service.R$drawable: int notification_bg_low_normal
com.dexterous.flutterlocalnotifications.models.NotificationDetails: java.lang.String COLOR_ALPHA
id.flutter.flutter_background_service.R$attr: int splitRatio
id.flutter.flutter_background_service.FlutterBackgroundServicePlugin: io.flutter.plugin.common.EventChannel eventChannel
id.flutter.flutter_background_service.R$id: int italic
id.flutter.flutter_background_service.R$styleable: int ColorStateListItem_android_color
androidx.window.layout.WindowInfoTrackerImpl$windowLayoutInfo$1: int label
com.google.android.gms.internal.measurement.zzgd: long zzw
com.google.android.gms.internal.measurement.zzfr: com.google.android.gms.internal.measurement.zzfr zza
com.google.android.gms.measurement.internal.zzlk: android.os.Parcelable$Creator CREATOR
androidx.window.embedding.SplitInfo: androidx.window.embedding.ActivityStack secondaryActivityStack
com.dexterous.flutterlocalnotifications.models.NotificationDetails: java.lang.String TITLE
id.flutter.flutter_background_service.BackgroundService: android.os.Handler mainHandler
com.google.android.gms.internal.measurement.zzey: boolean zzg
com.google.android.gms.measurement.AppMeasurement$ConditionalUserProperty: java.lang.String mOrigin
com.dexterous.flutterlocalnotifications.FlutterLocalNotificationsPlugin: java.lang.String INVALID_LARGE_ICON_ERROR_CODE
com.dexterous.flutterlocalnotifications.models.styles.BigPictureStyleInformation: java.lang.String bigPicture
id.flutter.flutter_background_service.R$id: int tag_accessibility_clickable_spans
io.flutter.plugin.editing.ImeSyncDeferringInsetsCallback: android.view.WindowInsets lastWindowInsets
id.flutter.flutter_background_service.R$id: int accessibility_custom_action_28
com.google.android.gms.internal.measurement.zzff: int zzg
id.flutter.flutter_background_service.R$attr: int activityName
id.flutter.flutter_background_service.R$id: int accessibility_custom_action_1
com.dexterous.flutterlocalnotifications.models.NotificationChannelDetails: java.lang.String LED_COLOR_BLUE
androidx.window.java.layout.WindowInfoTrackerCallbackAdapter: java.util.concurrent.locks.ReentrantLock lock
com.google.android.gms.internal.measurement.zzff: com.google.android.gms.internal.measurement.zzff zza
com.google.android.gms.internal.measurement.zzet: boolean zzj
id.flutter.flutter_background_service.R$drawable: int notification_template_icon_bg
com.google.android.gms.internal.measurement.zzff: java.lang.String zzq
id.flutter.flutter_background_service.Config: android.content.SharedPreferences pref
com.google.android.gms.internal.measurement.zzfn: java.lang.String zzh
com.google.android.gms.internal.measurement.zzgd: com.google.android.gms.internal.measurement.zzli zzG
androidx.window.layout.WindowInfoTrackerImpl$windowLayoutInfo$1: android.app.Activity $activity
id.flutter.flutter_background_service.R$styleable: int FontFamilyFont_fontWeight
id.flutter.flutter_background_service.R$attr: int fontVariationSettings
com.dexterous.flutterlocalnotifications.FlutterLocalNotificationsPlugin: java.lang.String DELETE_NOTIFICATION_CHANNEL_METHOD
id.flutter.flutter_background_service.R$attr: int fontProviderFetchTimeout
com.dexterous.flutterlocalnotifications.FlutterLocalNotificationsPlugin: java.lang.String INITIALIZE_METHOD
io.flutter.embedding.engine.FlutterJNI: io.flutter.embedding.engine.deferredcomponents.DeferredComponentManager deferredComponentManager
androidx.window.layout.SidecarCompat: androidx.window.layout.SidecarCompat$Companion Companion
androidx.window.R$styleable: int SplitPairRule_finishSecondaryWithPrimary
id.flutter.flutter_background_service.R$id: int dialog_button
com.google.android.gms.internal.measurement.zzgd: long zzx
androidx.window.layout.SidecarWindowBackend$WindowLayoutChangeCallbackWrapper: androidx.core.util.Consumer callback
com.google.android.gms.internal.measurement.zzgd: java.lang.String zzaa
com.dexterous.flutterlocalnotifications.NotificationStyle: com.dexterous.flutterlocalnotifications.NotificationStyle Default
id.flutter.flutter_background_service.R$id: int accessibility_custom_action_9
com.dexterous.flutterlocalnotifications.models.DateTimeComponents: com.dexterous.flutterlocalnotifications.models.DateTimeComponents Time
com.dexterous.flutterlocalnotifications.models.NotificationDetails: java.lang.String SUMMARY_TEXT
com.dexterous.flutterlocalnotifications.models.NotificationDetails: java.lang.String COLOR_GREEN
com.dexterous.flutterlocalnotifications.models.Time: java.lang.String HOUR
androidx.lifecycle.Lifecycle$Event: androidx.lifecycle.Lifecycle$Event ON_DESTROY
com.google.android.gms.measurement.AppMeasurement$ConditionalUserProperty: java.lang.String mTriggerEventName
androidx.window.java.layout.WindowInfoTrackerCallbackAdapter: androidx.window.layout.WindowInfoTracker tracker
androidx.window.layout.HardwareFoldingFeature: androidx.window.layout.HardwareFoldingFeature$Companion Companion
com.dexterous.flutterlocalnotifications.FlutterLocalNotificationsPlugin: java.lang.String DRAWABLE
androidx.window.layout.SidecarWindowBackend: java.lang.String TAG
id.flutter.flutter_background_service.BuildConfig: java.lang.String BUILD_TYPE
id.flutter.flutter_background_service.R$styleable: int ColorStateListItem_alpha
androidx.window.R$styleable: int SplitPairRule_clearTop
com.dexterous.flutterlocalnotifications.models.NotificationChannelDetails: java.lang.Boolean playSound
id.flutter.flutter_background_service.R$styleable: int GradientColor_android_type
com.dexterous.flutterlocalnotifications.models.NotificationDetails: java.lang.Boolean ongoing
id.flutter.flutter_background_service.R$drawable: int notification_template_icon_low_bg
com.google.android.gms.internal.measurement.zzgd: com.google.android.gms.internal.measurement.zzli zzh
id.flutter.flutter_background_service.R$styleable: int FontFamilyFont_android_font
id.flutter.flutter_background_service.R$styleable: int FontFamilyFont_ttcIndex
androidx.window.embedding.EmbeddingCompat: androidx.window.extensions.embedding.ActivityEmbeddingComponent embeddingExtension
id.flutter.flutter_background_service.R$id: int notification_background
androidx.window.R$attr: int clearTop
com.dexterous.flutterlocalnotifications.models.NotificationDetails: java.lang.Boolean showProgress
com.google.android.gms.internal.measurement.zzcl: android.os.Parcelable$Creator CREATOR
kotlinx.coroutines.EventLoopImplBase: java.lang.Object _delayed
com.google.android.gms.internal.measurement.zzft: com.google.android.gms.internal.measurement.zzft zza
com.google.android.gms.internal.measurement.zzfv: java.lang.String zze
kotlinx.coroutines.internal.LimitedDispatcher: int runningWorkers
io.flutter.view.AccessibilityViewEmbedder: int nextFlutterId
id.flutter.flutter_background_service.R$styleable: int FontFamilyFont_android_fontVariationSettings
androidx.window.embedding.ExtensionEmbeddingBackend$EmbeddingCallbackImpl: androidx.window.embedding.ExtensionEmbeddingBackend this$0
androidx.window.embedding.ExtensionEmbeddingBackend: androidx.window.embedding.ExtensionEmbeddingBackend$EmbeddingCallbackImpl splitInfoEmbeddingCallback
androidx.window.R$attr: int finishSecondaryWithPrimary
com.dexterous.flutterlocalnotifications.models.styles.BigTextStyleInformation: java.lang.Boolean htmlFormatContentTitle
id.flutter.flutter_background_service.R$styleable: int GradientColor_android_startX
id.flutter.flutter_background_service.FlutterBackgroundServicePlugin$2: org.json.JSONObject val$arg
id.flutter.flutter_background_service.R$drawable: int notification_bg_normal
com.google.android.gms.internal.measurement.zzfr: int zze
com.google.android.gms.internal.measurement.zzgd: int zzY
androidx.window.R$styleable: int ActivityFilter_activityAction
com.dexterous.flutterlocalnotifications.models.NotificationChannelDetails: java.lang.Integer ledColor
androidx.fragment.app.BackStackState: android.os.Parcelable$Creator CREATOR
com.dexterous.flutterlocalnotifications.models.NotificationDetails: java.lang.String BIG_PICTURE
androidx.window.java.layout.WindowInfoTrackerCallbackAdapter$addListener$1$1: int label
io.flutter.embedding.engine.plugins.lifecycle.HiddenLifecycleReference: androidx.lifecycle.Lifecycle lifecycle
id.flutter.flutter_background_service.BackgroundService: io.flutter.embedding.engine.FlutterEngine backgroundEngine
kotlinx.coroutines.channels.ArrayChannel: int size
kotlinx.coroutines.CancelledContinuation: int _resumed
id.flutter.flutter_background_service.BackgroundService: boolean isManuallyStopped
id.flutter.flutter_background_service.R$layout: int notification_template_part_time
androidx.window.layout.SidecarWindowBackend$ExtensionListenerImpl: androidx.window.layout.SidecarWindowBackend this$0
androidx.window.core.Version$bigInteger$2: androidx.window.core.Version this$0
com.dexterous.flutterlocalnotifications.models.NotificationChannelDetails: java.lang.String sound
com.dexterous.flutterlocalnotifications.models.NotificationDetails: java.lang.Boolean autoCancel
androidx.window.R$styleable: int SplitPairRule_splitLayoutDirection
kotlinx.coroutines.scheduling.WorkQueue: java.lang.Object lastScheduledTask
kotlinx.coroutines.android.HandlerDispatcherKt: android.view.Choreographer choreographer
com.dexterous.flutterlocalnotifications.models.NotificationDetails: java.lang.String PLAY_SOUND
com.google.android.gms.internal.measurement.zzek: com.google.android.gms.internal.measurement.zzek zza
androidx.window.layout.ExtensionsWindowLayoutInfoAdapter: androidx.window.layout.ExtensionsWindowLayoutInfoAdapter INSTANCE
io.flutter.embedding.engine.FlutterJNI: java.util.concurrent.locks.ReentrantReadWriteLock shellHolderLock
id.flutter.flutter_background_service.R$drawable: int notification_tile_bg
com.dexterous.flutterlocalnotifications.NotificationStyle: com.dexterous.flutterlocalnotifications.NotificationStyle BigText
androidx.lifecycle.Lifecycle$Event: androidx.lifecycle.Lifecycle$Event ON_PAUSE
id.flutter.flutter_background_service.R$styleable: int SplitPairRule_splitLayoutDirection
androidx.window.layout.ExtensionWindowLayoutInfoBackend: java.util.Map listenerToActivity
id.flutter.flutter_background_service.FlutterBackgroundServicePlugin: id.flutter.flutter_background_service.Pipe mainPipe
androidx.window.layout.SidecarCompat$registerConfigurationChangeListener$configChangeObserver$1: android.app.Activity $activity
com.google.android.gms.internal.measurement.zzgm: float zzi
id.flutter.flutter_background_service.R$styleable: int GradientColorItem_android_color
com.google.android.gms.internal.measurement.zzgd: long zzn
id.flutter.flutter_background_service.R$id: int line1
androidx.window.embedding.ExtensionEmbeddingBackend$SplitListenerWrapper: java.util.concurrent.Executor executor
id.flutter.flutter_background_service.R$id: int tag_accessibility_heading
com.dexterous.flutterlocalnotifications.models.NotificationDetails: java.lang.Integer ledOffMs
androidx.window.embedding.SplitPairRule: java.util.Set filters
com.google.android.gms.internal.measurement.zzem: com.google.android.gms.internal.measurement.zzem zza
com.dexterous.flutterlocalnotifications.FlutterLocalNotificationsPlugin: java.lang.String CANCEL_ID
io.flutter.embedding.engine.FlutterOverlaySurface: android.view.Surface surface
androidx.window.R$styleable: int SplitPlaceholderRule_placeholderActivityName
com.dexterous.flutterlocalnotifications.models.NotificationDetails: java.lang.String scheduledDateTime
com.dexterous.flutterlocalnotifications.models.NotificationDetails: com.dexterous.flutterlocalnotifications.models.ScheduledNotificationRepeatFrequency scheduledNotificationRepeatFrequency
com.dexterous.flutterlocalnotifications.models.NotificationDetails: java.lang.String CHANNEL_ID
androidx.window.java.layout.WindowInfoTrackerCallbackAdapter$addListener$1$1: androidx.core.util.Consumer $consumer
id.flutter.flutter_background_service.R$id: int ltr
id.flutter.flutter_background_service.R$integer: int status_bar_notification_info_maxnum
androidx.window.java.layout.WindowInfoTrackerCallbackAdapter$addListener$1$1: kotlinx.coroutines.flow.Flow $flow
androidx.window.R$attr: int activityName
androidx.window.embedding.ExtensionEmbeddingBackend: java.util.concurrent.locks.ReentrantLock globalLock
com.dexterous.flutterlocalnotifications.models.NotificationDetails: com.dexterous.flutterlocalnotifications.RepeatInterval repeatInterval
io.flutter.embedding.engine.FlutterJNI: java.util.Set flutterUiDisplayListeners
id.flutter.flutter_background_service.R$id: int actions
com.dexterous.flutterlocalnotifications.models.NotificationDetails: java.lang.String payload
com.google.android.gms.internal.measurement.zzfj: java.lang.String zzf
com.google.android.gms.internal.measurement.zzff: boolean zzl
com.dexterous.flutterlocalnotifications.models.NotificationDetails: java.lang.Integer priority
id.flutter.flutter_background_service.R$styleable: int GradientColor_android_gradientRadius
com.google.android.gms.internal.measurement.zzgd: java.lang.String zzO
id.flutter.flutter_background_service.R$dimen: int notification_action_icon_size
com.google.android.gms.internal.measurement.zzfn: java.lang.String zzf
com.dexterous.flutterlocalnotifications.NotificationStyle: com.dexterous.flutterlocalnotifications.NotificationStyle Messaging
io.flutter.view.AccessibilityViewEmbedder: io.flutter.view.AccessibilityViewEmbedder$ReflectionAccessors reflectionAccessors
kotlinx.coroutines.JobSupport$Finishing: java.lang.Object _exceptionsHolder
id.flutter.flutter_background_service.R$styleable: int SplitPairFilter_primaryActivityName
com.dexterous.flutterlocalnotifications.BitmapSource: com.dexterous.flutterlocalnotifications.BitmapSource[] $VALUES
androidx.window.R$styleable: int SplitPlaceholderRule_splitRatio
androidx.window.layout.SidecarWindowBackend: androidx.window.layout.SidecarWindowBackend globalInstance
com.google.android.gms.internal.measurement.zzgy: com.google.android.gms.internal.measurement.zzgy zza
com.dexterous.flutterlocalnotifications.models.NotificationChannelDetails: java.lang.Integer importance
id.flutter.flutter_background_service.R$id: int rtl
com.google.android.gms.internal.measurement.zzfx: double zzi
io.flutter.plugin.editing.ImeSyncDeferringInsetsCallback: boolean animating
com.dexterous.flutterlocalnotifications.models.ScheduledNotificationRepeatFrequency: com.dexterous.flutterlocalnotifications.models.ScheduledNotificationRepeatFrequency[] $VALUES
com.google.android.gms.internal.measurement.zzff: com.google.android.gms.internal.measurement.zzli zzi
com.google.android.gms.internal.measurement.zzfh: java.lang.String zzf
id.flutter.flutter_background_service.R$styleable: int[] ActivityFilter
kotlinx.coroutines.scheduling.CoroutineScheduler$Worker: int indexInArray
com.dexterous.flutterlocalnotifications.models.NotificationDetails: java.lang.String CATEGORY
androidx.window.core.Version: int major
com.google.android.gms.internal.measurement.zzet: int zzd
androidx.window.embedding.EmbeddingTranslatingCallback: androidx.window.embedding.EmbeddingAdapter adapter
com.dexterous.flutterlocalnotifications.FlutterLocalNotificationsPlugin: java.lang.String SHOW_DAILY_AT_TIME_METHOD
com.dexterous.flutterlocalnotifications.models.styles.InboxStyleInformation: java.lang.String summaryText
androidx.window.layout.FoldingFeature$Orientation: androidx.window.layout.FoldingFeature$Orientation$Companion Companion
io.flutter.plugin.editing.ImeSyncDeferringInsetsCallback: io.flutter.plugin.editing.ImeSyncDeferringInsetsCallback$InsetsListener insetsListener
com.google.android.gms.common.internal.RootTelemetryConfiguration: android.os.Parcelable$Creator CREATOR
com.dexterous.flutterlocalnotifications.models.NotificationChannelDetails: java.lang.String CHANNEL_ACTION
androidx.window.R$attr: int finishPrimaryWithSecondary
io.flutter.plugins.firebase.core.FlutterFirebasePluginRegistry: java.util.Map registeredPlugins
com.dexterous.flutterlocalnotifications.models.NotificationDetails: java.lang.String SCHEDULED_DATE_TIME
com.google.android.gms.internal.measurement.zzft: long zzg
androidx.window.R$styleable: int SplitPairRule_splitMinWidth
com.dexterous.flutterlocalnotifications.models.NotificationDetails: java.lang.String COLOR_BLUE
com.dexterous.flutterlocalnotifications.FlutterLocalNotificationsPlugin: android.content.Context applicationContext
id.flutter.flutter_background_service.FlutterBackgroundServicePlugin$1: id.flutter.flutter_background_service.FlutterBackgroundServicePlugin this$0
id.flutter.flutter_background_service.WatchdogReceiver: int QUEUE_REQUEST_ID
com.dexterous.flutterlocalnotifications.models.NotificationChannelGroupDetails: java.lang.String description
kotlinx.coroutines.internal.LockFreeLinkedListNode: java.lang.Object _prev
id.flutter.flutter_background_service.FlutterBackgroundServicePlugin: java.lang.String TAG
com.dexterous.flutterlocalnotifications.models.NotificationChannelAction: com.dexterous.flutterlocalnotifications.models.NotificationChannelAction[] $VALUES
com.dexterous.flutterlocalnotifications.models.NotificationDetails: com.dexterous.flutterlocalnotifications.models.Time repeatTime
id.flutter.flutter_background_service.R$attr: int nestedScrollViewStyle
io.flutter.embedding.engine.FlutterJNI: android.os.Looper mainLooper
com.google.android.gms.internal.measurement.zzfv: com.google.android.gms.internal.measurement.zzfv zza
com.google.android.gms.internal.measurement.zzfd: boolean zzf
com.dexterous.flutterlocalnotifications.models.NotificationDetails: java.lang.String LED_COLOR_BLUE
com.google.android.gms.signin.internal.zai: android.os.Parcelable$Creator CREATOR
com.google.android.gms.internal.measurement.zzey: com.google.android.gms.internal.measurement.zzli zzh
android.support.v4.media.session.MediaSessionCompat$QueueItem: android.os.Parcelable$Creator CREATOR
id.flutter.flutter_background_service.R$id: int tag_unhandled_key_event_manager
androidx.window.embedding.EmbeddingTranslatingCallback: androidx.window.embedding.EmbeddingInterfaceCompat$EmbeddingCallbackInterface callback
id.flutter.flutter_background_service.R$attr: int alwaysExpand
androidx.window.embedding.SplitPlaceholderRule: java.util.Set filters
com.dexterous.flutterlocalnotifications.NotificationStyle: com.dexterous.flutterlocalnotifications.NotificationStyle Inbox
com.dexterous.flutterlocalnotifications.NotificationStyle: com.dexterous.flutterlocalnotifications.NotificationStyle Media
com.dexterous.flutterlocalnotifications.models.NotificationDetails: java.lang.String TAG
io.flutter.embedding.engine.FlutterJNI: java.util.Set engineLifecycleListeners
com.dexterous.flutterlocalnotifications.models.NotificationChannelDetails: java.lang.String GROUP_ID
io.flutter.plugins.firebase.core.FlutterFirebasePlugin: java.util.concurrent.ExecutorService cachedThreadPool
com.dexterous.flutterlocalnotifications.models.MessageDetails: com.dexterous.flutterlocalnotifications.models.PersonDetails person
id.flutter.flutter_background_service.R$id: int accessibility_custom_action_27
kotlinx.coroutines.JobSupport: java.lang.Object _parentHandle
id.flutter.flutter_background_service.R$styleable: int SplitPlaceholderRule_placeholderActivityName
com.dexterous.flutterlocalnotifications.models.styles.BigPictureStyleInformation: java.lang.Boolean hideExpandedLargeIcon
kotlinx.coroutines.internal.LockFreeTaskQueue: java.lang.Object _cur
com.dexterous.flutterlocalnotifications.models.NotificationChannelDetails: java.lang.String groupId
androidx.window.embedding.SplitController: androidx.window.embedding.EmbeddingBackend embeddingBackend
com.dexterous.flutterlocalnotifications.models.DateTimeComponents: com.dexterous.flutterlocalnotifications.models.DateTimeComponents[] $VALUES
com.google.android.gms.internal.measurement.zzgd: java.lang.String zzq
com.google.android.gms.internal.measurement.zzff: java.lang.String zzo
com.google.android.gms.internal.measurement.zzgi: com.google.android.gms.internal.measurement.zzli zzg
com.google.android.gms.internal.measurement.zzgr: com.google.android.gms.internal.measurement.zzli zzf
androidx.window.layout.HardwareFoldingFeature$Type: androidx.window.layout.HardwareFoldingFeature$Type HINGE
io.flutter.embedding.engine.FlutterOverlaySurface: int id
id.flutter.flutter_background_service.R$attr: int clearTop
com.dexterous.flutterlocalnotifications.models.ScheduledNotificationRepeatFrequency: com.dexterous.flutterlocalnotifications.models.ScheduledNotificationRepeatFrequency Daily
id.flutter.flutter_background_service.R$attr: int secondaryActivityAction
com.dexterous.flutterlocalnotifications.models.NotificationDetails: com.dexterous.flutterlocalnotifications.SoundSource soundSource
io.flutter.embedding.android.FlutterSplashView$SavedState: android.os.Bundle splashScreenState
kotlinx.coroutines.internal.LockFreeTaskQueueCore: java.lang.Object _next
com.google.android.gms.internal.measurement.zzgy: java.lang.String zzg
androidx.window.embedding.SplitPairFilter: android.content.ComponentName primaryActivityName
id.flutter.flutter_background_service.R$styleable: int SplitPairRule_splitMinWidth
id.flutter.flutter_background_service.R$styleable: int GradientColor_android_centerX
com.google.android.gms.common.internal.ConnectionTelemetryConfiguration: android.os.Parcelable$Creator CREATOR
io.flutter.plugin.platform.SingleViewPresentation: int viewId
com.dexterous.flutterlocalnotifications.models.NotificationDetails: java.lang.String FULL_SCREEN_INTENT
id.flutter.flutter_background_service.R$styleable: int ActivityFilter_activityAction
io.flutter.embedding.engine.FlutterJNI: boolean loadLibraryCalled
androidx.window.layout.SidecarCompat$DistinctSidecarElementCallback: androidx.window.sidecar.SidecarDeviceState lastDeviceState
id.flutter.flutter_background_service.R$id: int async
id.flutter.flutter_background_service.R$dimen: int notification_right_side_padding_top
com.dexterous.flutterlocalnotifications.FlutterLocalNotificationsPlugin: java.lang.String SHARED_PREFERENCES_KEY
id.flutter.flutter_background_service.R$styleable: int[] ActivityRule
com.dexterous.flutterlocalnotifications.models.NotificationDetails: java.lang.String LED_OFF_MS
androidx.window.embedding.SplitController: boolean sDebug
io.flutter.embedding.engine.FlutterJNI: boolean isCodePointEmojiModifier(int)
androidx.window.layout.DisplayFeature: android.graphics.Rect getBounds()
androidx.window.layout.ExtensionInterfaceCompat: boolean validateExtensionInterface()
androidx.window.embedding.ActivityRule: ActivityRule(java.util.Set,boolean)
com.google.firebase.components.ComponentDiscoveryService: ComponentDiscoveryService()
io.flutter.embedding.engine.FlutterJNI: void nativeImageHeaderCallback(long,int,int)
io.flutter.embedding.engine.FlutterJNI: void handlePlatformMessage(java.lang.String,java.nio.ByteBuffer,int,long)
kotlin.jvm.internal.CallableReference: kotlin.reflect.KType getReturnType()
androidx.window.R$attr: R$attr()
androidx.window.core.Version: int compareTo(java.lang.Object)
androidx.window.layout.WindowLayoutInfo: boolean equals(java.lang.Object)
androidx.window.layout.SidecarWindowBackend$WindowLayoutChangeCallbackWrapper: SidecarWindowBackend$WindowLayoutChangeCallbackWrapper(android.app.Activity,java.util.concurrent.Executor,androidx.core.util.Consumer)
com.dexterous.flutterlocalnotifications.FlutterLocalNotificationsPlugin: void setProgress(com.dexterous.flutterlocalnotifications.models.NotificationDetails,androidx.core.app.NotificationCompat$Builder)
com.dexterous.flutterlocalnotifications.models.ScheduledNotificationRepeatFrequency: com.dexterous.flutterlocalnotifications.models.ScheduledNotificationRepeatFrequency valueOf(java.lang.String)
kotlin.jvm.internal.CallableReference: boolean isAbstract()
id.flutter.flutter_background_service.WatchdogReceiver: void enqueue(android.content.Context)
io.flutter.plugins.firebase.core.FlutterFirebasePlugin: com.google.android.gms.tasks.Task didReinitializeFirebaseCore()
com.google.android.datatransport.runtime.scheduling.jobscheduling.AlarmManagerSchedulerBroadcastReceiver: AlarmManagerSchedulerBroadcastReceiver()
io.flutter.embedding.engine.FlutterJNI: java.lang.String getVMServiceUri()
io.flutter.embedding.engine.mutatorsstack.FlutterMutatorsStack$FlutterMutatorType: io.flutter.embedding.engine.mutatorsstack.FlutterMutatorsStack$FlutterMutatorType valueOf(java.lang.String)
com.dexterous.flutterlocalnotifications.models.NotificationDetails: NotificationDetails()
io.flutter.embedding.engine.FlutterJNI: void nativeUpdateRefreshRate(float)
androidx.window.embedding.EmbeddingInterfaceCompat: void setSplitRules(java.util.Set)
io.flutter.embedding.android.FlutterActivity: FlutterActivity()
org.threeten.bp.chrono.Ser: java.lang.Object readResolve()
androidx.window.layout.ExtensionsWindowLayoutInfoAdapter: androidx.window.layout.WindowLayoutInfo translate$window_release(android.app.Activity,androidx.window.extensions.layout.WindowLayoutInfo)
kotlin.coroutines.jvm.internal.SuspendLambda: SuspendLambda(int)
id.flutter.flutter_background_service.Pipe$PipeListener: void onReceived(org.json.JSONObject)
android.support.v4.media.AudioAttributesCompatParcelizer: void write(androidx.media.AudioAttributesCompat,androidx.versionedparcelable.VersionedParcel)
io.flutter.embedding.engine.FlutterJNI: void nativeSurfaceWindowChanged(long,android.view.Surface)
androidx.window.embedding.SplitPairFilter: boolean matchesActivityPair(android.app.Activity,android.app.Activity)
androidx.window.embedding.ExtensionEmbeddingBackend$EmbeddingCallbackImpl: void onSplitInfoChanged(java.util.List)
io.flutter.embedding.engine.FlutterJNI: FlutterJNI()
com.google.android.gms.dynamite.descriptors.com.google.android.gms.measurement.dynamite.ModuleDescriptor: ModuleDescriptor()
androidx.window.embedding.EmbeddingAdapter: java.util.function.Predicate translateActivityPredicates(java.util.Set)
com.google.android.gms.measurement.internal.AppMeasurementDynamiteService: void onActivityStarted(com.google.android.gms.dynamic.IObjectWrapper,long)
com.google.firebase.analytics.connector.internal.AnalyticsConnectorRegistrar: java.util.List getComponents()
org.threeten.bp.ZoneRegion: java.lang.Object readResolve()
androidx.window.layout.SidecarCompat: void setExtensionCallback(androidx.window.layout.ExtensionInterfaceCompat$ExtensionCallbackInterface)
io.flutter.plugins.firebase.messaging.FlutterFirebaseMessagingReceiver: FlutterFirebaseMessagingReceiver()
androidx.window.layout.SidecarCompat$DistinctElementCallback: SidecarCompat$DistinctElementCallback(androidx.window.layout.ExtensionInterfaceCompat$ExtensionCallbackInterface)
org.threeten.bp.MonthDay: java.lang.Object readResolve()
androidx.window.layout.DisplayCompatHelperApi28: int safeInsetBottom(android.view.DisplayCutout)
com.google.android.gms.measurement.internal.AppMeasurementDynamiteService: void clearConditionalUserProperty(java.lang.String,java.lang.String,android.os.Bundle)
io.flutter.embedding.engine.renderer.SurfaceTextureWrapper: void attachToGLContext(int)
io.flutter.plugin.editing.ImeSyncDeferringInsetsCallback: boolean access$300(io.flutter.plugin.editing.ImeSyncDeferringInsetsCallback)
com.google.android.gms.measurement.AppMeasurement: java.lang.String getAppInstanceId()
io.flutter.embedding.engine.FlutterJNI: void nativeUnregisterTexture(long,long)
androidx.window.layout.HardwareFoldingFeature: androidx.window.layout.FoldingFeature$OcclusionType getOcclusionType()
androidx.window.embedding.EmbeddingRule: EmbeddingRule()
org.threeten.bp.chrono.JapaneseEra: java.lang.Object writeReplace()
kotlinx.coroutines.CoroutineStart: kotlinx.coroutines.CoroutineStart valueOf(java.lang.String)
androidx.media.AudioAttributesImplBaseParcelizer: void write(androidx.media.AudioAttributesImplBase,androidx.versionedparcelable.VersionedParcel)
com.google.firebase.installations.FirebaseInstallationsRegistrar: FirebaseInstallationsRegistrar()
io.flutter.embedding.engine.FlutterJNI: void onSurfaceCreated(android.view.Surface)
androidx.window.embedding.SplitRule: float getSplitRatio()
com.dexterous.flutterlocalnotifications.FlutterLocalNotificationsPlugin: boolean onNewIntent(android.content.Intent)
io.flutter.plugins.firebase.core.FlutterFirebaseCoreRegistrar: FlutterFirebaseCoreRegistrar()
io.flutter.embedding.engine.systemchannels.SettingsChannel$PlatformBrightness: io.flutter.embedding.engine.systemchannels.SettingsChannel$PlatformBrightness valueOf(java.lang.String)
androidx.window.embedding.ActivityStack: int hashCode()
androidx.window.layout.SidecarCompat$Companion: androidx.window.core.Version getSidecarVersion()
io.flutter.embedding.engine.systemchannels.PlatformChannel$ClipboardContentFormat: io.flutter.embedding.engine.systemchannels.PlatformChannel$ClipboardContentFormat valueOf(java.lang.String)
com.dexterous.flutterlocalnotifications.NotificationStyle: com.dexterous.flutterlocalnotifications.NotificationStyle[] $values()
androidx.window.layout.WindowMetricsCalculator$Companion$decorator$1: WindowMetricsCalculator$Companion$decorator$1()
io.flutter.embedding.engine.systemchannels.PlatformChannel$Brightness: io.flutter.embedding.engine.systemchannels.PlatformChannel$Brightness valueOf(java.lang.String)
io.flutter.plugins.firebase.messaging.FlutterFirebaseAppRegistrar: FlutterFirebaseAppRegistrar()
androidx.window.layout.WindowInfoTracker$-CC: androidx.window.layout.WindowInfoTracker getOrCreate(android.content.Context)
io.flutter.plugin.platform.SingleViewPresentation: io.flutter.plugin.platform.PlatformView getView()
id.flutter.flutter_background_service.Config: void setBackgroundHandle(long)
io.flutter.embedding.engine.mutatorsstack.FlutterMutatorsStack: android.graphics.Matrix getFinalMatrix()
io.flutter.embedding.engine.FlutterJNI: void cleanupMessageData(long)
com.google.firebase.installations.local.PersistedInstallation$RegistrationStatus: com.google.firebase.installations.local.PersistedInstallation$RegistrationStatus valueOf(java.lang.String)
androidx.window.layout.ExtensionWindowLayoutInfoBackend$MulticastConsumer: void addListener(androidx.core.util.Consumer)
androidx.window.embedding.SplitPairRule: androidx.window.embedding.SplitPairRule plus$window_release(androidx.window.embedding.SplitPairFilter)
androidx.window.embedding.EmbeddingAdapter: java.util.Set translate(java.util.Set)
androidx.window.layout.WindowMetricsCalculatorCompat: android.view.DisplayCutout getCutoutForDisplay(android.view.Display)
io.flutter.embedding.engine.renderer.SurfaceTextureWrapper: void release()
com.dexterous.flutterlocalnotifications.FlutterLocalNotificationsPlugin: androidx.core.app.NotificationCompat$MessagingStyle$Message createMessage(android.content.Context,com.dexterous.flutterlocalnotifications.models.MessageDetails)
io.flutter.embedding.engine.FlutterJNI: void onFirstFrame()
com.google.android.gms.measurement.internal.AppMeasurementDynamiteService: void onActivityResumed(com.google.android.gms.dynamic.IObjectWrapper,long)
androidx.lifecycle.Lifecycle$State: androidx.lifecycle.Lifecycle$State valueOf(java.lang.String)
androidx.window.core.Version$Companion: Version$Companion()
com.google.android.gms.measurement.internal.AppMeasurementDynamiteService: void setUserProperty(java.lang.String,java.lang.String,com.google.android.gms.dynamic.IObjectWrapper,boolean,long)
org.threeten.bp.YearMonth: java.lang.Object writeReplace()
androidx.lifecycle.ReportFragment$LifecycleCallbacks: void onActivityPreDestroyed(android.app.Activity)
com.dexterous.flutterlocalnotifications.models.DateTimeComponents: com.dexterous.flutterlocalnotifications.models.DateTimeComponents valueOf(java.lang.String)
id.flutter.flutter_background_service.Config: java.lang.String getInitialNotificationTitle()
com.dexterous.flutterlocalnotifications.RepeatInterval: com.dexterous.flutterlocalnotifications.RepeatInterval[] values()
androidx.window.embedding.ActivityStack: ActivityStack(java.util.List,boolean)
io.flutter.embedding.engine.FlutterJNI: void destroyOverlaySurfaces()
io.flutter.embedding.engine.FlutterJNI: void handlePlatformMessageResponse(int,java.nio.ByteBuffer)
androidx.media.AudioAttributesImplApi21: AudioAttributesImplApi21()
kotlin.jvm.internal.FunctionReferenceImpl: FunctionReferenceImpl(int,kotlin.reflect.KDeclarationContainer,java.lang.String,java.lang.String)
com.google.android.gms.measurement.internal.AppMeasurementDynamiteService: void onActivityDestroyed(com.google.android.gms.dynamic.IObjectWrapper,long)
androidx.window.core.Version: Version(int,int,int,java.lang.String)
androidx.window.layout.ExtensionWindowLayoutInfoBackend: void unregisterLayoutChangeCallback(androidx.core.util.Consumer)
io.flutter.plugin.editing.ImeSyncDeferringInsetsCallback: boolean access$202(io.flutter.plugin.editing.ImeSyncDeferringInsetsCallback,boolean)
com.dexterous.flutterlocalnotifications.FlutterLocalNotificationsPlugin: void setMessagingStyle(android.content.Context,com.dexterous.flutterlocalnotifications.models.NotificationDetails,androidx.core.app.NotificationCompat$Builder)
com.google.firebase.analytics.FirebaseAnalytics: com.google.android.gms.measurement.internal.zzil getScionFrontendApiImplementation(android.content.Context,android.os.Bundle)
androidx.window.layout.WindowMetrics: java.lang.String toString()
androidx.core.content.ContextCompat$Api26Impl: android.content.ComponentName startForegroundService(android.content.Context,android.content.Intent)
androidx.window.embedding.SplitPairFilter: boolean matchesActivityIntentPair(android.app.Activity,android.content.Intent)
androidx.window.embedding.ActivityRule: androidx.window.embedding.ActivityRule plus$window_release(androidx.window.embedding.ActivityFilter)
io.flutter.embedding.android.FlutterView: void setVisibility(int)
kotlin.jvm.internal.FunctionReference: int hashCode()
io.flutter.plugin.editing.ImeSyncDeferringInsetsCallback$AnimationCallback: ImeSyncDeferringInsetsCallback$AnimationCallback(io.flutter.plugin.editing.ImeSyncDeferringInsetsCallback)
id.flutter.flutter_background_service.FlutterBackgroundServicePlugin$1: void onReceived(org.json.JSONObject)
io.flutter.embedding.android.FlutterView: io.flutter.embedding.engine.FlutterEngine getAttachedFlutterEngine()
kotlin.coroutines.jvm.internal.SuspendLambda: SuspendLambda(int,kotlin.coroutines.Continuation)
io.flutter.embedding.engine.systemchannels.PlatformChannel$HapticFeedbackType: io.flutter.embedding.engine.systemchannels.PlatformChannel$HapticFeedbackType[] values()
androidx.window.java.layout.WindowInfoTrackerCallbackAdapter: WindowInfoTrackerCallbackAdapter(androidx.window.layout.WindowInfoTracker)
org.threeten.bp.temporal.IsoFields$Field: org.threeten.bp.temporal.IsoFields$Field valueOf(java.lang.String)
androidx.window.embedding.ExtensionEmbeddingBackend: void setSplitRules(java.util.Set)
androidx.lifecycle.ReportFragment$LifecycleCallbacks: void onActivityPrePaused(android.app.Activity)
kotlinx.coroutines.scheduling.CoroutineScheduler$WorkerState: kotlinx.coroutines.scheduling.CoroutineScheduler$WorkerState[] values()
com.dexterous.flutterlocalnotifications.FlutterLocalNotificationsPlugin: androidx.core.graphics.drawable.IconCompat getIconFromSource(android.content.Context,java.lang.String,com.dexterous.flutterlocalnotifications.models.IconSource)
com.google.gson.FieldNamingPolicy: com.google.gson.FieldNamingPolicy[] values()
androidx.core.content.ContextCompat$Api24Impl: boolean isDeviceProtectedStorage(android.content.Context)
com.google.firebase.heartbeatinfo.HeartBeatInfo$HeartBeat: com.google.firebase.heartbeatinfo.HeartBeatInfo$HeartBeat[] values()
com.google.firebase.installations.remote.TokenResult$ResponseCode: com.google.firebase.installations.remote.TokenResult$ResponseCode valueOf(java.lang.String)
androidx.window.layout.DisplayCompatHelperApi17: void getRealSize(android.view.Display,android.graphics.Point)
androidx.core.app.RemoteActionCompatParcelizer: void write(androidx.core.app.RemoteActionCompat,androidx.versionedparcelable.VersionedParcel)
io.flutter.embedding.engine.FlutterJNI: void removeEngineLifecycleListener(io.flutter.embedding.engine.FlutterEngine$EngineLifecycleListener)
io.flutter.embedding.engine.mutatorsstack.FlutterMutatorsStack: java.util.List getFinalClippingPaths()
io.flutter.embedding.engine.renderer.FlutterRenderer$DisplayFeatureState: io.flutter.embedding.engine.renderer.FlutterRenderer$DisplayFeatureState[] values()
id.flutter.flutter_background_service.R$dimen: R$dimen()
id.flutter.flutter_background_service.FlutterBackgroundServicePlugin: void onMethodCall(io.flutter.plugin.common.MethodCall,io.flutter.plugin.common.MethodChannel$Result)
io.flutter.embedding.engine.mutatorsstack.FlutterMutatorView: void setOnDescendantFocusChangeListener(android.view.View$OnFocusChangeListener)
androidx.window.embedding.SplitRule: int getMinSmallestWidth()
com.google.android.gms.common.api.GoogleApiActivity: GoogleApiActivity()
androidx.core.content.ContextCompat$Api21Impl: java.io.File getNoBackupFilesDir(android.content.Context)
android.support.v4.graphics.drawable.IconCompatParcelizer: androidx.core.graphics.drawable.IconCompat read(androidx.versionedparcelable.VersionedParcel)
io.flutter.embedding.engine.FlutterJNI: void onVsync(long,long,long)
org.threeten.bp.chrono.MinguoEra: org.threeten.bp.chrono.MinguoEra[] values()
androidx.window.layout.WindowInfoTracker$Companion: WindowInfoTracker$Companion()
id.flutter.flutter_background_service.WatchdogReceiver: void enqueue(android.content.Context,int)
kotlin.jvm.internal.CallableReference: java.lang.String getName()
id.flutter.flutter_background_service.Config: java.lang.String getInitialNotificationContent()
io.flutter.plugin.editing.ImeSyncDeferringInsetsCallback: android.view.View$OnApplyWindowInsetsListener getInsetsListener()
com.dexterous.flutterlocalnotifications.models.IconSource: com.dexterous.flutterlocalnotifications.models.IconSource[] $values()
id.flutter.flutter_background_service.BootReceiver: BootReceiver()
androidx.window.layout.WindowMetricsCalculatorCompat: android.graphics.Point getRealSizeForDisplay$window_release(android.view.Display)
com.google.firebase.installations.remote.InstallationResponse$ResponseCode: com.google.firebase.installations.remote.InstallationResponse$ResponseCode[] values()
com.dexterous.flutterlocalnotifications.SoundSource: com.dexterous.flutterlocalnotifications.SoundSource[] values()
androidx.window.core.Version$Companion: androidx.window.core.Version getVERSION_1_0()
kotlin.coroutines.jvm.internal.BaseContinuationImpl: java.lang.Object invokeSuspend(java.lang.Object)
com.dexterous.flutterlocalnotifications.FlutterLocalNotificationsPlugin: void getNotificationAppLaunchDetails(io.flutter.plugin.common.MethodChannel$Result)
io.flutter.view.AccessibilityViewEmbedder: void copyAccessibilityFields(android.view.accessibility.AccessibilityNodeInfo,android.view.accessibility.AccessibilityNodeInfo)
com.google.android.gms.measurement.internal.AppMeasurementDynamiteService: void getAppInstanceId(com.google.android.gms.internal.measurement.zzcf)
androidx.window.java.layout.WindowInfoTrackerCallbackAdapter$addListener$1$1: WindowInfoTrackerCallbackAdapter$addListener$1$1(kotlinx.coroutines.flow.Flow,androidx.core.util.Consumer,kotlin.coroutines.Continuation)
kotlin.coroutines.jvm.internal.BaseContinuationImpl: BaseContinuationImpl(kotlin.coroutines.Continuation)
androidx.window.embedding.ActivityStack: ActivityStack(java.util.List,boolean,int,kotlin.jvm.internal.DefaultConstructorMarker)
androidx.window.java.layout.WindowInfoTrackerCallbackAdapter$addListener$1$1: java.lang.Object invokeSuspend(java.lang.Object)
com.dexterous.flutterlocalnotifications.FlutterLocalNotificationsPlugin: void saveScheduledNotification(android.content.Context,com.dexterous.flutterlocalnotifications.models.NotificationDetails)
androidx.window.embedding.ExtensionEmbeddingBackend$Companion: ExtensionEmbeddingBackend$Companion(kotlin.jvm.internal.DefaultConstructorMarker)
com.dexterous.flutterlocalnotifications.FlutterLocalNotificationsPlugin: boolean hasInvalidBigPictureResources(io.flutter.plugin.common.MethodChannel$Result,com.dexterous.flutterlocalnotifications.models.NotificationDetails)
androidx.window.embedding.EmbeddingAdapter: java.util.function.Predicate translateParentMetricsPredicate(androidx.window.embedding.SplitRule)
androidx.window.layout.WindowMetricsCalculatorCompat: android.graphics.Rect computeWindowBoundsIceCreamSandwich$window_release(android.app.Activity)
io.flutter.plugin.platform.SingleViewPresentation: SingleViewPresentation(android.content.Context,android.view.Display,io.flutter.plugin.platform.PlatformView,io.flutter.plugin.platform.AccessibilityEventsDelegate,int,android.view.View$OnFocusChangeListener)
com.google.firebase.analytics.connector.internal.AnalyticsConnectorRegistrar: com.google.firebase.analytics.connector.AnalyticsConnector lambda$getComponents$0(com.google.firebase.components.ComponentContainer)
org.threeten.bp.ZoneRegion: java.lang.Object writeReplace()
org.threeten.bp.chrono.MinguoChronology: java.lang.Object readResolve()
androidx.window.layout.WindowMetricsCalculator$Companion: WindowMetricsCalculator$Companion()
id.flutter.flutter_background_service.BackgroundService: void createNotificationChannel()
androidx.window.embedding.MatcherUtils: boolean areActivityOrIntentComponentsMatching$window_release(android.app.Activity,android.content.ComponentName)
io.flutter.embedding.engine.FlutterJNI: io.flutter.embedding.engine.FlutterOverlaySurface createOverlaySurface()
io.flutter.embedding.engine.FlutterJNI: void addIsDisplayingFlutterUiListener(io.flutter.embedding.engine.renderer.FlutterUiDisplayListener)
kotlin.jvm.internal.CallableReference: java.util.List getParameters()
com.google.android.gms.measurement.internal.AppMeasurementDynamiteService: void setEventInterceptor(com.google.android.gms.internal.measurement.zzci)
androidx.media.AudioAttributesCompatParcelizer: androidx.media.AudioAttributesCompat read(androidx.versionedparcelable.VersionedParcel)
com.dexterous.flutterlocalnotifications.FlutterLocalNotificationsPlugin: int getDrawableResourceId(android.content.Context,java.lang.String)
kotlin.jvm.internal.FunctionReference: int getArity()
io.flutter.plugin.platform.SingleViewPresentation: SingleViewPresentation(android.content.Context,android.view.Display,io.flutter.plugin.platform.AccessibilityEventsDelegate,io.flutter.plugin.platform.SingleViewPresentation$PresentationState,android.view.View$OnFocusChangeListener,boolean)
io.flutter.embedding.engine.FlutterJNI: boolean nativeFlutterTextUtilsIsVariationSelector(int)
io.flutter.view.AccessibilityViewEmbedder: AccessibilityViewEmbedder(android.view.View,int)
com.google.android.gms.measurement.internal.AppMeasurementDynamiteService: void setInstanceIdProvider(com.google.android.gms.internal.measurement.zzck)
kotlin.jvm.internal.CallableReference: kotlin.reflect.KCallable getReflected()
androidx.window.layout.WindowMetricsCalculator$Companion: androidx.window.layout.WindowMetricsCalculator getOrCreate()
io.flutter.embedding.engine.FlutterJNI: void unregisterTexture(long)
kotlin.jvm.internal.FunctionReference: java.lang.String toString()
kotlin.coroutines.jvm.internal.BaseContinuationImpl: java.lang.String toString()
androidx.lifecycle.Lifecycle$Event: androidx.lifecycle.Lifecycle$Event[] values()
io.flutter.embedding.engine.FlutterJNI: void onBeginFrame()
com.google.android.gms.measurement.internal.AppMeasurementDynamiteService: void beginAdUnitExposure(java.lang.String,long)
io.flutter.embedding.engine.systemchannels.TextInputChannel$TextCapitalization: io.flutter.embedding.engine.systemchannels.TextInputChannel$TextCapitalization[] values()
com.dexterous.flutterlocalnotifications.FlutterLocalNotificationsPlugin: androidx.core.app.Person buildPerson(android.content.Context,com.dexterous.flutterlocalnotifications.models.PersonDetails)
androidx.core.content.ContextCompat$Api23Impl: int getColor(android.content.Context,int)
androidx.window.layout.FoldingFeature$OcclusionType$Companion: FoldingFeature$OcclusionType$Companion()
androidx.window.embedding.SplitController$Companion: SplitController$Companion(kotlin.jvm.internal.DefaultConstructorMarker)
androidx.window.embedding.SplitRule: SplitRule(int,int,float,int)
androidx.window.core.Version: int compareTo(androidx.window.core.Version)
androidx.window.layout.SidecarWindowBackend$Companion: SidecarWindowBackend$Companion()
io.flutter.embedding.engine.FlutterJNI: void updateCustomAccessibilityActions(java.nio.ByteBuffer,java.lang.String[])
io.flutter.plugin.editing.ImeSyncDeferringInsetsCallback: int access$100(io.flutter.plugin.editing.ImeSyncDeferringInsetsCallback)
io.flutter.embedding.engine.FlutterJNI: void nativeCleanupMessageData(long)
io.flutter.embedding.engine.mutatorsstack.FlutterMutatorsStack: java.util.List getMutators()
androidx.window.layout.SidecarAdapter$Companion: SidecarAdapter$Companion(kotlin.jvm.internal.DefaultConstructorMarker)
androidx.window.layout.SidecarWindowBackend$Companion: androidx.window.layout.ExtensionInterfaceCompat initAndVerifyExtension(android.content.Context)
id.flutter.flutter_background_service.Config: void setNotificationChannelId(java.lang.String)
androidx.core.app.CoreComponentFactory: CoreComponentFactory()
androidx.window.embedding.EmptyEmbeddingComponent: void setEmbeddingRules(java.util.Set)
com.google.android.gms.measurement.internal.AppMeasurementDynamiteService: void onActivityCreated(com.google.android.gms.dynamic.IObjectWrapper,android.os.Bundle,long)
io.flutter.embedding.engine.FlutterJNI: void invokePlatformMessageEmptyResponseCallback(int)
kotlin.jvm.internal.CallableReference: CallableReference(java.lang.Object)
androidx.window.embedding.SplitPairFilter: boolean equals(java.lang.Object)
androidx.window.layout.WindowInfoTrackerImpl$windowLayoutInfo$1: java.lang.Object invokeSuspend(java.lang.Object)
com.dexterous.flutterlocalnotifications.FlutterLocalNotificationsPlugin: void onDetachedFromActivity()
androidx.window.layout.SidecarCompat: androidx.window.layout.WindowLayoutInfo getWindowLayoutInfo(android.app.Activity)
androidx.window.core.Bounds: boolean isZero()
id.flutter.flutter_background_service.BackgroundService: boolean onUnbind(android.content.Intent)
androidx.window.embedding.SplitPairRule: boolean getClearTop()
androidx.window.layout.SidecarAdapter: boolean isEqualSidecarWindowLayoutInfo(androidx.window.sidecar.SidecarWindowLayoutInfo,androidx.window.sidecar.SidecarWindowLayoutInfo)
androidx.window.layout.HardwareFoldingFeature$Type$Companion: androidx.window.layout.HardwareFoldingFeature$Type getHINGE()
com.dexterous.flutterlocalnotifications.FlutterLocalNotificationsPlugin: void repeat(io.flutter.plugin.common.MethodCall,io.flutter.plugin.common.MethodChannel$Result)
io.flutter.embedding.engine.FlutterJNI: void init(android.content.Context,java.lang.String[],java.lang.String,java.lang.String,java.lang.String,long)
org.threeten.bp.chrono.ThaiBuddhistChronology: java.lang.Object readResolve()
androidx.window.embedding.EmbeddingCompat: void setSplitRules(java.util.Set)
com.dexterous.flutterlocalnotifications.FlutterLocalNotificationsPlugin: void setBigTextStyle(com.dexterous.flutterlocalnotifications.models.NotificationDetails,androidx.core.app.NotificationCompat$Builder)
id.flutter.flutter_background_service.WatchdogReceiver: void remove(android.content.Context)
com.dexterous.flutterlocalnotifications.FlutterLocalNotificationsPlugin: void setBigPictureStyle(android.content.Context,com.dexterous.flutterlocalnotifications.models.NotificationDetails,androidx.core.app.NotificationCompat$Builder)
io.flutter.embedding.engine.systemchannels.PlatformChannel$DeviceOrientation: io.flutter.embedding.engine.systemchannels.PlatformChannel$DeviceOrientation valueOf(java.lang.String)
io.flutter.embedding.engine.FlutterJNI: void setAsyncWaitForVsyncDelegate(io.flutter.embedding.engine.FlutterJNI$AsyncWaitForVsyncDelegate)
io.flutter.view.AccessibilityViewEmbedder: android.view.accessibility.AccessibilityNodeInfo convertToFlutterNode(android.view.accessibility.AccessibilityNodeInfo,int,android.view.View)
io.flutter.embedding.engine.FlutterJNI: android.graphics.Bitmap nativeGetBitmap(long)
androidx.window.layout.SidecarWindowBackend: void callbackRemovedForActivity(android.app.Activity)
id.flutter.flutter_background_service.Config: int getForegroundNotificationId()
io.flutter.embedding.engine.FlutterJNI: boolean isCodePointEmojiModifierBase(int)
androidx.window.embedding.ActivityStack: java.util.List getActivities$window_release()
com.dexterous.flutterlocalnotifications.FlutterLocalNotificationsPlugin: android.app.AlarmManager getAlarmManager(android.content.Context)
com.google.firebase.messaging.threads.ThreadPriority: com.google.firebase.messaging.threads.ThreadPriority valueOf(java.lang.String)
androidx.window.embedding.EmbeddingAdapter: boolean translateActivityIntentPredicates$lambda-3(androidx.window.embedding.EmbeddingAdapter,java.util.Set,android.util.Pair)
id.flutter.flutter_background_service.R$drawable: R$drawable()
com.dexterous.flutterlocalnotifications.SoundSource: SoundSource(java.lang.String,int)
org.threeten.bp.format.TextStyle: org.threeten.bp.format.TextStyle[] values()
io.flutter.embedding.android.FlutterView: android.view.accessibility.AccessibilityNodeProvider getAccessibilityNodeProvider()
kotlin.coroutines.jvm.internal.BaseContinuationImpl: java.lang.StackTraceElement getStackTraceElement()
androidx.window.embedding.SplitRuleParser: androidx.window.embedding.ActivityRule parseSplitActivityRule(android.content.Context,android.content.res.XmlResourceParser)
com.google.gson.FieldNamingPolicy: com.google.gson.FieldNamingPolicy valueOf(java.lang.String)
androidx.window.embedding.EmptyEmbeddingComponent: void setSplitInfoCallback(java.util.function.Consumer)
androidx.window.embedding.ActivityFilter: android.content.ComponentName getComponentName()
com.google.android.gms.internal.measurement.zzcb: zzcb()
androidx.window.core.Version$Companion: androidx.window.core.Version getCURRENT()
io.flutter.embedding.engine.systemchannels.PlatformChannel$SystemUiOverlay: io.flutter.embedding.engine.systemchannels.PlatformChannel$SystemUiOverlay[] values()
androidx.lifecycle.ReportFragment$LifecycleCallbacks: void onActivityPreStopped(android.app.Activity)
kotlin.jvm.internal.FunctionReference: boolean equals(java.lang.Object)
io.flutter.embedding.engine.FlutterJNI: void addEngineLifecycleListener(io.flutter.embedding.engine.FlutterEngine$EngineLifecycleListener)
id.flutter.flutter_background_service.Pipe: boolean hasListener()
com.google.android.datatransport.cct.internal.QosTier: com.google.android.datatransport.cct.internal.QosTier valueOf(java.lang.String)
com.google.firebase.analytics.connector.internal.AnalyticsConnectorRegistrar: AnalyticsConnectorRegistrar()
androidx.window.embedding.SplitController: void removeSplitListener(androidx.core.util.Consumer)
com.dexterous.flutterlocalnotifications.BitmapSource: com.dexterous.flutterlocalnotifications.BitmapSource[] values()
kotlin.coroutines.intrinsics.CoroutineSingletons: kotlin.coroutines.intrinsics.CoroutineSingletons[] values()
androidx.window.layout.WindowInfoTracker$Companion: androidx.window.layout.WindowInfoTracker getOrCreate(android.content.Context)
io.flutter.embedding.engine.renderer.FlutterRenderer$DisplayFeatureState: io.flutter.embedding.engine.renderer.FlutterRenderer$DisplayFeatureState valueOf(java.lang.String)
androidx.window.embedding.ExtensionEmbeddingBackend: androidx.window.embedding.ExtensionEmbeddingBackend access$getGlobalInstance$cp()
androidx.lifecycle.ReportFragment$LifecycleCallbacks: void onActivityDestroyed(android.app.Activity)
com.dexterous.flutterlocalnotifications.BitmapSource: BitmapSource(java.lang.String,int)
androidx.window.core.Bounds: android.graphics.Rect toRect()
id.flutter.flutter_background_service.BackgroundService: void runService()
com.dexterous.flutterlocalnotifications.FlutterLocalNotificationsPlugin: void setSound(android.content.Context,com.dexterous.flutterlocalnotifications.models.NotificationDetails,androidx.core.app.NotificationCompat$Builder)
com.google.android.gms.measurement.AppMeasurementJobService: AppMeasurementJobService()
id.flutter.flutter_background_service.BackgroundService: void updateNotificationInfo()
androidx.window.embedding.EmbeddingBackend: void setSplitRules(java.util.Set)
com.dexterous.flutterlocalnotifications.models.NotificationChannelAction: com.dexterous.flutterlocalnotifications.models.NotificationChannelAction valueOf(java.lang.String)
androidx.window.embedding.SplitRuleParser: androidx.window.embedding.SplitPlaceholderRule parseSplitPlaceholderRule(android.content.Context,android.content.res.XmlResourceParser)
androidx.window.embedding.SplitInfo: boolean equals(java.lang.Object)
id.flutter.flutter_background_service.R$string: R$string()
org.threeten.bp.Ser: Ser()
org.threeten.bp.zone.Ser: java.lang.Object readResolve()
androidx.window.layout.DisplayCompatHelperApi28: int safeInsetTop(android.view.DisplayCutout)
io.flutter.embedding.android.FlutterSplashView$SavedState: java.lang.String access$602(io.flutter.embedding.android.FlutterSplashView$SavedState,java.lang.String)
io.flutter.embedding.engine.FlutterJNI: void setAccessibilityDelegate(io.flutter.embedding.engine.FlutterJNI$AccessibilityDelegate)
io.flutter.embedding.engine.FlutterJNI: boolean isCodePointRegionalIndicator(int)
io.flutter.embedding.engine.systemchannels.PlatformChannel$SystemUiMode: io.flutter.embedding.engine.systemchannels.PlatformChannel$SystemUiMode valueOf(java.lang.String)
kotlin.jvm.internal.Lambda: java.lang.String toString()
id.flutter.flutter_background_service.Config: void setInitialNotificationTitle(java.lang.String)
io.flutter.embedding.android.FlutterSplashView$SavedState: android.os.Bundle access$702(io.flutter.embedding.android.FlutterSplashView$SavedState,android.os.Bundle)
androidx.window.embedding.EmbeddingInterfaceCompat$EmbeddingCallbackInterface: void onSplitInfoChanged(java.util.List)
io.flutter.embedding.engine.mutatorsstack.FlutterMutatorView: android.graphics.Matrix getPlatformViewMatrix()
androidx.core.content.ContextCompat$Api21Impl: java.io.File getCodeCacheDir(android.content.Context)
com.dexterous.flutterlocalnotifications.FlutterLocalNotificationsPlugin: void zonedScheduleNotification(android.content.Context,com.dexterous.flutterlocalnotifications.models.NotificationDetails,java.lang.Boolean)
androidx.window.layout.ExtensionWindowLayoutInfoBackend$MulticastConsumer: void removeListener(androidx.core.util.Consumer)
androidx.versionedparcelable.CustomVersionedParcelable: CustomVersionedParcelable()
androidx.window.core.Version: int getMinor()
com.google.android.datatransport.runtime.backends.BackendResponse$Status: com.google.android.datatransport.runtime.backends.BackendResponse$Status valueOf(java.lang.String)
com.dexterous.flutterlocalnotifications.FlutterLocalNotificationsPlugin: void setupNotificationChannel(android.content.Context,com.dexterous.flutterlocalnotifications.models.NotificationChannelDetails)
androidx.window.layout.WindowMetrics: android.graphics.Rect getBounds()
org.threeten.bp.zone.ZoneOffsetTransition: java.lang.Object writeReplace()
kotlin.jvm.internal.FunctionReference: FunctionReference(int,java.lang.Object,java.lang.Class,java.lang.String,java.lang.String,int)
io.flutter.embedding.engine.systemchannels.PlatformViewsChannel$PlatformViewCreationRequest$RequestedDisplayMode: io.flutter.embedding.engine.systemchannels.PlatformViewsChannel$PlatformViewCreationRequest$RequestedDisplayMode valueOf(java.lang.String)
kotlin.coroutines.jvm.internal.BaseContinuationImpl: kotlin.coroutines.Continuation create(java.lang.Object,kotlin.coroutines.Continuation)
androidx.window.layout.WindowMetricsCalculator$Companion$reset$1: WindowMetricsCalculator$Companion$reset$1()
androidx.window.embedding.EmbeddingCompat$Companion: boolean isEmbeddingAvailable()
androidx.window.java.layout.WindowInfoTrackerCallbackAdapter: void removeWindowLayoutInfoListener(androidx.core.util.Consumer)
androidx.window.layout.SidecarCompat$Companion: SidecarCompat$Companion(kotlin.jvm.internal.DefaultConstructorMarker)
com.google.android.gms.measurement.AppMeasurement: void logEventInternal(java.lang.String,java.lang.String,android.os.Bundle)
androidx.core.app.RemoteActionCompatParcelizer: androidx.core.app.RemoteActionCompat read(androidx.versionedparcelable.VersionedParcel)
id.flutter.flutter_background_service.Config: void setIsForeground(boolean)
com.google.android.datatransport.cct.internal.NetworkConnectionInfo$NetworkType: com.google.android.datatransport.cct.internal.NetworkConnectionInfo$NetworkType[] values()
androidx.window.embedding.SplitPairRule: boolean getFinishPrimaryWithSecondary()
org.threeten.bp.Month: org.threeten.bp.Month valueOf(java.lang.String)
org.threeten.bp.chrono.ChronoZonedDateTimeImpl: java.lang.Object readResolve()
androidx.window.java.layout.WindowInfoTrackerCallbackAdapter$addListener$1$1$invokeSuspend$$inlined$collect$1: WindowInfoTrackerCallbackAdapter$addListener$1$1$invokeSuspend$$inlined$collect$1(androidx.core.util.Consumer)
androidx.window.java.layout.WindowInfoTrackerCallbackAdapter$addListener$1$1: java.lang.Object invoke(java.lang.Object,java.lang.Object)
io.flutter.embedding.engine.FlutterJNI: void onSurfaceWindowChanged(android.view.Surface)
id.flutter.flutter_background_service.FlutterBackgroundServicePlugin: void start()
io.flutter.embedding.engine.systemchannels.PlatformChannel$ClipboardContentFormat: io.flutter.embedding.engine.systemchannels.PlatformChannel$ClipboardContentFormat[] values()
com.google.firebase.datatransport.TransportRegistrar: com.google.android.datatransport.TransportFactory lambda$getComponents$0(com.google.firebase.components.ComponentContainer)
androidx.window.layout.ExtensionInterfaceCompat: void onWindowLayoutChangeListenerRemoved(android.app.Activity)
com.dexterous.flutterlocalnotifications.models.NotificationDetails: void readColor(com.dexterous.flutterlocalnotifications.models.NotificationDetails,java.util.Map)
androidx.window.embedding.ActivityFilter: boolean matchesIntent(android.content.Intent)
androidx.window.embedding.EmbeddingAdapter: boolean translateParentMetricsPredicate$lambda-4(androidx.window.embedding.SplitRule,android.view.WindowMetrics)
androidx.lifecycle.ReportFragment$LifecycleCallbacks: ReportFragment$LifecycleCallbacks()
android.support.v4.media.AudioAttributesCompatParcelizer: androidx.media.AudioAttributesCompat read(androidx.versionedparcelable.VersionedParcel)
io.flutter.embedding.engine.FlutterJNI: boolean getIsSoftwareRenderingEnabled()
androidx.window.core.Bounds: int getRight()
androidx.window.layout.HardwareFoldingFeature: android.graphics.Rect getBounds()
com.dexterous.flutterlocalnotifications.models.NotificationDetails: void readStyleInformation(com.dexterous.flutterlocalnotifications.models.NotificationDetails,java.util.Map)
com.dexterous.flutterlocalnotifications.models.NotificationDetails: void readChannelInformation(com.dexterous.flutterlocalnotifications.models.NotificationDetails,java.util.Map)
androidx.window.layout.EmptyDecorator: EmptyDecorator()
io.flutter.embedding.engine.FlutterJNI: void runBundleAndSnapshotFromLibrary(java.lang.String,java.lang.String,java.lang.String,android.content.res.AssetManager,java.util.List)
com.dexterous.flutterlocalnotifications.FlutterLocalNotificationsPlugin: boolean hasInvalidIcon(io.flutter.plugin.common.MethodChannel$Result,java.lang.String)
androidx.window.java.layout.WindowInfoTrackerCallbackAdapter: void addListener(java.util.concurrent.Executor,androidx.core.util.Consumer,kotlinx.coroutines.flow.Flow)
com.google.android.gms.measurement.internal.AppMeasurementDynamiteService: void setDefaultEventParameters(android.os.Bundle)
com.dexterous.flutterlocalnotifications.models.NotificationDetails: void readInboxStyleInformation(com.dexterous.flutterlocalnotifications.models.NotificationDetails,java.util.Map,com.dexterous.flutterlocalnotifications.models.styles.DefaultStyleInformation)
id.flutter.flutter_background_service.Config: Config(android.content.Context)
kotlinx.coroutines.CoroutineStart: kotlinx.coroutines.CoroutineStart[] values()
io.flutter.view.AccessibilityBridge$StringAttributeType: io.flutter.view.AccessibilityBridge$StringAttributeType valueOf(java.lang.String)
androidx.window.layout.SidecarWindowBackend: void access$setGlobalInstance$cp(androidx.window.layout.SidecarWindowBackend)
com.google.firebase.messaging.reporting.MessagingClientEvent$MessageType: com.google.firebase.messaging.reporting.MessagingClientEvent$MessageType valueOf(java.lang.String)
com.google.firebase.messaging.FirebaseMessaging: com.google.firebase.messaging.FirebaseMessaging getInstance(com.google.firebase.FirebaseApp)
androidx.window.embedding.ExtensionEmbeddingBackend$EmbeddingCallbackImpl: void setLastInfo(java.util.List)
androidx.window.layout.HardwareFoldingFeature: boolean isSeparating()
androidx.lifecycle.ReportFragment$LifecycleCallbacks: void onActivityStopped(android.app.Activity)
androidx.window.layout.FoldingFeature$OcclusionType: FoldingFeature$OcclusionType(java.lang.String)
com.google.android.gms.measurement.internal.AppMeasurementDynamiteService: void setCurrentScreen(com.google.android.gms.dynamic.IObjectWrapper,java.lang.String,java.lang.String,long)
id.flutter.flutter_background_service.BackgroundService: BackgroundService()
com.dexterous.flutterlocalnotifications.models.IconSource: com.dexterous.flutterlocalnotifications.models.IconSource[] values()
io.flutter.embedding.engine.FlutterJNI: void setAccessibilityFeatures(int)
com.dexterous.flutterlocalnotifications.FlutterLocalNotificationsPlugin: void setTimeoutAfter(com.dexterous.flutterlocalnotifications.models.NotificationDetails,androidx.core.app.NotificationCompat$Builder)
com.dexterous.flutterlocalnotifications.FlutterLocalNotificationsPlugin: android.content.Intent getLaunchIntent(android.content.Context)
androidx.window.layout.WindowMetricsCalculator$Companion: void overrideDecorator(androidx.window.layout.WindowMetricsCalculatorDecorator)
com.dexterous.flutterlocalnotifications.FlutterLocalNotificationsPlugin: void deleteNotificationChannel(io.flutter.plugin.common.MethodCall,io.flutter.plugin.common.MethodChannel$Result)
com.dexterous.flutterlocalnotifications.models.NotificationDetails: void readSoundInformation(com.dexterous.flutterlocalnotifications.models.NotificationDetails,java.util.Map)
id.flutter.flutter_background_service.FlutterBackgroundServicePlugin$2: FlutterBackgroundServicePlugin$2(id.flutter.flutter_background_service.FlutterBackgroundServicePlugin,io.flutter.plugin.common.EventChannel$EventSink,org.json.JSONObject)
com.dexterous.flutterlocalnotifications.RepeatInterval: RepeatInterval(java.lang.String,int)
androidx.window.layout.ExtensionWindowLayoutInfoBackend$MulticastConsumer: void accept(java.lang.Object)
com.google.android.gms.internal.measurement.zzlm: com.google.android.gms.internal.measurement.zzlm[] values()
androidx.window.core.Bounds: int getTop()
io.flutter.embedding.engine.systemchannels.PlatformChannel$DeviceOrientation: io.flutter.embedding.engine.systemchannels.PlatformChannel$DeviceOrientation[] values()
io.flutter.plugins.firebase.core.FlutterFirebasePluginRegistry: void registerPlugin(java.lang.String,io.flutter.plugins.firebase.core.FlutterFirebasePlugin)
androidx.window.layout.FoldingFeature$State$Companion: FoldingFeature$State$Companion()
androidx.window.layout.WindowLayoutInfo: java.util.List getDisplayFeatures()
androidx.window.layout.FoldingFeature$Orientation$Companion: FoldingFeature$Orientation$Companion(kotlin.jvm.internal.DefaultConstructorMarker)
androidx.window.layout.SidecarAdapter: boolean isEqualSidecarDisplayFeature(androidx.window.sidecar.SidecarDisplayFeature,androidx.window.sidecar.SidecarDisplayFeature)
androidx.window.layout.WindowMetricsCalculatorCompat: android.graphics.Rect computeWindowBoundsQ$window_release(android.app.Activity)
androidx.legacy.content.WakefulBroadcastReceiver: WakefulBroadcastReceiver()
kotlin.jvm.internal.CallableReference: java.util.List getTypeParameters()
androidx.window.layout.ExtensionInterfaceCompat$ExtensionCallbackInterface: void onWindowLayoutChanged(android.app.Activity,androidx.window.layout.WindowLayoutInfo)
com.google.android.datatransport.Priority: com.google.android.datatransport.Priority[] values()
com.google.android.gms.internal.measurement.zzbl: com.google.android.gms.internal.measurement.zzbl[] values()
androidx.window.embedding.ExtensionEmbeddingBackend: java.util.concurrent.locks.ReentrantLock access$getGlobalLock$cp()
com.google.android.gms.internal.measurement.zzob: com.google.android.gms.internal.measurement.zzob[] values()
io.flutter.plugins.firebase.messaging.FlutterFirebaseMessagingInitProvider: FlutterFirebaseMessagingInitProvider()
com.google.android.gms.measurement.internal.AppMeasurementDynamiteService: void clearMeasurementEnabled(long)
com.google.firebase.ktx.FirebaseCommonKtxRegistrar: FirebaseCommonKtxRegistrar()
androidx.window.layout.SidecarWindowBackend: java.util.concurrent.CopyOnWriteArrayList getWindowLayoutChangeCallbacks()
org.threeten.bp.chrono.HijrahEra: java.lang.Object writeReplace()
kotlin.jvm.internal.FunctionReferenceImpl: FunctionReferenceImpl(int,java.lang.Object,java.lang.Class,java.lang.String,java.lang.String,int)
androidx.window.embedding.ActivityStack: boolean contains(android.app.Activity)
com.dexterous.flutterlocalnotifications.FlutterLocalNotificationsPlugin: android.text.Spanned fromHtml(java.lang.String)
io.flutter.embedding.engine.FlutterJNI: void registerTexture(long,io.flutter.embedding.engine.renderer.SurfaceTextureWrapper)
kotlinx.coroutines.channels.BufferOverflow: kotlinx.coroutines.channels.BufferOverflow valueOf(java.lang.String)
androidx.window.embedding.SplitController: androidx.window.embedding.SplitController access$getGlobalInstance$cp()
androidx.window.embedding.EmbeddingAdapter: boolean translateIntentPredicates$lambda-8(java.util.Set,android.content.Intent)
androidx.media.AudioAttributesImplBaseParcelizer: androidx.media.AudioAttributesImplBase read(androidx.versionedparcelable.VersionedParcel)
io.flutter.embedding.engine.FlutterJNI: void lambda$decodeImage$0(long,android.graphics.ImageDecoder,android.graphics.ImageDecoder$ImageInfo,android.graphics.ImageDecoder$Source)
androidx.window.layout.WindowLayoutInfo: WindowLayoutInfo(java.util.List)
androidx.window.embedding.SplitRule: boolean equals(java.lang.Object)
io.flutter.embedding.engine.FlutterOverlaySurface: android.view.Surface getSurface()
com.google.android.datatransport.cct.CctBackendFactory: CctBackendFactory()
androidx.window.embedding.SplitRule$Api30Impl: android.graphics.Rect getBounds(android.view.WindowMetrics)
androidx.media.AudioAttributesCompat: AudioAttributesCompat()
androidx.window.layout.SidecarWindowBackend: void registerLayoutChangeCallback(android.app.Activity,java.util.concurrent.Executor,androidx.core.util.Consumer)
kotlin.jvm.internal.CallableReference: java.lang.Object call(java.lang.Object[])
androidx.window.layout.FoldingFeature: androidx.window.layout.FoldingFeature$Orientation getOrientation()
androidx.window.layout.HardwareFoldingFeature: androidx.window.layout.FoldingFeature$Orientation getOrientation()
io.flutter.embedding.android.FlutterView: void setWindowInfoListenerDisplayFeatures(androidx.window.layout.WindowLayoutInfo)
androidx.lifecycle.ReportFragment$LifecycleCallbacks: void onActivityPostCreated(android.app.Activity,android.os.Bundle)
com.google.firebase.concurrent.UiExecutor: com.google.firebase.concurrent.UiExecutor[] values()
id.flutter.flutter_background_service.BackgroundService: android.os.PowerManager$WakeLock getLock(android.content.Context)
com.dexterous.flutterlocalnotifications.FlutterLocalNotificationsPlugin: void initAndroidThreeTen(android.content.Context)
kotlin.jvm.internal.FunctionReference: boolean isInline()
io.flutter.plugins.pathprovider.Messages$StorageDirectory: io.flutter.plugins.pathprovider.Messages$StorageDirectory valueOf(java.lang.String)
kotlin.coroutines.jvm.internal.BaseContinuationImpl: kotlin.coroutines.Continuation create(kotlin.coroutines.Continuation)
com.google.android.datatransport.runtime.firebase.transport.LogEventDropped$Reason: com.google.android.datatransport.runtime.firebase.transport.LogEventDropped$Reason[] values()
kotlin.coroutines.jvm.internal.BaseContinuationImpl: void resumeWith(java.lang.Object)
androidx.window.layout.SidecarCompat$Companion: android.os.IBinder getActivityWindowToken$window_release(android.app.Activity)
io.flutter.embedding.engine.FlutterJNI: void setPlatformMessageHandler(io.flutter.embedding.engine.dart.PlatformMessageHandler)
com.google.android.datatransport.runtime.scheduling.jobscheduling.SchedulerConfig$Flag: com.google.android.datatransport.runtime.scheduling.jobscheduling.SchedulerConfig$Flag valueOf(java.lang.String)
org.threeten.bp.temporal.ChronoUnit: org.threeten.bp.temporal.ChronoUnit[] values()
org.threeten.bp.chrono.HijrahChronology: java.lang.Object readResolve()
androidx.window.embedding.SplitRule: boolean checkParentMetrics(android.view.WindowMetrics)
id.flutter.flutter_background_service.BackgroundService: void onDestroy()
androidx.window.embedding.SplitController$Companion: void initialize(android.content.Context,int)
com.google.firebase.encoders.proto.Protobuf$IntEncoding: com.google.firebase.encoders.proto.Protobuf$IntEncoding[] values()
com.dexterous.flutterlocalnotifications.models.NotificationChannelDetails: com.dexterous.flutterlocalnotifications.models.NotificationChannelDetails fromNotificationDetails(com.dexterous.flutterlocalnotifications.models.NotificationDetails)
io.flutter.embedding.engine.FlutterJNI: void nativeDispatchSemanticsAction(long,int,int,java.nio.ByteBuffer,int)
com.google.android.gms.measurement.internal.AppMeasurementDynamiteService: void onActivityPaused(com.google.android.gms.dynamic.IObjectWrapper,long)
com.dexterous.flutterlocalnotifications.ScheduledNotificationBootReceiver: void onReceive(android.content.Context,android.content.Intent)
io.flutter.embedding.android.FlutterTextureView: void setRenderSurface(android.view.Surface)
androidx.window.embedding.ActivityRule: boolean equals(java.lang.Object)
android.support.v4.media.AudioAttributesImplApi21Parcelizer: AudioAttributesImplApi21Parcelizer()
com.dexterous.flutterlocalnotifications.RuntimeTypeAdapterFactory: com.dexterous.flutterlocalnotifications.RuntimeTypeAdapterFactory of(java.lang.Class)
androidx.window.core.Bounds: int getLeft()
org.threeten.bp.ZonedDateTime: java.lang.Object writeReplace()
com.google.android.gms.measurement.internal.AppMeasurementDynamiteService: void setSessionTimeoutDuration(long)
org.threeten.bp.chrono.Chronology: java.lang.Object writeReplace()
com.google.firebase.messaging.reporting.MessagingClientEvent$SDKPlatform: com.google.firebase.messaging.reporting.MessagingClientEvent$SDKPlatform valueOf(java.lang.String)
androidx.window.layout.DisplayCompatHelperApi28: DisplayCompatHelperApi28()
io.flutter.embedding.android.RenderMode: io.flutter.embedding.android.RenderMode valueOf(java.lang.String)
androidx.window.layout.FoldingFeature$State$Companion: FoldingFeature$State$Companion(kotlin.jvm.internal.DefaultConstructorMarker)
io.flutter.embedding.engine.FlutterJNI: long performNativeAttach(io.flutter.embedding.engine.FlutterJNI)
androidx.window.layout.ExtensionWindowLayoutInfoBackend: ExtensionWindowLayoutInfoBackend(androidx.window.extensions.layout.WindowLayoutComponent)
androidx.window.embedding.SplitInfo: SplitInfo(androidx.window.embedding.ActivityStack,androidx.window.embedding.ActivityStack,float)
androidx.window.layout.DisplayCompatHelperApi28: int safeInsetRight(android.view.DisplayCutout)
androidx.window.layout.SidecarAdapter: SidecarAdapter()
android.support.v4.media.AudioAttributesImplApi21Parcelizer: void write(androidx.media.AudioAttributesImplApi21,androidx.versionedparcelable.VersionedParcel)
androidx.window.layout.WindowMetricsCalculator$Companion$overrideDecorator$1: java.lang.Object invoke(java.lang.Object)
androidx.window.R$styleable: R$styleable()
com.google.android.gms.measurement.AppMeasurement: java.util.List getConditionalUserProperties(java.lang.String,java.lang.String)
io.flutter.view.AccessibilityViewEmbedder: boolean performAction(int,int,android.os.Bundle)
kotlin.jvm.internal.CallableReference: CallableReference(java.lang.Object,java.lang.Class,java.lang.String,java.lang.String,boolean)
com.google.gson.LongSerializationPolicy: com.google.gson.LongSerializationPolicy valueOf(java.lang.String)
org.threeten.bp.temporal.ChronoField: org.threeten.bp.temporal.ChronoField[] values()
io.flutter.embedding.android.FlutterTextureView: io.flutter.embedding.engine.renderer.FlutterRenderer getAttachedRenderer()
id.flutter.flutter_background_service.BootReceiver: void onReceive(android.content.Context,android.content.Intent)
kotlin.jvm.internal.CallableReference: kotlin.reflect.KDeclarationContainer getOwner()
com.google.firebase.analytics.FirebaseAnalytics: com.google.firebase.analytics.FirebaseAnalytics getInstance(android.content.Context)
com.google.android.gms.measurement.internal.AppMeasurementDynamiteService: void resetAnalyticsData(long)
androidx.window.embedding.EmbeddingAdapter: java.util.function.Predicate translateIntentPredicates(java.util.Set)
io.flutter.embedding.engine.systemchannels.TextInputChannel$TextInputType: io.flutter.embedding.engine.systemchannels.TextInputChannel$TextInputType valueOf(java.lang.String)
org.threeten.bp.chrono.ChronoZonedDateTimeImpl: java.lang.Object writeReplace()
io.flutter.plugin.editing.ImeSyncDeferringInsetsCallback: android.view.WindowInsetsAnimation$Callback getAnimationCallback()
io.flutter.view.AccessibilityBridge$TextDirection: io.flutter.view.AccessibilityBridge$TextDirection valueOf(java.lang.String)
androidx.window.layout.SidecarWindowBackend$WindowLayoutChangeCallbackWrapper: androidx.window.layout.WindowLayoutInfo getLastInfo()
io.flutter.plugins.pathprovider.Messages$StorageDirectory: io.flutter.plugins.pathprovider.Messages$StorageDirectory[] values()
androidx.window.embedding.ExtensionEmbeddingBackend$Companion: ExtensionEmbeddingBackend$Companion()
androidx.window.embedding.ExtensionEmbeddingBackend: void registerSplitListenerForActivity(android.app.Activity,java.util.concurrent.Executor,androidx.core.util.Consumer)
org.threeten.bp.Instant: java.lang.Object writeReplace()
com.dexterous.flutterlocalnotifications.FlutterLocalNotificationsPlugin: void saveScheduledNotifications(android.content.Context,java.util.ArrayList)
io.flutter.plugins.firebase.messaging.FlutterFirebaseMessagingBackgroundService: FlutterFirebaseMessagingBackgroundService()
androidx.window.layout.SidecarWindowBackend$Companion: SidecarWindowBackend$Companion(kotlin.jvm.internal.DefaultConstructorMarker)
org.threeten.bp.OffsetTime: java.lang.Object readResolve()
androidx.window.embedding.SplitRuleParser: android.content.ComponentName buildClassName(java.lang.String,java.lang.CharSequence)
androidx.window.layout.WindowInfoTrackerImpl: WindowInfoTrackerImpl(androidx.window.layout.WindowMetricsCalculator,androidx.window.layout.WindowBackend)
io.flutter.view.AccessibilityViewEmbedder: android.view.View platformViewOfNode(int)
androidx.window.layout.SidecarCompat$DistinctSidecarElementCallback: SidecarCompat$DistinctSidecarElementCallback(androidx.window.layout.SidecarAdapter,androidx.window.sidecar.SidecarInterface$SidecarCallback)
com.google.firebase.concurrent.UiExecutor: com.google.firebase.concurrent.UiExecutor valueOf(java.lang.String)
androidx.core.content.ContextCompat$Api23Impl: android.content.res.ColorStateList getColorStateList(android.content.Context,int)
com.dexterous.flutterlocalnotifications.FlutterLocalNotificationsPlugin: void setSmallIcon(android.content.Context,com.dexterous.flutterlocalnotifications.models.NotificationDetails,androidx.core.app.NotificationCompat$Builder)
androidx.window.layout.WindowMetricsCalculatorDecorator: androidx.window.layout.WindowMetricsCalculator decorate(androidx.window.layout.WindowMetricsCalculator)
io.flutter.embedding.engine.FlutterJNI: void setDeferredComponentManager(io.flutter.embedding.engine.deferredcomponents.DeferredComponentManager)
io.flutter.embedding.engine.FlutterJNI: void nativeRunBundleAndSnapshotFromLibrary(long,java.lang.String,java.lang.String,java.lang.String,android.content.res.AssetManager,java.util.List)
io.flutter.embedding.engine.FlutterJNI: void loadLibrary()
kotlin.jvm.internal.CallableReference: kotlin.reflect.KVisibility getVisibility()
io.flutter.plugin.editing.TextInputPlugin$InputTarget$Type: io.flutter.plugin.editing.TextInputPlugin$InputTarget$Type[] values()
com.google.android.gms.measurement.AppMeasurementService: AppMeasurementService()
org.threeten.bp.chrono.MinguoDate: java.lang.Object writeReplace()
com.google.android.gms.internal.measurement.zzoa: com.google.android.gms.internal.measurement.zzoa[] values()
kotlin.jvm.internal.FunctionReference: kotlin.reflect.KFunction getReflected()
androidx.window.embedding.ExtensionEmbeddingBackend$SplitListenerWrapper: void accept$lambda-1(androidx.window.embedding.ExtensionEmbeddingBackend$SplitListenerWrapper,java.util.List)
com.dexterous.flutterlocalnotifications.RuntimeTypeAdapterFactory: RuntimeTypeAdapterFactory(java.lang.Class,java.lang.String)
androidx.window.layout.SidecarCompat: java.util.Map access$getWindowListenerRegisteredContexts$p(androidx.window.layout.SidecarCompat)
io.flutter.plugin.editing.ImeSyncDeferringInsetsCallback: android.view.WindowInsets access$400(io.flutter.plugin.editing.ImeSyncDeferringInsetsCallback)
androidx.window.embedding.EmbeddingAdapter: java.lang.Object component2(android.util.Pair)
com.dexterous.flutterlocalnotifications.FlutterLocalNotificationsPlugin: void cancelNotification(java.lang.Integer,java.lang.String)
com.google.android.gms.measurement.internal.AppMeasurementDynamiteService: void getCachedAppInstanceId(com.google.android.gms.internal.measurement.zzcf)
androidx.lifecycle.ReportFragment$LifecycleCallbacks: void onActivitySaveInstanceState(android.app.Activity,android.os.Bundle)
io.flutter.plugins.GeneratedPluginRegistrant: void registerWith(io.flutter.embedding.engine.FlutterEngine)
org.threeten.bp.chrono.IsoChronology: java.lang.Object readResolve()
androidx.window.embedding.EmbeddingBackend: java.util.Set getSplitRules()
io.flutter.embedding.engine.FlutterJNI: void onSurfaceChanged(int,int)
com.dexterous.flutterlocalnotifications.models.styles.BigPictureStyleInformation: BigPictureStyleInformation(java.lang.Boolean,java.lang.Boolean,java.lang.String,java.lang.Boolean,java.lang.String,java.lang.Boolean,java.lang.String,com.dexterous.flutterlocalnotifications.BitmapSource,java.lang.String,com.dexterous.flutterlocalnotifications.BitmapSource,java.lang.Boolean)
com.dexterous.flutterlocalnotifications.utils.StringUtils: java.lang.Boolean isNullOrEmpty(java.lang.String)
androidx.window.embedding.ExtensionEmbeddingBackend$EmbeddingCallbackImpl: ExtensionEmbeddingBackend$EmbeddingCallbackImpl(androidx.window.embedding.ExtensionEmbeddingBackend)
io.flutter.embedding.engine.FlutterJNI: void markTextureFrameAvailable(long)
id.flutter.flutter_background_service.R$id: R$id()
io.flutter.view.AccessibilityViewEmbedder: boolean requestSendAccessibilityEvent(android.view.View,android.view.View,android.view.accessibility.AccessibilityEvent)
com.dexterous.flutterlocalnotifications.FlutterLocalNotificationsPlugin: void onReattachedToActivityForConfigChanges(io.flutter.embedding.engine.plugins.activity.ActivityPluginBinding)
io.flutter.plugins.firebase.core.FlutterFirebaseCoreRegistrar: java.util.List getComponents()
com.google.android.gms.measurement.internal.AppMeasurementDynamiteService: void registerOnMeasurementEventListener(com.google.android.gms.internal.measurement.zzci)
com.google.android.gms.measurement.internal.AppMeasurementDynamiteService: void setUserId(java.lang.String,long)
com.google.firebase.datatransport.TransportRegistrar: TransportRegistrar()
androidx.window.layout.SidecarWindowBackend: java.util.concurrent.locks.ReentrantLock access$getGlobalLock$cp()
com.dexterous.flutterlocalnotifications.models.NotificationDetails: java.lang.Long parseLong(java.lang.Object)
kotlin.jvm.internal.CallableReference: java.lang.Object getBoundReceiver()
androidx.window.layout.SidecarCompat$TranslatingCallback: SidecarCompat$TranslatingCallback(androidx.window.layout.SidecarCompat)
io.flutter.plugin.editing.ImeSyncDeferringInsetsCallback: android.view.WindowInsets access$402(io.flutter.plugin.editing.ImeSyncDeferringInsetsCallback,android.view.WindowInsets)
com.dexterous.flutterlocalnotifications.FlutterLocalNotificationsPlugin: void onAttachedToEngine(io.flutter.embedding.engine.plugins.FlutterPlugin$FlutterPluginBinding)
id.flutter.flutter_background_service.Config: boolean isManuallyStopped()
io.flutter.plugin.editing.ImeSyncDeferringInsetsCallback: void remove()
com.dexterous.flutterlocalnotifications.models.NotificationDetails: void readProgressInformation(com.dexterous.flutterlocalnotifications.models.NotificationDetails,java.util.Map)
com.dexterous.flutterlocalnotifications.FlutterLocalNotificationsPlugin: java.lang.String getNextFireDate(com.dexterous.flutterlocalnotifications.models.NotificationDetails)
com.google.android.gms.measurement.internal.AppMeasurementDynamiteService: void initForTests(java.util.Map)
com.google.android.gms.common.api.internal.LifecycleCallback: com.google.android.gms.common.api.internal.LifecycleFragment getChimeraLifecycleFragmentImpl(com.google.android.gms.common.api.internal.LifecycleActivity)
io.flutter.embedding.engine.FlutterJNI: void notifyLowMemoryWarning()
android.support.v4.media.AudioAttributesImplBaseParcelizer: AudioAttributesImplBaseParcelizer()
androidx.window.layout.SidecarCompat: void unregisterComponentCallback(android.app.Activity)
com.google.android.gms.measurement.AppMeasurement: void endAdUnitExposure(java.lang.String)
com.dexterous.flutterlocalnotifications.FlutterLocalNotificationsPlugin: boolean hasInvalidRawSoundResource(io.flutter.plugin.common.MethodChannel$Result,com.dexterous.flutterlocalnotifications.models.NotificationDetails)
io.flutter.embedding.engine.FlutterJNI: boolean isCodePointEmoji(int)
androidx.window.layout.WindowInfoTrackerImpl$windowLayoutInfo$1: WindowInfoTrackerImpl$windowLayoutInfo$1(androidx.window.layout.WindowInfoTrackerImpl,android.app.Activity,kotlin.coroutines.Continuation)
androidx.window.embedding.SplitController: void clearRegisteredRules()
com.google.firebase.analytics.ktx.FirebaseAnalyticsKtxRegistrar: FirebaseAnalyticsKtxRegistrar()
io.flutter.embedding.engine.renderer.SurfaceTextureWrapper: void getTransformMatrix(float[])
kotlin.coroutines.jvm.internal.ContinuationImpl: ContinuationImpl(kotlin.coroutines.Continuation)
kotlin.jvm.internal.CallableReference: boolean isSuspend()
org.threeten.bp.chrono.ThaiBuddhistEra: org.threeten.bp.chrono.ThaiBuddhistEra valueOf(java.lang.String)
io.flutter.embedding.engine.FlutterJNI: void requestDartDeferredLibrary(int)
id.flutter.flutter_background_service.Pipe: Pipe()
androidx.window.layout.WindowMetricsCalculator: androidx.window.layout.WindowMetrics computeCurrentWindowMetrics(android.app.Activity)
androidx.window.layout.ExtensionWindowLayoutInfoBackend$MulticastConsumer: ExtensionWindowLayoutInfoBackend$MulticastConsumer(android.app.Activity)
androidx.lifecycle.ReportFragment$LifecycleCallbacks: void onActivityPostStarted(android.app.Activity)
androidx.window.layout.WindowInfoTrackerImpl$Companion: WindowInfoTrackerImpl$Companion(kotlin.jvm.internal.DefaultConstructorMarker)
io.flutter.embedding.engine.FlutterJNI: void asyncWaitForVsync(long)
androidx.core.content.ContextCompat$Api24Impl: java.io.File getDataDir(android.content.Context)
io.flutter.embedding.engine.FlutterJNI: void onRenderingStopped()
androidx.media.AudioAttributesImplApi26Parcelizer: void write(androidx.media.AudioAttributesImplApi26,androidx.versionedparcelable.VersionedParcel)
androidx.window.core.Bounds: int hashCode()
com.dexterous.flutterlocalnotifications.models.styles.InboxStyleInformation: InboxStyleInformation(java.lang.Boolean,java.lang.Boolean,java.lang.String,java.lang.Boolean,java.lang.String,java.lang.Boolean,java.util.ArrayList,java.lang.Boolean)
id.flutter.flutter_background_service.FlutterBackgroundServicePlugin$2: void run()
com.google.android.gms.measurement.internal.AppMeasurementDynamiteService: void initialize(com.google.android.gms.dynamic.IObjectWrapper,com.google.android.gms.internal.measurement.zzcl,long)
kotlin.jvm.internal.FunctionReference: kotlin.reflect.KCallable computeReflected()
org.threeten.bp.temporal.IsoFields$Unit: org.threeten.bp.temporal.IsoFields$Unit[] values()
com.google.android.gms.measurement.internal.AppMeasurementDynamiteService: void setConditionalUserProperty(android.os.Bundle,long)
io.flutter.plugin.editing.ImeSyncDeferringInsetsCallback$AnimationCallback: void onPrepare(android.view.WindowInsetsAnimation)
com.dexterous.flutterlocalnotifications.FlutterLocalNotificationsPlugin: void show(io.flutter.plugin.common.MethodCall,io.flutter.plugin.common.MethodChannel$Result)
id.flutter.flutter_background_service.BackgroundService$2: BackgroundService$2(id.flutter.flutter_background_service.BackgroundService,org.json.JSONObject)
androidx.window.layout.SidecarAdapter: boolean isEqualSidecarDisplayFeatures(java.util.List,java.util.List)
androidx.lifecycle.ReportFragment$LifecycleCallbacks: void onActivityResumed(android.app.Activity)
kotlin.jvm.internal.CallableReference: kotlin.reflect.KCallable compute()
io.flutter.embedding.engine.FlutterJNI: void nativeRegisterTexture(long,long,java.lang.ref.WeakReference)
androidx.window.layout.FoldingFeature$OcclusionType: java.lang.String toString()
androidx.window.embedding.ExtensionEmbeddingBackend: void unregisterRule(androidx.window.embedding.EmbeddingRule)
androidx.window.embedding.EmbeddingCompat$Companion: java.lang.Integer getExtensionApiLevel()
io.flutter.view.AccessibilityBridge$AccessibilityFeature: io.flutter.view.AccessibilityBridge$AccessibilityFeature[] values()
androidx.window.R$id: R$id()
io.flutter.embedding.engine.renderer.SurfaceTextureWrapper: SurfaceTextureWrapper(android.graphics.SurfaceTexture)
androidx.loader.app.LoaderManagerImpl$LoaderViewModel: LoaderManagerImpl$LoaderViewModel()
com.dexterous.flutterlocalnotifications.models.NotificationChannelAction: com.dexterous.flutterlocalnotifications.models.NotificationChannelAction[] $values()
com.dexterous.flutterlocalnotifications.models.styles.BigTextStyleInformation: BigTextStyleInformation(java.lang.Boolean,java.lang.Boolean,java.lang.String,java.lang.Boolean,java.lang.String,java.lang.Boolean,java.lang.String,java.lang.Boolean)
androidx.media.AudioAttributesImplApi26Parcelizer: androidx.media.AudioAttributesImplApi26 read(androidx.versionedparcelable.VersionedParcel)
com.dexterous.flutterlocalnotifications.RepeatInterval: com.dexterous.flutterlocalnotifications.RepeatInterval valueOf(java.lang.String)
androidx.window.embedding.SplitController: void addSplitListener(android.app.Activity,java.util.concurrent.Executor,androidx.core.util.Consumer)
id.flutter.flutter_background_service.FlutterBackgroundServicePlugin: void receiveData(org.json.JSONObject)
id.flutter.flutter_background_service.BuildConfig: BuildConfig()
id.flutter.flutter_background_service.BackgroundService: int onStartCommand(android.content.Intent,int,int)
androidx.window.embedding.EmbeddingAdapter: androidx.window.embedding.SplitInfo translate(androidx.window.extensions.embedding.SplitInfo)
io.flutter.plugins.firebase.core.FlutterFirebasePluginRegistry: FlutterFirebasePluginRegistry()
com.google.android.datatransport.runtime.scheduling.jobscheduling.JobInfoSchedulerService: JobInfoSchedulerService()
com.google.android.gms.measurement.internal.AppMeasurementDynamiteService: void getCurrentScreenName(com.google.android.gms.internal.measurement.zzcf)
id.flutter.flutter_background_service.BackgroundService$1: BackgroundService$1(id.flutter.flutter_background_service.BackgroundService)
com.dexterous.flutterlocalnotifications.RuntimeTypeAdapterFactory: com.dexterous.flutterlocalnotifications.RuntimeTypeAdapterFactory of(java.lang.Class,java.lang.String)
io.flutter.embedding.engine.FlutterJNI: void nativeDispatchPointerDataPacket(long,java.nio.ByteBuffer,int)
androidx.window.core.Bounds: int getBottom()
androidx.window.layout.WindowMetricsCalculator$-CC: void overrideDecorator(androidx.window.layout.WindowMetricsCalculatorDecorator)
io.flutter.plugin.platform.SingleViewPresentation: io.flutter.plugin.platform.SingleViewPresentation$PresentationState detachState()
com.dexterous.flutterlocalnotifications.FlutterLocalNotificationsPlugin: boolean isValidDrawableResource(android.content.Context,java.lang.String,io.flutter.plugin.common.MethodChannel$Result,java.lang.String)
androidx.window.core.Version$bigInteger$2: Version$bigInteger$2(androidx.window.core.Version)
androidx.window.layout.FoldingFeature$State: FoldingFeature$State(java.lang.String)
io.flutter.embedding.android.FlutterImageView$SurfaceKind: io.flutter.embedding.android.FlutterImageView$SurfaceKind[] values()
io.flutter.embedding.engine.FlutterJNI: void removeIsDisplayingFlutterUiListener(io.flutter.embedding.engine.renderer.FlutterUiDisplayListener)
androidx.window.embedding.SplitRuleParser: androidx.window.embedding.SplitPairFilter parseSplitPairFilter(android.content.Context,android.content.res.XmlResourceParser)
androidx.window.layout.ActivityCompatHelperApi24: ActivityCompatHelperApi24()
com.google.android.gms.common.api.internal.BasePendingResult: BasePendingResult()
androidx.window.layout.SidecarAdapter: java.util.List translate(java.util.List,androidx.window.sidecar.SidecarDeviceState)
androidx.window.embedding.EmbeddingBackend: void unregisterSplitListenerForActivity(androidx.core.util.Consumer)
com.google.android.gms.measurement.internal.AppMeasurementDynamiteService: void onActivityStopped(com.google.android.gms.dynamic.IObjectWrapper,long)
androidx.window.embedding.ExtensionEmbeddingBackend$Companion: boolean isExtensionVersionSupported(java.lang.Integer)
androidx.window.layout.WindowInfoTracker$Companion: void reset()
id.flutter.flutter_background_service.BackgroundService: void onMethodCall(io.flutter.plugin.common.MethodCall,io.flutter.plugin.common.MethodChannel$Result)
io.flutter.view.AccessibilityViewEmbedder: void addChildrenToFlutterNode(android.view.accessibility.AccessibilityNodeInfo,android.view.View,android.view.accessibility.AccessibilityNodeInfo)
androidx.window.layout.HardwareFoldingFeature$Type$Companion: androidx.window.layout.HardwareFoldingFeature$Type getFOLD()
io.flutter.embedding.engine.systemchannels.PlatformChannel$Brightness: io.flutter.embedding.engine.systemchannels.PlatformChannel$Brightness[] values()
androidx.core.content.ContextCompat$Api23Impl: java.lang.String getSystemServiceName(android.content.Context,java.lang.Class)
com.google.android.gms.measurement.internal.AppMeasurementDynamiteService: void unregisterOnMeasurementEventListener(com.google.android.gms.internal.measurement.zzci)
com.example.time_table_maker_app.MainActivity: MainActivity()
com.dexterous.flutterlocalnotifications.BitmapSource: com.dexterous.flutterlocalnotifications.BitmapSource[] $values()
org.threeten.bp.chrono.ThaiBuddhistDate: java.lang.Object writeReplace()
androidx.window.embedding.ActivityFilter: java.lang.String toString()
io.flutter.plugins.GeneratedPluginRegistrant: GeneratedPluginRegistrant()
org.threeten.bp.OffsetDateTime: java.lang.Object writeReplace()
androidx.window.layout.SidecarWindowBackend$Companion: androidx.window.layout.SidecarWindowBackend getInstance(android.content.Context)
io.flutter.embedding.engine.FlutterJNI: void nativeDeferredComponentInstallFailure(int,java.lang.String,boolean)
androidx.window.layout.HardwareFoldingFeature$Type: HardwareFoldingFeature$Type(java.lang.String)
androidx.window.embedding.SplitRuleParser: java.util.Set parseSplitRules$window_release(android.content.Context,int)
androidx.window.embedding.ActivityRule: boolean getAlwaysExpand()
androidx.window.layout.ExtensionInterfaceCompat: void setExtensionCallback(androidx.window.layout.ExtensionInterfaceCompat$ExtensionCallbackInterface)
androidx.window.layout.SidecarAdapter: androidx.window.layout.WindowLayoutInfo translate(androidx.window.sidecar.SidecarWindowLayoutInfo,androidx.window.sidecar.SidecarDeviceState)
io.flutter.embedding.engine.FlutterJNI: void onSurfaceDestroyed()
com.dexterous.flutterlocalnotifications.FlutterLocalNotificationsPlugin: void createNotificationChannel(io.flutter.plugin.common.MethodCall,io.flutter.plugin.common.MethodChannel$Result)
com.dexterous.flutterlocalnotifications.FlutterLocalNotificationsPlugin: android.app.Notification createNotification(android.content.Context,com.dexterous.flutterlocalnotifications.models.NotificationDetails)
androidx.window.layout.SidecarCompat$DistinctElementCallback: void onWindowLayoutChanged(android.app.Activity,androidx.window.layout.WindowLayoutInfo)
com.google.firebase.messaging.threads.ThreadPriority: com.google.firebase.messaging.threads.ThreadPriority[] values()
com.dexterous.flutterlocalnotifications.FlutterLocalNotificationsPlugin: void scheduleNextRepeatingNotification(android.content.Context,com.dexterous.flutterlocalnotifications.models.NotificationDetails)
kotlin.jvm.internal.FunctionReference: boolean isSuspend()
androidx.window.layout.ActivityCompatHelperApi30: android.graphics.Rect currentWindowBounds(android.app.Activity)
android.support.v4.graphics.drawable.IconCompatParcelizer: void write(androidx.core.graphics.drawable.IconCompat,androidx.versionedparcelable.VersionedParcel)
com.dexterous.flutterlocalnotifications.models.DateTimeComponents: com.dexterous.flutterlocalnotifications.models.DateTimeComponents[] $values()
com.dexterous.flutterlocalnotifications.models.Time: com.dexterous.flutterlocalnotifications.models.Time from(java.util.Map)
com.google.android.gms.measurement.AppMeasurement: long generateEventId()
androidx.window.layout.SidecarCompat: androidx.window.sidecar.SidecarInterface getSidecar()
io.flutter.plugin.platform.SingleViewPresentation: void onCreate(android.os.Bundle)
io.flutter.view.AccessibilityViewEmbedder: java.lang.Integer getRecordFlutterId(android.view.View,android.view.accessibility.AccessibilityRecord)
androidx.window.embedding.EmbeddingBackend: void unregisterRule(androidx.window.embedding.EmbeddingRule)
org.threeten.bp.DayOfWeek: org.threeten.bp.DayOfWeek[] values()
com.dexterous.flutterlocalnotifications.FlutterLocalNotificationsPlugin: void registerWith(io.flutter.plugin.common.PluginRegistry$Registrar)
org.threeten.bp.chrono.ThaiBuddhistEra: java.lang.Object writeReplace()
androidx.window.embedding.ExtensionEmbeddingBackend: void unregisterSplitListenerForActivity(androidx.core.util.Consumer)
androidx.window.embedding.SplitPlaceholderRule: SplitPlaceholderRule(java.util.Set,android.content.Intent,int,int,float,int)
io.flutter.plugin.editing.ImeSyncDeferringInsetsCallback: void install()
androidx.window.embedding.SplitPairFilter: SplitPairFilter(android.content.ComponentName,android.content.ComponentName,java.lang.String)
org.threeten.bp.Duration: java.lang.Object writeReplace()
androidx.window.embedding.SplitPlaceholderRule: androidx.window.embedding.SplitPlaceholderRule plus$window_release(androidx.window.embedding.ActivityFilter)
androidx.window.embedding.EmbeddingTranslatingCallback: EmbeddingTranslatingCallback(androidx.window.embedding.EmbeddingInterfaceCompat$EmbeddingCallbackInterface,androidx.window.embedding.EmbeddingAdapter)
id.flutter.flutter_background_service.Pipe: void invoke(org.json.JSONObject)
androidx.window.R: R()
kotlin.coroutines.jvm.internal.ContinuationImpl: kotlin.coroutines.CoroutineContext getContext()
io.flutter.embedding.engine.FlutterJNI: void ensureRunningOnMainThread()
androidx.core.app.RemoteActionCompatParcelizer: RemoteActionCompatParcelizer()
androidx.window.layout.HardwareFoldingFeature$Type: androidx.window.layout.HardwareFoldingFeature$Type access$getFOLD$cp()
androidx.window.layout.HardwareFoldingFeature$Type$Companion: HardwareFoldingFeature$Type$Companion(kotlin.jvm.internal.DefaultConstructorMarker)
com.dexterous.flutterlocalnotifications.models.PersonDetails: PersonDetails(java.lang.Boolean,java.lang.String,com.dexterous.flutterlocalnotifications.models.IconSource,java.lang.Boolean,java.lang.String,java.lang.String,java.lang.String)
androidx.window.layout.WindowInfoTrackerImpl$windowLayoutInfo$1: java.lang.Object invoke(java.lang.Object,java.lang.Object)
androidx.window.layout.WindowMetricsCalculator$Companion$overrideDecorator$1: androidx.window.layout.WindowMetricsCalculator invoke(androidx.window.layout.WindowMetricsCalculator)
org.threeten.bp.format.SignStyle: org.threeten.bp.format.SignStyle valueOf(java.lang.String)
org.threeten.bp.format.DateTimeFormatterBuilder$SettingsParser: org.threeten.bp.format.DateTimeFormatterBuilder$SettingsParser valueOf(java.lang.String)
io.flutter.embedding.android.FlutterActivityLaunchConfigs$BackgroundMode: io.flutter.embedding.android.FlutterActivityLaunchConfigs$BackgroundMode valueOf(java.lang.String)
androidx.window.embedding.MatcherUtils: boolean wildcardMatch(java.lang.String,java.lang.String)
com.dexterous.flutterlocalnotifications.FlutterLocalNotificationsPlugin: void rescheduleNotifications(android.content.Context)
com.dexterous.flutterlocalnotifications.RepeatInterval: com.dexterous.flutterlocalnotifications.RepeatInterval[] $values()
androidx.window.embedding.ExtensionEmbeddingBackend$Companion: androidx.window.embedding.EmbeddingInterfaceCompat initAndVerifyEmbeddingExtension()
io.flutter.embedding.engine.FlutterJNI: void deferredComponentInstallFailure(int,java.lang.String,boolean)
com.google.firebase.installations.FirebaseInstallationsRegistrar: com.google.firebase.installations.FirebaseInstallationsApi lambda$getComponents$0(com.google.firebase.components.ComponentContainer)
com.dexterous.flutterlocalnotifications.models.MessageDetails: MessageDetails(java.lang.String,java.lang.Long,com.dexterous.flutterlocalnotifications.models.PersonDetails,java.lang.String,java.lang.String)
androidx.window.layout.ActivityCompatHelperApi30: ActivityCompatHelperApi30()
androidx.window.embedding.SplitController: java.util.Set getSplitRules()
androidx.window.layout.HardwareFoldingFeature$Companion: void validateFeatureBounds$window_release(androidx.window.core.Bounds)
org.threeten.bp.chrono.MinguoEra: java.lang.Object writeReplace()
androidx.window.embedding.SplitPairRule: SplitPairRule(java.util.Set,boolean,boolean,boolean,int,int,float,int)
androidx.window.embedding.SplitPairFilter: java.lang.String getSecondaryActivityIntentAction()
android.support.v4.media.AudioAttributesCompatParcelizer: AudioAttributesCompatParcelizer()
androidx.window.embedding.ExtensionEmbeddingBackend$Companion: androidx.window.embedding.ExtensionEmbeddingBackend getInstance()
androidx.lifecycle.ReportFragment$LifecycleCallbacks: void onActivityPostResumed(android.app.Activity)
androidx.window.embedding.EmbeddingAdapter: EmbeddingAdapter()
com.google.firebase.messaging.reporting.MessagingClientEvent$Event: com.google.firebase.messaging.reporting.MessagingClientEvent$Event valueOf(java.lang.String)
kotlin.coroutines.jvm.internal.BaseContinuationImpl: void releaseIntercepted()
androidx.window.layout.SidecarCompat: SidecarCompat(android.content.Context)
org.threeten.bp.zone.ZoneOffsetTransitionRule$TimeDefinition: org.threeten.bp.zone.ZoneOffsetTransitionRule$TimeDefinition valueOf(java.lang.String)
io.flutter.embedding.engine.FlutterJNI: void nativeInit(android.content.Context,java.lang.String[],java.lang.String,java.lang.String,java.lang.String,long)
androidx.window.embedding.SplitPairRule: boolean equals(java.lang.Object)
com.dexterous.flutterlocalnotifications.FlutterLocalNotificationsPlugin: void setActivity(android.app.Activity)
androidx.window.embedding.ActivityRule: java.util.Set getFilters()
io.flutter.embedding.engine.systemchannels.TextInputChannel$TextCapitalization: io.flutter.embedding.engine.systemchannels.TextInputChannel$TextCapitalization valueOf(java.lang.String)
org.threeten.bp.YearMonth: java.lang.Object readResolve()
androidx.window.embedding.SplitController: void unregisterRule(androidx.window.embedding.EmbeddingRule)
io.flutter.embedding.android.FlutterImageView: android.media.ImageReader getImageReader()
io.flutter.embedding.engine.FlutterJNI: boolean nativeGetIsSoftwareRenderingEnabled()
com.dexterous.flutterlocalnotifications.FlutterLocalNotificationsPlugin: void showNotification(android.content.Context,com.dexterous.flutterlocalnotifications.models.NotificationDetails)
androidx.window.embedding.ActivityStack: boolean equals(java.lang.Object)
io.flutter.embedding.android.KeyData$Type: io.flutter.embedding.android.KeyData$Type valueOf(java.lang.String)
androidx.window.embedding.ActivityFilter: boolean matchesActivity(android.app.Activity)
com.google.firebase.installations.remote.TokenResult$ResponseCode: com.google.firebase.installations.remote.TokenResult$ResponseCode[] values()
com.google.firebase.installations.FirebaseInstallationsRegistrar: java.util.List getComponents()
io.flutter.plugin.editing.ImeSyncDeferringInsetsCallback: android.view.View access$600(io.flutter.plugin.editing.ImeSyncDeferringInsetsCallback)
androidx.window.layout.SidecarWindowBackend: void getWindowLayoutChangeCallbacks$annotations()
androidx.core.graphics.drawable.IconCompatParcelizer: void write(androidx.core.graphics.drawable.IconCompat,androidx.versionedparcelable.VersionedParcel)
kotlin.coroutines.jvm.internal.SuspendLambda: int getArity()
org.threeten.bp.Period: java.lang.Object readResolve()
androidx.window.core.Version: java.lang.String toString()
com.google.android.gms.measurement.internal.zzha: com.google.android.gms.measurement.internal.zzha[] values()
androidx.window.layout.FoldingFeature: boolean isSeparating()
com.google.android.gms.measurement.internal.AppMeasurementDynamiteService: void getConditionalUserProperties(java.lang.String,java.lang.String,com.google.android.gms.internal.measurement.zzcf)
androidx.window.core.Version: int getMajor()
com.dexterous.flutterlocalnotifications.models.DateTimeComponents: DateTimeComponents(java.lang.String,int)
com.google.android.gms.internal.measurement.zzbn: android.os.IBinder asBinder()
org.threeten.bp.ZoneOffset: java.lang.Object readResolve()
com.google.android.gms.measurement.internal.AppMeasurementDynamiteService: void setDataCollectionEnabled(boolean)
io.flutter.view.AccessibilityViewEmbedder: void setFlutterNodesTranslateBounds(android.view.accessibility.AccessibilityNodeInfo,android.graphics.Rect,android.view.accessibility.AccessibilityNodeInfo)
io.flutter.embedding.android.FlutterView$ZeroSides: io.flutter.embedding.android.FlutterView$ZeroSides valueOf(java.lang.String)
androidx.window.layout.HardwareFoldingFeature: boolean equals(java.lang.Object)
androidx.window.embedding.ExtensionEmbeddingBackend: void access$setGlobalInstance$cp(androidx.window.embedding.ExtensionEmbeddingBackend)
com.dexterous.flutterlocalnotifications.BitmapSource: com.dexterous.flutterlocalnotifications.BitmapSource valueOf(java.lang.String)
com.google.firebase.installations.local.PersistedInstallation$RegistrationStatus: com.google.firebase.installations.local.PersistedInstallation$RegistrationStatus[] values()
com.google.firebase.messaging.EnhancedIntentService: EnhancedIntentService()
androidx.lifecycle.Lifecycle$Event: androidx.lifecycle.Lifecycle$Event valueOf(java.lang.String)
com.dexterous.flutterlocalnotifications.FlutterLocalNotificationsPlugin: com.google.gson.Gson buildGson()
androidx.window.layout.SidecarCompat$registerConfigurationChangeListener$configChangeObserver$1: void onConfigurationChanged(android.content.res.Configuration)
com.dexterous.flutterlocalnotifications.models.NotificationDetails: com.dexterous.flutterlocalnotifications.models.styles.DefaultStyleInformation getDefaultStyleInformation(java.util.Map)
com.dexterous.flutterlocalnotifications.RuntimeTypeAdapterFactory: com.google.gson.TypeAdapter create(com.google.gson.Gson,com.google.gson.reflect.TypeToken)
androidx.window.embedding.SplitPairRule: SplitPairRule(java.util.Set,boolean,boolean,boolean,int,int,float,int,int,kotlin.jvm.internal.DefaultConstructorMarker)
androidx.window.core.Version: java.lang.String getDescription()
kotlin.reflect.KVisibility: kotlin.reflect.KVisibility valueOf(java.lang.String)
io.flutter.embedding.engine.FlutterOverlaySurface: FlutterOverlaySurface(int,android.view.Surface)
com.dexterous.flutterlocalnotifications.FlutterLocalNotificationsPlugin: android.graphics.Bitmap getBitmapFromSource(android.content.Context,java.lang.String,com.dexterous.flutterlocalnotifications.BitmapSource)
androidx.media.AudioAttributesImplApi26Parcelizer: AudioAttributesImplApi26Parcelizer()
androidx.window.layout.HardwareFoldingFeature$Companion: HardwareFoldingFeature$Companion(kotlin.jvm.internal.DefaultConstructorMarker)
id.flutter.flutter_background_service.BackgroundService: android.os.IBinder onBind(android.content.Intent)
androidx.window.embedding.ExtensionEmbeddingBackend: boolean isSplitSupported()
com.dexterous.flutterlocalnotifications.RuntimeTypeAdapterFactory: java.util.Map access$200(com.dexterous.flutterlocalnotifications.RuntimeTypeAdapterFactory)
com.google.android.datatransport.runtime.scheduling.jobscheduling.SchedulerConfig$Flag: com.google.android.datatransport.runtime.scheduling.jobscheduling.SchedulerConfig$Flag[] values()
com.google.firebase.messaging.reporting.MessagingClientEvent$MessageType: com.google.firebase.messaging.reporting.MessagingClientEvent$MessageType[] values()
id.flutter.flutter_background_service.Config: boolean isForeground()
androidx.window.layout.WindowMetricsCalculator$-CC: androidx.window.layout.WindowMetricsCalculator getOrCreate()
androidx.window.embedding.EmbeddingCompat$Companion: androidx.window.extensions.embedding.ActivityEmbeddingComponent embeddingComponent()
io.flutter.view.FlutterCallbackInformation: FlutterCallbackInformation(java.lang.String,java.lang.String,java.lang.String)
io.flutter.view.AccessibilityBridge$Action: io.flutter.view.AccessibilityBridge$Action valueOf(java.lang.String)
id.flutter.flutter_background_service.Pipe: void addListener(id.flutter.flutter_background_service.Pipe$PipeListener)
androidx.window.embedding.EmbeddingCompat: EmbeddingCompat(androidx.window.extensions.embedding.ActivityEmbeddingComponent,androidx.window.embedding.EmbeddingAdapter)
com.dexterous.flutterlocalnotifications.NotificationStyle: NotificationStyle(java.lang.String,int)
com.dexterous.flutterlocalnotifications.FlutterLocalNotificationsPlugin: java.lang.Boolean sendNotificationPayloadMessage(android.content.Intent)
androidx.window.embedding.SplitController: void registerRule(androidx.window.embedding.EmbeddingRule)
org.threeten.bp.chrono.ChronoLocalDateTimeImpl: java.lang.Object writeReplace()
androidx.window.embedding.EmbeddingBackend: void registerSplitListenerForActivity(android.app.Activity,java.util.concurrent.Executor,androidx.core.util.Consumer)
androidx.media.AudioAttributesImplApi21Parcelizer: AudioAttributesImplApi21Parcelizer()
androidx.window.embedding.SplitInfo: androidx.window.embedding.ActivityStack getSecondaryActivityStack()
androidx.window.layout.HardwareFoldingFeature: HardwareFoldingFeature(androidx.window.core.Bounds,androidx.window.layout.HardwareFoldingFeature$Type,androidx.window.layout.FoldingFeature$State)
androidx.window.embedding.ActivityFilter: ActivityFilter(android.content.ComponentName,java.lang.String)
org.threeten.bp.LocalDate: java.lang.Object writeReplace()
com.dexterous.flutterlocalnotifications.models.NotificationDetails: com.dexterous.flutterlocalnotifications.models.NotificationDetails from(java.util.Map)
androidx.window.embedding.SplitPlaceholderRule: android.content.Intent getPlaceholderIntent()
androidx.window.embedding.SplitController: SplitController()
android.support.v4.app.RemoteActionCompatParcelizer: androidx.core.app.RemoteActionCompat read(androidx.versionedparcelable.VersionedParcel)
org.threeten.bp.OffsetDateTime: java.lang.Object readResolve()
com.google.android.gms.internal.measurement.zzkt: com.google.android.gms.internal.measurement.zzkt[] values()
com.google.firebase.installations.remote.InstallationResponse$ResponseCode: com.google.firebase.installations.remote.InstallationResponse$ResponseCode valueOf(java.lang.String)
org.threeten.bp.format.SignStyle: org.threeten.bp.format.SignStyle[] values()
com.dexterous.flutterlocalnotifications.FlutterLocalNotificationsPlugin: void onDetachedFromActivityForConfigChanges()
androidx.core.content.ContextCompat$Api23Impl: java.lang.Object getSystemService(android.content.Context,java.lang.Class)
io.flutter.embedding.engine.FlutterJNI: void nativeMarkTextureFrameAvailable(long,long)
id.flutter.flutter_background_service.Config: long getBackgroundHandle()
io.flutter.embedding.android.FlutterSplashView$SavedState: FlutterSplashView$SavedState(android.os.Parcelable)
androidx.window.embedding.SplitController: boolean isSplitSupported()
io.flutter.embedding.engine.FlutterJNI: void nativeDispatchPlatformMessage(long,java.lang.String,java.nio.ByteBuffer,int,int)
io.flutter.embedding.engine.FlutterJNI: boolean nativeFlutterTextUtilsIsRegionalIndicator(int)
com.dexterous.flutterlocalnotifications.FlutterLocalNotificationsPlugin: void initialize(io.flutter.plugin.common.MethodCall,io.flutter.plugin.common.MethodChannel$Result)
com.google.firebase.installations.FirebaseInstallationsException$Status: com.google.firebase.installations.FirebaseInstallationsException$Status[] values()
androidx.window.layout.WindowBackend: void unregisterLayoutChangeCallback(androidx.core.util.Consumer)
io.flutter.embedding.engine.FlutterJNI: void onDisplayOverlaySurface(int,int,int,int,int)
com.google.android.gms.common.api.PendingResult: PendingResult()
androidx.window.layout.ExtensionWindowLayoutInfoBackend: void registerLayoutChangeCallback(android.app.Activity,java.util.concurrent.Executor,androidx.core.util.Consumer)
androidx.core.content.ContextCompat$Api21Impl: android.graphics.drawable.Drawable getDrawable(android.content.Context,int)
io.flutter.plugin.editing.ImeSyncDeferringInsetsCallback: int access$500(io.flutter.plugin.editing.ImeSyncDeferringInsetsCallback)
androidx.window.layout.SidecarAdapter$Companion: androidx.window.layout.DisplayFeature translate$window_release(androidx.window.sidecar.SidecarDisplayFeature,androidx.window.sidecar.SidecarDeviceState)
androidx.window.java.layout.WindowInfoTrackerCallbackAdapter: void addWindowLayoutInfoListener(android.app.Activity,java.util.concurrent.Executor,androidx.core.util.Consumer)
com.google.android.gms.measurement.internal.AppMeasurementDynamiteService: void logEventAndBundle(java.lang.String,java.lang.String,android.os.Bundle,com.google.android.gms.internal.measurement.zzcf,long)
androidx.window.embedding.SplitController$Companion: SplitController$Companion()
androidx.window.layout.WindowBackend: void registerLayoutChangeCallback(android.app.Activity,java.util.concurrent.Executor,androidx.core.util.Consumer)
com.dexterous.flutterlocalnotifications.utils.BooleanUtils: BooleanUtils()
androidx.window.layout.FoldingFeature: androidx.window.layout.FoldingFeature$OcclusionType getOcclusionType()
io.flutter.embedding.engine.FlutterJNI: boolean nativeFlutterTextUtilsIsEmojiModifierBase(int)
com.google.android.gms.measurement.internal.AppMeasurementDynamiteService: void setMinimumSessionDuration(long)
androidx.window.java.layout.WindowInfoTrackerCallbackAdapter$addListener$1$1: java.lang.Object invoke(kotlinx.coroutines.CoroutineScope,kotlin.coroutines.Continuation)
id.flutter.flutter_background_service.Pipe: void removeListener(id.flutter.flutter_background_service.Pipe$PipeListener)
androidx.window.layout.FoldingFeature$Orientation$Companion: FoldingFeature$Orientation$Companion()
androidx.window.layout.SidecarWindowBackend$WindowLayoutChangeCallbackWrapper: androidx.core.util.Consumer getCallback()
androidx.window.embedding.ExtensionEmbeddingBackend$SplitListenerWrapper: ExtensionEmbeddingBackend$SplitListenerWrapper(android.app.Activity,java.util.concurrent.Executor,androidx.core.util.Consumer)
androidx.window.embedding.SplitRule: int getLayoutDirection()
androidx.window.layout.WindowLayoutInfo: int hashCode()
io.flutter.view.AccessibilityBridge$Flag: io.flutter.view.AccessibilityBridge$Flag[] values()
org.threeten.bp.chrono.HijrahEra: org.threeten.bp.chrono.HijrahEra valueOf(java.lang.String)
org.threeten.bp.chrono.JapaneseDate: void readObject(java.io.ObjectInputStream)
com.dexterous.flutterlocalnotifications.FlutterLocalNotificationsPlugin: void zonedSchedule(io.flutter.plugin.common.MethodCall,io.flutter.plugin.common.MethodChannel$Result)
com.google.android.gms.measurement.AppMeasurement: java.lang.String getCurrentScreenName()
io.flutter.embedding.android.FlutterSplashView$SavedState: void writeToParcel(android.os.Parcel,int)
org.threeten.bp.zone.ZoneOffsetTransitionRule: java.lang.Object writeReplace()
androidx.window.layout.SidecarAdapter$Companion: int getRawSidecarDevicePosture(androidx.window.sidecar.SidecarDeviceState)
kotlinx.coroutines.scheduling.CoroutineScheduler$WorkerState: kotlinx.coroutines.scheduling.CoroutineScheduler$WorkerState valueOf(java.lang.String)
androidx.window.layout.WindowMetricsCalculatorCompat: android.graphics.Rect computeWindowBoundsN$window_release(android.app.Activity)
kotlin.jvm.internal.FunctionReference: boolean isOperator()
androidx.window.core.Version: int getPatch()
androidx.window.layout.SidecarWindowBackend$Companion: boolean isSidecarVersionSupported(androidx.window.core.Version)
androidx.window.layout.WindowMetrics: int hashCode()
io.flutter.plugins.firebase.core.FlutterFirebasePluginRegistry: void lambda$didReinitializeFirebaseCore$1(com.google.android.gms.tasks.TaskCompletionSource)
com.google.android.gms.cloudmessaging.CloudMessagingReceiver: CloudMessagingReceiver()
id.flutter.flutter_background_service.R$layout: R$layout()
androidx.window.layout.SidecarAdapter: java.lang.String access$getTAG$cp()
io.flutter.embedding.android.TransparencyMode: io.flutter.embedding.android.TransparencyMode valueOf(java.lang.String)
androidx.window.embedding.SplitPlaceholderRule: SplitPlaceholderRule(java.util.Set,android.content.Intent,int,int,float,int,int,kotlin.jvm.internal.DefaultConstructorMarker)
androidx.window.embedding.EmbeddingTranslatingCallback: void accept(java.lang.Object)
io.flutter.embedding.android.FlutterSplashView$SavedState: java.lang.String access$600(io.flutter.embedding.android.FlutterSplashView$SavedState)
io.flutter.view.AccessibilityViewEmbedder: boolean onAccessibilityHoverEvent(int,android.view.MotionEvent)
com.google.android.datatransport.Priority: com.google.android.datatransport.Priority valueOf(java.lang.String)
com.google.android.gms.measurement.internal.AppMeasurementDynamiteService: void getGmpAppId(com.google.android.gms.internal.measurement.zzcf)
com.dexterous.flutterlocalnotifications.models.NotificationDetails: void readLargeIconInformation(com.dexterous.flutterlocalnotifications.models.NotificationDetails,java.util.Map)
androidx.media.AudioAttributesImplBase: AudioAttributesImplBase()
androidx.window.layout.SidecarCompat$DistinctSidecarElementCallback: void onWindowLayoutChanged(android.os.IBinder,androidx.window.sidecar.SidecarWindowLayoutInfo)
com.google.android.datatransport.cct.internal.QosTier: com.google.android.datatransport.cct.internal.QosTier[] values()
com.google.android.gms.internal.measurement.zzbn: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)
androidx.window.layout.WindowMetricsCalculatorCompat: int getNavigationBarHeight(android.content.Context)
com.dexterous.flutterlocalnotifications.models.styles.MessagingStyleInformation: MessagingStyleInformation(com.dexterous.flutterlocalnotifications.models.PersonDetails,java.lang.String,java.lang.Boolean,java.util.ArrayList,java.lang.Boolean,java.lang.Boolean)
io.flutter.embedding.engine.FlutterJNI: java.lang.String[] computePlatformResolvedLocale(java.lang.String[])
androidx.window.core.Bounds: java.lang.String toString()
androidx.window.layout.SidecarCompat: void onWindowLayoutChangeListenerRemoved(android.app.Activity)
com.dexterous.flutterlocalnotifications.models.NotificationChannelGroupDetails: NotificationChannelGroupDetails()
org.threeten.bp.chrono.IsoEra: org.threeten.bp.chrono.IsoEra valueOf(java.lang.String)
io.flutter.embedding.engine.systemchannels.PlatformChannel$SoundType: io.flutter.embedding.engine.systemchannels.PlatformChannel$SoundType valueOf(java.lang.String)
io.flutter.embedding.engine.FlutterJNI: void nativePrefetchDefaultFontManager()
io.flutter.embedding.engine.FlutterOverlaySurface: int getId()
com.google.android.gms.measurement.internal.AppMeasurementDynamiteService: void logEvent(java.lang.String,java.lang.String,android.os.Bundle,boolean,boolean,long)
com.google.android.gms.measurement.internal.AppMeasurementDynamiteService: void getMaxUserProperties(java.lang.String,com.google.android.gms.internal.measurement.zzcf)
androidx.window.embedding.ExtensionEmbeddingBackend$SplitListenerWrapper: void accept(java.util.List)
androidx.media.AudioAttributesCompatParcelizer: AudioAttributesCompatParcelizer()
com.google.android.gms.measurement.AppMeasurement: java.lang.String getGmpAppId()
androidx.window.layout.HardwareFoldingFeature$Type: androidx.window.layout.HardwareFoldingFeature$Type access$getHINGE$cp()
org.threeten.bp.LocalTime: java.lang.Object readResolve()
androidx.core.content.ContextCompat$Api28Impl: java.util.concurrent.Executor getMainExecutor(android.content.Context)
androidx.window.core.Version: boolean equals(java.lang.Object)
io.flutter.embedding.engine.FlutterJNI: void updateRefreshRate()
com.dexterous.flutterlocalnotifications.models.NotificationChannelDetails: NotificationChannelDetails()
androidx.window.embedding.ActivityRule: int hashCode()
androidx.window.layout.WindowInfoTracker$Companion: void overrideDecorator(androidx.window.layout.WindowInfoTrackerDecorator)
androidx.window.layout.SidecarAdapter: boolean isEqualSidecarDeviceState(androidx.window.sidecar.SidecarDeviceState,androidx.window.sidecar.SidecarDeviceState)
io.flutter.embedding.engine.FlutterJNI: void attachToNative()
com.dexterous.flutterlocalnotifications.SoundSource: com.dexterous.flutterlocalnotifications.SoundSource[] $values()
com.dexterous.flutterlocalnotifications.FlutterLocalNotificationsPlugin: void setCategory(com.dexterous.flutterlocalnotifications.models.NotificationDetails,androidx.core.app.NotificationCompat$Builder)
com.dexterous.flutterlocalnotifications.ScheduledNotificationReceiver: ScheduledNotificationReceiver()
kotlin.jvm.internal.CallableReference: java.lang.String getSignature()
id.flutter.flutter_background_service.FlutterBackgroundServicePlugin: void registerWith(io.flutter.embedding.engine.FlutterEngine)
androidx.window.layout.ActivityCompatHelperApi24: boolean isInMultiWindowMode(android.app.Activity)
id.flutter.flutter_background_service.BackgroundService: void onCreate()
io.flutter.embedding.engine.FlutterJNI: void nativeSurfaceChanged(long,int,int)
org.threeten.bp.chrono.Chronology: java.lang.Object readResolve()
com.google.firebase.messaging.reporting.MessagingClientEvent$Event: com.google.firebase.messaging.reporting.MessagingClientEvent$Event[] values()
id.flutter.flutter_background_service.Config: void setInitialNotificationContent(java.lang.String)
io.flutter.embedding.engine.FlutterJNI: void ensureAttachedToNative()
com.dexterous.flutterlocalnotifications.FlutterLocalNotificationsPlugin: boolean hasInvalidLedDetails(io.flutter.plugin.common.MethodChannel$Result,com.dexterous.flutterlocalnotifications.models.NotificationDetails)
com.dexterous.flutterlocalnotifications.FlutterLocalNotificationsPlugin: void onMethodCall(io.flutter.plugin.common.MethodCall,io.flutter.plugin.common.MethodChannel$Result)
io.flutter.embedding.engine.renderer.FlutterRenderer$DisplayFeatureType: io.flutter.embedding.engine.renderer.FlutterRenderer$DisplayFeatureType[] values()
io.flutter.embedding.engine.FlutterJNI: void onEndFrame()
com.dexterous.flutterlocalnotifications.FlutterLocalNotificationsPlugin: void onDetachedFromEngine(io.flutter.embedding.engine.plugins.FlutterPlugin$FlutterPluginBinding)
androidx.window.embedding.SplitRule: int hashCode()
androidx.media.AudioAttributesImplApi21Parcelizer: androidx.media.AudioAttributesImplApi21 read(androidx.versionedparcelable.VersionedParcel)
kotlin.jvm.internal.FunctionReference: kotlin.reflect.KCallable getReflected()
com.google.android.datatransport.runtime.firebase.transport.LogEventDropped$Reason: com.google.android.datatransport.runtime.firebase.transport.LogEventDropped$Reason valueOf(java.lang.String)
androidx.window.layout.ExtensionInterfaceCompat: void onWindowLayoutChangeListenerAdded(android.app.Activity)
androidx.window.embedding.ExtensionEmbeddingBackend$EmbeddingCallbackImpl: java.util.List getLastInfo()
androidx.window.layout.SidecarCompat$FirstAttachAdapter: void onViewDetachedFromWindow(android.view.View)
com.google.android.gms.measurement.internal.AppMeasurementDynamiteService: void setConsentThirdParty(android.os.Bundle,long)
androidx.window.layout.SidecarAdapter$Companion: void setSidecarDevicePosture(androidx.window.sidecar.SidecarDeviceState,int)
com.dexterous.flutterlocalnotifications.NotificationStyle: com.dexterous.flutterlocalnotifications.NotificationStyle valueOf(java.lang.String)
com.dexterous.flutterlocalnotifications.models.NotificationDetails: void readGroupingInformation(com.dexterous.flutterlocalnotifications.models.NotificationDetails,java.util.Map)
io.flutter.view.AccessibilityBridge$TextDirection: io.flutter.view.AccessibilityBridge$TextDirection[] values()
androidx.window.layout.FoldingFeature$Orientation: FoldingFeature$Orientation(java.lang.String)
io.flutter.embedding.engine.FlutterJNI: void nativeLoadDartDeferredLibrary(long,int,java.lang.String[])
androidx.window.layout.SidecarCompat$FirstAttachAdapter: SidecarCompat$FirstAttachAdapter(androidx.window.layout.SidecarCompat,android.app.Activity)
androidx.window.embedding.EmbeddingCompat: void setEmbeddingCallback(androidx.window.embedding.EmbeddingInterfaceCompat$EmbeddingCallbackInterface)
io.flutter.embedding.engine.FlutterJNI: void nativeSetAccessibilityFeatures(long,int)
androidx.core.graphics.drawable.IconCompat: IconCompat()
id.flutter.flutter_background_service.FlutterBackgroundServicePlugin: FlutterBackgroundServicePlugin()
io.flutter.embedding.engine.FlutterJNI: void nativeNotifyLowMemoryWarning(long)
androidx.window.layout.WindowMetricsCalculator$Companion$decorator$1: java.lang.Object invoke(java.lang.Object)
androidx.window.core.Version: Version(int,int,int,java.lang.String,kotlin.jvm.internal.DefaultConstructorMarker)
androidx.window.layout.SidecarWindowBackend: androidx.window.layout.SidecarWindowBackend access$getGlobalInstance$cp()
io.flutter.embedding.android.FlutterView: io.flutter.embedding.android.FlutterImageView getCurrentImageSurface()
androidx.window.core.Bounds: Bounds(android.graphics.Rect)
com.dexterous.flutterlocalnotifications.models.ScheduledNotificationRepeatFrequency: com.dexterous.flutterlocalnotifications.models.ScheduledNotificationRepeatFrequency[] $values()
io.flutter.plugin.editing.ImeSyncDeferringInsetsCallback$AnimationCallback: android.view.WindowInsets onProgress(android.view.WindowInsets,java.util.List)
id.flutter.flutter_background_service.WatchdogReceiver: void onReceive(android.content.Context,android.content.Intent)
androidx.window.layout.HardwareFoldingFeature: int hashCode()
io.flutter.plugin.editing.TextInputPlugin$InputTarget$Type: io.flutter.plugin.editing.TextInputPlugin$InputTarget$Type valueOf(java.lang.String)
org.threeten.bp.chrono.JapaneseDate: java.lang.Object writeReplace()
io.flutter.plugins.firebase.messaging.FlutterFirebaseMessagingService: FlutterFirebaseMessagingService()
kotlin.jvm.internal.CallableReference: CallableReference()
id.flutter.flutter_background_service.R$attr: R$attr()
kotlin.jvm.internal.CallableReference: java.util.List getAnnotations()
id.flutter.flutter_background_service.FlutterBackgroundServicePlugin: void access$000(id.flutter.flutter_background_service.FlutterBackgroundServicePlugin,org.json.JSONObject)
io.flutter.view.AccessibilityBridge$StringAttributeType: io.flutter.view.AccessibilityBridge$StringAttributeType[] values()
androidx.window.embedding.ExtensionEmbeddingBackend: java.util.Set getSplitRules()
io.flutter.embedding.engine.FlutterJNI: void detachFromNativeAndReleaseResources()
androidx.window.java.layout.WindowInfoTrackerCallbackAdapter: kotlinx.coroutines.flow.Flow windowLayoutInfo(android.app.Activity)
androidx.window.core.Version: androidx.window.core.Version access$getVERSION_0_1$cp()
androidx.window.layout.HardwareFoldingFeature: androidx.window.layout.FoldingFeature$State getState()
io.flutter.embedding.engine.FlutterJNI: void nativeSurfaceCreated(long,android.view.Surface)
id.flutter.flutter_background_service.BackgroundService$1: void onReceived(org.json.JSONObject)
androidx.window.layout.ExtensionWindowLayoutInfoBackend$MulticastConsumer: void accept(androidx.window.extensions.layout.WindowLayoutInfo)
com.dexterous.flutterlocalnotifications.models.IconSource: IconSource(java.lang.String,int)
androidx.window.layout.DisplayCompatHelperApi28: int safeInsetLeft(android.view.DisplayCutout)
com.google.firebase.ktx.FirebaseCommonKtxRegistrar: java.util.List getComponents()
io.flutter.embedding.engine.renderer.SurfaceTextureWrapper: void detachFromGLContext()
id.flutter.flutter_background_service.R: R()
io.flutter.plugins.firebase.core.FlutterFirebasePluginRegistry: void lambda$getPluginConstantsForFirebaseApp$0(com.google.firebase.FirebaseApp,com.google.android.gms.tasks.TaskCompletionSource)
io.flutter.embedding.android.FlutterSplashView$SavedState: android.os.Bundle access$700(io.flutter.embedding.android.FlutterSplashView$SavedState)
androidx.window.core.Version$Companion: androidx.window.core.Version parse(java.lang.String)
io.flutter.embedding.engine.FlutterJNI: void updateSemantics(java.nio.ByteBuffer,java.lang.String[],java.nio.ByteBuffer[])
com.dexterous.flutterlocalnotifications.FlutterLocalNotificationsPlugin: boolean hasInvalidLargeIcon(io.flutter.plugin.common.MethodChannel$Result,java.lang.String,com.dexterous.flutterlocalnotifications.BitmapSource)
com.dexterous.flutterlocalnotifications.FlutterLocalNotificationsPlugin: long calculateRepeatIntervalMilliseconds(com.dexterous.flutterlocalnotifications.models.NotificationDetails)
io.flutter.embedding.engine.renderer.SurfaceTextureWrapper: android.graphics.SurfaceTexture surfaceTexture()
id.flutter.flutter_background_service.Config: void setAutoStartOnBoot(boolean)
androidx.window.embedding.SplitRuleParser: SplitRuleParser()
io.flutter.embedding.engine.renderer.FlutterRenderer$DisplayFeatureType: io.flutter.embedding.engine.renderer.FlutterRenderer$DisplayFeatureType valueOf(java.lang.String)
com.dexterous.flutterlocalnotifications.FlutterLocalNotificationsPlugin: void setInboxStyle(com.dexterous.flutterlocalnotifications.models.NotificationDetails,androidx.core.app.NotificationCompat$Builder)
org.threeten.bp.chrono.IsoEra: org.threeten.bp.chrono.IsoEra[] values()
org.threeten.bp.chrono.HijrahDate: java.lang.Object readResolve()
androidx.window.layout.WindowInfoTrackerImpl$Companion: WindowInfoTrackerImpl$Companion()
androidx.window.embedding.SplitController: java.util.concurrent.locks.ReentrantLock access$getGlobalLock$cp()
com.google.firebase.messaging.FirebaseMessagingRegistrar: java.util.List getComponents()
androidx.window.java.layout.WindowInfoTrackerCallbackAdapter: void removeListener(androidx.core.util.Consumer)
io.flutter.view.AccessibilityViewEmbedder: void cacheVirtualIdMappings(android.view.View,int,int)
com.google.android.gms.measurement.AppMeasurement: int getMaxUserProperties(java.lang.String)
io.flutter.plugin.editing.ImeSyncDeferringInsetsCallback: boolean access$200(io.flutter.plugin.editing.ImeSyncDeferringInsetsCallback)
io.flutter.plugins.firebase.core.FlutterFirebasePluginRegistry: com.google.android.gms.tasks.Task didReinitializeFirebaseCore()
androidx.window.embedding.EmbeddingCompat$Companion: EmbeddingCompat$Companion(kotlin.jvm.internal.DefaultConstructorMarker)
androidx.window.embedding.ActivityFilter: boolean equals(java.lang.Object)
id.flutter.flutter_background_service.FlutterBackgroundServicePlugin: boolean isServiceRunning()
androidx.window.embedding.ExtensionEmbeddingBackend: void getSplitChangeCallbacks$annotations()
androidx.window.layout.WindowMetrics: WindowMetrics(android.graphics.Rect)
androidx.window.core.Version: androidx.window.core.Version access$getVERSION_1_0$cp()
androidx.window.layout.WindowInfoTrackerImpl$windowLayoutInfo$1: void invokeSuspend$lambda-0(kotlinx.coroutines.channels.Channel,androidx.window.layout.WindowLayoutInfo)
androidx.window.java.layout.WindowInfoTrackerCallbackAdapter$addListener$1$1: kotlin.coroutines.Continuation create(java.lang.Object,kotlin.coroutines.Continuation)
id.flutter.flutter_background_service.FlutterBackgroundServicePlugin: void onCancel(java.lang.Object)
org.threeten.bp.format.DateTimeFormatterBuilder$SettingsParser: org.threeten.bp.format.DateTimeFormatterBuilder$SettingsParser[] values()
io.flutter.embedding.engine.FlutterJNI: boolean isCodePointVariantSelector(int)
com.google.android.datatransport.cct.internal.ClientInfo$ClientType: com.google.android.datatransport.cct.internal.ClientInfo$ClientType valueOf(java.lang.String)
androidx.window.layout.SidecarCompat: SidecarCompat(androidx.window.sidecar.SidecarInterface,androidx.window.layout.SidecarAdapter)
kotlin.jvm.internal.CallableReference: java.lang.Object callBy(java.util.Map)
id.flutter.flutter_background_service.BackgroundService: void onTaskRemoved(android.content.Intent)
androidx.window.embedding.SplitPlaceholderRule: java.util.Set getFilters()
androidx.window.embedding.SplitPairFilter: java.lang.String toString()
org.threeten.bp.chrono.HijrahEra: org.threeten.bp.chrono.HijrahEra[] values()
com.google.android.gms.measurement.internal.AppMeasurementDynamiteService: void performAction(android.os.Bundle,com.google.android.gms.internal.measurement.zzcf,long)
io.flutter.embedding.engine.FlutterJNI: void ensureNotAttachedToNative()
androidx.lifecycle.ReportFragment$LifecycleCallbacks: void onActivityCreated(android.app.Activity,android.os.Bundle)
com.google.android.gms.measurement.internal.AppMeasurementDynamiteService: void setConsent(android.os.Bundle,long)
io.flutter.embedding.android.FlutterImageView: io.flutter.embedding.engine.renderer.FlutterRenderer getAttachedRenderer()
io.flutter.embedding.engine.plugins.lifecycle.HiddenLifecycleReference: HiddenLifecycleReference(androidx.lifecycle.Lifecycle)
com.google.android.datatransport.cct.internal.NetworkConnectionInfo$NetworkType: com.google.android.datatransport.cct.internal.NetworkConnectionInfo$NetworkType valueOf(java.lang.String)
androidx.window.embedding.SplitPairRule: int hashCode()
androidx.window.embedding.ActivityFilter: java.lang.String getIntentAction()
androidx.window.embedding.SplitInfo: java.lang.String toString()
id.flutter.flutter_background_service.R$styleable: R$styleable()
io.flutter.embedding.engine.renderer.SurfaceTextureWrapper: void updateTexImage()
androidx.window.core.Version$bigInteger$2: java.math.BigInteger invoke()
androidx.window.layout.SidecarWindowBackend: SidecarWindowBackend(androidx.window.layout.ExtensionInterfaceCompat)
androidx.window.embedding.SplitPlaceholderRule: int hashCode()
android.support.v4.graphics.drawable.IconCompatParcelizer: IconCompatParcelizer()
androidx.window.embedding.EmbeddingCompat: EmbeddingCompat()
androidx.window.embedding.ExtensionEmbeddingBackend: ExtensionEmbeddingBackend(androidx.window.embedding.EmbeddingInterfaceCompat)
com.dexterous.flutterlocalnotifications.RuntimeTypeAdapterFactory: com.dexterous.flutterlocalnotifications.RuntimeTypeAdapterFactory registerSubtype(java.lang.Class)
androidx.window.layout.WindowInfoTracker$-CC: void overrideDecorator(androidx.window.layout.WindowInfoTrackerDecorator)
com.dexterous.flutterlocalnotifications.models.NotificationChannelAction: com.dexterous.flutterlocalnotifications.models.NotificationChannelAction[] values()
androidx.window.layout.SidecarCompat: void registerConfigurationChangeListener(android.app.Activity)
io.flutter.embedding.engine.FlutterJNI: void updateJavaAssetManager(android.content.res.AssetManager,java.lang.String)
android.support.v4.media.AudioAttributesImplApi26Parcelizer: void write(androidx.media.AudioAttributesImplApi26,androidx.versionedparcelable.VersionedParcel)
androidx.window.layout.WindowMetricsCalculator$Companion$overrideDecorator$1: WindowMetricsCalculator$Companion$overrideDecorator$1(java.lang.Object)
id.flutter.flutter_background_service.R$integer: R$integer()
com.dexterous.flutterlocalnotifications.FlutterLocalNotificationsPlugin: void onAttachedToActivity(io.flutter.embedding.engine.plugins.activity.ActivityPluginBinding)
com.google.firebase.messaging.reporting.MessagingClientEvent$SDKPlatform: com.google.firebase.messaging.reporting.MessagingClientEvent$SDKPlatform[] values()
android.support.v4.media.AudioAttributesImplApi21Parcelizer: androidx.media.AudioAttributesImplApi21 read(androidx.versionedparcelable.VersionedParcel)
com.google.android.gms.internal.measurement.zzcb: com.google.android.gms.internal.measurement.zzcc asInterface(android.os.IBinder)
com.dexterous.flutterlocalnotifications.FlutterLocalNotificationsPlugin: void scheduleNotification(android.content.Context,com.dexterous.flutterlocalnotifications.models.NotificationDetails,java.lang.Boolean)
org.threeten.bp.Instant: java.lang.Object readResolve()
androidx.window.embedding.SplitRuleParser: java.util.Set parseSplitXml(android.content.Context,int)
com.dexterous.flutterlocalnotifications.FlutterLocalNotificationsPlugin: void removeNotificationFromCache(android.content.Context,java.lang.Integer)
androidx.core.graphics.drawable.IconCompatParcelizer: androidx.core.graphics.drawable.IconCompat read(androidx.versionedparcelable.VersionedParcel)
androidx.lifecycle.ReportFragment$LifecycleCallbacks: void onActivityPaused(android.app.Activity)
androidx.lifecycle.ViewModel: ViewModel()
androidx.window.core.Bounds: int getWidth()
com.dexterous.flutterlocalnotifications.models.ScheduledNotificationRepeatFrequency: ScheduledNotificationRepeatFrequency(java.lang.String,int)
androidx.window.embedding.SplitController: void access$setGlobalInstance$cp(androidx.window.embedding.SplitController)
io.flutter.embedding.engine.FlutterJNI: void dispatchEmptyPlatformMessage(java.lang.String,int)
com.google.android.gms.measurement.internal.AppMeasurementDynamiteService: void getTestFlag(com.google.android.gms.internal.measurement.zzcf,int)
com.dexterous.flutterlocalnotifications.FlutterLocalNotificationsPlugin: void setVibrationPattern(com.dexterous.flutterlocalnotifications.models.NotificationDetails,androidx.core.app.NotificationCompat$Builder)
androidx.window.layout.HardwareFoldingFeature$Type$Companion: HardwareFoldingFeature$Type$Companion()
com.google.android.gms.measurement.internal.AppMeasurementDynamiteService: void onActivitySaveInstanceState(com.google.android.gms.dynamic.IObjectWrapper,com.google.android.gms.internal.measurement.zzcf,long)
io.flutter.embedding.android.FlutterSplashView$SavedState: FlutterSplashView$SavedState(android.os.Parcel)
androidx.window.embedding.ActivityRule: ActivityRule(java.util.Set,boolean,int,kotlin.jvm.internal.DefaultConstructorMarker)
com.google.android.datatransport.runtime.backends.TransportBackendDiscovery: TransportBackendDiscovery()
io.flutter.embedding.engine.mutatorsstack.FlutterMutatorsStack: void pushClipRect(int,int,int,int)
androidx.window.core.Version: androidx.window.core.Version access$getCURRENT$cp()
com.google.firebase.iid.FirebaseInstanceIdReceiver: FirebaseInstanceIdReceiver()
androidx.window.layout.SidecarCompat$TranslatingCallback: void onDeviceStateChanged(androidx.window.sidecar.SidecarDeviceState)
com.google.android.gms.measurement.AppMeasurement: void beginAdUnitExposure(java.lang.String)
com.dexterous.flutterlocalnotifications.FlutterLocalNotificationsPlugin: void setStyle(android.content.Context,com.dexterous.flutterlocalnotifications.models.NotificationDetails,androidx.core.app.NotificationCompat$Builder)
androidx.window.embedding.SplitPlaceholderRule: boolean equals(java.lang.Object)
io.flutter.embedding.engine.FlutterJNI: void dispatchSemanticsAction(int,io.flutter.view.AccessibilityBridge$Action,java.lang.Object)
com.dexterous.flutterlocalnotifications.FlutterLocalNotificationsPlugin: long calculateNextNotificationTrigger(long,long)
androidx.window.embedding.SplitController: void access$setStaticSplitRules(androidx.window.embedding.SplitController,java.util.Set)
com.google.android.gms.measurement.AppMeasurement: java.lang.String getCurrentScreenClass()
androidx.window.layout.WindowMetricsCalculatorCompat: android.graphics.Rect computeWindowBoundsP$window_release(android.app.Activity)
org.threeten.bp.Month: org.threeten.bp.Month[] values()
io.flutter.embedding.engine.mutatorsstack.FlutterMutatorsStack: FlutterMutatorsStack()
androidx.window.embedding.ActivityStack: java.lang.String toString()
androidx.window.layout.WindowInfoTrackerImpl$windowLayoutInfo$1: kotlin.coroutines.Continuation create(java.lang.Object,kotlin.coroutines.Continuation)
io.flutter.embedding.engine.systemchannels.TextInputChannel$TextInputType: io.flutter.embedding.engine.systemchannels.TextInputChannel$TextInputType[] values()
androidx.window.core.Version: java.math.BigInteger getBigInteger()
io.flutter.embedding.engine.mutatorsstack.FlutterMutatorsStack: void pushTransform(float[])
androidx.window.core.Version: androidx.window.core.Version access$getUNKNOWN$cp()
androidx.window.layout.WindowInfoTrackerDecorator: androidx.window.layout.WindowInfoTracker decorate(androidx.window.layout.WindowInfoTracker)
androidx.window.layout.SidecarCompat: androidx.window.layout.SidecarAdapter access$getSidecarAdapter$p(androidx.window.layout.SidecarCompat)
androidx.window.embedding.EmbeddingAdapter: boolean translateActivityPairPredicates$lambda-1(androidx.window.embedding.EmbeddingAdapter,java.util.Set,android.util.Pair)
io.flutter.embedding.engine.FlutterJNI: io.flutter.view.FlutterCallbackInformation nativeLookupCallbackInformation(long)
androidx.window.embedding.SplitRule: SplitRule(int,int,float,int,int,kotlin.jvm.internal.DefaultConstructorMarker)
androidx.window.embedding.ExtensionEmbeddingBackend$SplitListenerWrapper: androidx.core.util.Consumer getCallback()
io.flutter.embedding.android.DrawableSplashScreen$DrawableSplashScreenView: void setSplashDrawable(android.graphics.drawable.Drawable)
com.dexterous.flutterlocalnotifications.FlutterLocalNotificationsPlugin: void pendingNotificationRequests(io.flutter.plugin.common.MethodChannel$Result)
com.dexterous.flutterlocalnotifications.FlutterLocalNotificationsPlugin: void cancel(io.flutter.plugin.common.MethodCall,io.flutter.plugin.common.MethodChannel$Result)
org.threeten.bp.OffsetTime: java.lang.Object writeReplace()
com.dexterous.flutterlocalnotifications.FlutterLocalNotificationsPlugin: java.util.ArrayList loadScheduledNotifications(android.content.Context)
com.dexterous.flutterlocalnotifications.FlutterLocalNotificationsPlugin: java.lang.String getNextFireDateMatchingDateTimeComponents(com.dexterous.flutterlocalnotifications.models.NotificationDetails)
kotlin.jvm.internal.Lambda: int getArity()
com.dexterous.flutterlocalnotifications.FlutterLocalNotificationsPlugin: void setMediaStyle(androidx.core.app.NotificationCompat$Builder)
androidx.window.layout.ActivityCompatHelperApi30: android.graphics.Rect maximumWindowBounds(android.app.Activity)
id.flutter.flutter_background_service.BackgroundService: io.flutter.plugin.common.MethodChannel access$000(id.flutter.flutter_background_service.BackgroundService)
io.flutter.embedding.engine.FlutterJNI: void nativeSetViewportMetrics(long,float,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int[],int[],int[])
android.support.v4.media.AudioAttributesImplBaseParcelizer: androidx.media.AudioAttributesImplBase read(androidx.versionedparcelable.VersionedParcel)
androidx.window.layout.SidecarCompat: boolean validateExtensionInterface()
io.flutter.embedding.engine.FlutterJNI: void nativeSurfaceDestroyed(long)
androidx.window.layout.WindowInfoTrackerImpl$windowLayoutInfo$1: java.lang.Object invoke(kotlinx.coroutines.flow.FlowCollector,kotlin.coroutines.Continuation)
androidx.window.layout.SidecarCompat: androidx.window.layout.ExtensionInterfaceCompat$ExtensionCallbackInterface access$getExtensionCallback$p(androidx.window.layout.SidecarCompat)
com.google.firebase.encoders.proto.Protobuf$IntEncoding: com.google.firebase.encoders.proto.Protobuf$IntEncoding valueOf(java.lang.String)
io.flutter.embedding.engine.systemchannels.PlatformChannel$SystemUiOverlay: io.flutter.embedding.engine.systemchannels.PlatformChannel$SystemUiOverlay valueOf(java.lang.String)
com.dexterous.flutterlocalnotifications.FlutterLocalNotificationsPlugin: java.util.HashMap getMappedNotificationChannel(android.app.NotificationChannel)
org.threeten.bp.temporal.IsoFields$Field: org.threeten.bp.temporal.IsoFields$Field[] values()
androidx.window.embedding.EmbeddingBackend: void registerRule(androidx.window.embedding.EmbeddingRule)
kotlin.jvm.internal.FunctionReference: boolean isInfix()
androidx.window.layout.WindowMetricsCalculatorCompat: WindowMetricsCalculatorCompat()
androidx.window.layout.WindowMetrics: WindowMetrics(androidx.window.core.Bounds)
androidx.window.embedding.ExtensionEmbeddingBackend: void registerRule(androidx.window.embedding.EmbeddingRule)
androidx.window.embedding.ExtensionEmbeddingBackend: void setEmbeddingExtension(androidx.window.embedding.EmbeddingInterfaceCompat)
org.threeten.bp.chrono.JapaneseEra: java.lang.Object readResolve()
io.flutter.embedding.engine.FlutterJNI: void nativeInvokePlatformMessageEmptyResponseCallback(long,int)
androidx.window.layout.SidecarWindowBackend$WindowLayoutChangeCallbackWrapper: android.app.Activity getActivity()
io.flutter.plugin.editing.ImeSyncDeferringInsetsCallback: ImeSyncDeferringInsetsCallback(android.view.View,int,int)
com.dexterous.flutterlocalnotifications.FlutterLocalNotificationsPlugin: void schedule(io.flutter.plugin.common.MethodCall,io.flutter.plugin.common.MethodChannel$Result)
androidx.window.layout.SidecarCompat: void onWindowLayoutChangeListenerAdded(android.app.Activity)
androidx.window.layout.SidecarWindowBackend$ExtensionListenerImpl: void onWindowLayoutChanged(android.app.Activity,androidx.window.layout.WindowLayoutInfo)
com.dexterous.flutterlocalnotifications.FlutterLocalNotificationsPlugin: void getActiveNotifications(io.flutter.plugin.common.MethodChannel$Result)
id.flutter.flutter_background_service.Config: void setForegroundNotificationId(int)
io.flutter.embedding.engine.systemchannels.PlatformViewsChannel$PlatformViewCreationRequest$RequestedDisplayMode: io.flutter.embedding.engine.systemchannels.PlatformViewsChannel$PlatformViewCreationRequest$RequestedDisplayMode[] values()
io.flutter.embedding.engine.FlutterJNI: void dispatchSemanticsAction(int,io.flutter.view.AccessibilityBridge$Action)
androidx.window.embedding.EmbeddingAdapter: java.lang.Object component1(android.util.Pair)
androidx.window.embedding.SplitRuleParser: androidx.window.embedding.ActivityFilter parseActivityFilter(android.content.Context,android.content.res.XmlResourceParser)
io.flutter.embedding.engine.FlutterJNI: void setRefreshRateFPS(float)
io.flutter.plugins.firebase.core.FlutterFirebasePlugin: com.google.android.gms.tasks.Task getPluginConstantsForFirebaseApp(com.google.firebase.FirebaseApp)
com.dexterous.flutterlocalnotifications.FlutterLocalNotificationsPlugin: void cancelAllNotifications(io.flutter.plugin.common.MethodChannel$Result)
com.google.android.gms.measurement.internal.AppMeasurementDynamiteService: void isDataCollectionEnabled(com.google.android.gms.internal.measurement.zzcf)
androidx.window.embedding.SplitInfo: float getSplitRatio()
com.google.android.gms.dynamite.DynamiteModule$DynamiteLoaderClassLoader: DynamiteModule$DynamiteLoaderClassLoader()
org.threeten.bp.LocalTime: java.lang.Object writeReplace()
io.flutter.embedding.android.FlutterSurfaceView: io.flutter.embedding.engine.renderer.FlutterRenderer getAttachedRenderer()
io.flutter.embedding.android.KeyData$Type: io.flutter.embedding.android.KeyData$Type[] values()
androidx.window.layout.WindowMetricsCalculator: androidx.window.layout.WindowMetrics computeMaximumWindowMetrics(android.app.Activity)
androidx.window.embedding.SplitRule$Api30Impl: SplitRule$Api30Impl()
io.flutter.embedding.android.FlutterView: io.flutter.plugin.common.BinaryMessenger getBinaryMessenger()
androidx.window.embedding.ActivityFilter: int hashCode()
org.threeten.bp.format.TextStyle: org.threeten.bp.format.TextStyle valueOf(java.lang.String)
androidx.window.core.Version$Companion: Version$Companion(kotlin.jvm.internal.DefaultConstructorMarker)
id.flutter.flutter_background_service.Config: void setManuallyStopped(boolean)
io.flutter.embedding.engine.systemchannels.PlatformChannel$SoundType: io.flutter.embedding.engine.systemchannels.PlatformChannel$SoundType[] values()
androidx.media.AudioAttributesImplApi26: AudioAttributesImplApi26()
androidx.window.embedding.EmptyEmbeddingComponent: EmptyEmbeddingComponent()
androidx.window.layout.SidecarCompat$FirstAttachAdapter: void onViewAttachedToWindow(android.view.View)
com.google.firebase.concurrent.ExecutorsRegistrar: ExecutorsRegistrar()
androidx.window.core.Version: int hashCode()
io.flutter.embedding.engine.FlutterJNI: void loadDartDeferredLibrary(int,java.lang.String[])
com.google.firebase.analytics.FirebaseAnalytics: void setCurrentScreen(android.app.Activity,java.lang.String,java.lang.String)
androidx.window.layout.SidecarCompat$Companion: SidecarCompat$Companion()
io.flutter.embedding.engine.FlutterJNI: void setLocalizationPlugin(io.flutter.plugin.localization.LocalizationPlugin)
com.google.android.gms.measurement.AppMeasurementReceiver: AppMeasurementReceiver()
com.google.android.gms.measurement.internal.AppMeasurementDynamiteService: void endAdUnitExposure(java.lang.String,long)
androidx.window.layout.WindowInfoTracker: kotlinx.coroutines.flow.Flow windowLayoutInfo(android.app.Activity)
org.threeten.bp.ZonedDateTime: java.lang.Object readResolve()
com.google.android.gms.measurement.internal.AppMeasurementDynamiteService: void getCurrentScreenClass(com.google.android.gms.internal.measurement.zzcf)
org.threeten.bp.temporal.ChronoUnit: org.threeten.bp.temporal.ChronoUnit valueOf(java.lang.String)
io.flutter.embedding.engine.mutatorsstack.FlutterMutatorsStack$FlutterMutatorType: io.flutter.embedding.engine.mutatorsstack.FlutterMutatorsStack$FlutterMutatorType[] values()
kotlin.jvm.internal.FunctionReference: FunctionReference(int,java.lang.Object)
kotlin.jvm.internal.FunctionReference: FunctionReference(int)
androidx.window.embedding.EmbeddingAdapter: java.util.function.Predicate translateActivityIntentPredicates(java.util.Set)
androidx.window.layout.WindowMetricsCalculator$Companion: void reset()
id.flutter.flutter_background_service.WatchdogReceiver: WatchdogReceiver()
com.dexterous.flutterlocalnotifications.SoundSource: com.dexterous.flutterlocalnotifications.SoundSource valueOf(java.lang.String)
io.flutter.embedding.engine.FlutterJNI: android.graphics.Bitmap getBitmap()
kotlin.reflect.KVisibility: kotlin.reflect.KVisibility[] values()
id.flutter.flutter_background_service.Config: java.lang.String getNotificationChannelId()
androidx.window.core.Bounds: boolean isEmpty()
io.flutter.embedding.engine.FlutterJNI: void setPlatformViewsController(io.flutter.plugin.platform.PlatformViewsController)
kotlin.jvm.internal.CallableReference: kotlin.reflect.KCallable computeReflected()
android.support.v4.app.RemoteActionCompatParcelizer: void write(androidx.core.app.RemoteActionCompat,androidx.versionedparcelable.VersionedParcel)
com.dexterous.flutterlocalnotifications.FlutterLocalNotificationsPlugin: void setVisibility(com.dexterous.flutterlocalnotifications.models.NotificationDetails,androidx.core.app.NotificationCompat$Builder)
com.google.android.datatransport.cct.internal.ClientInfo$ClientType: com.google.android.datatransport.cct.internal.ClientInfo$ClientType[] values()
androidx.window.layout.SidecarCompat$registerConfigurationChangeListener$configChangeObserver$1: void onLowMemory()
org.threeten.bp.Year: java.lang.Object writeReplace()
androidx.core.app.RemoteActionCompat: RemoteActionCompat()
com.dexterous.flutterlocalnotifications.RuntimeTypeAdapterFactory: java.lang.String access$000(com.dexterous.flutterlocalnotifications.RuntimeTypeAdapterFactory)
androidx.window.embedding.SplitPairRule: boolean getFinishSecondaryWithPrimary()
io.flutter.embedding.engine.FlutterJNI: void prefetchDefaultFontManager()
androidx.window.core.Version$bigInteger$2: java.lang.Object invoke()
io.flutter.embedding.engine.FlutterJNI: long nativeAttach(io.flutter.embedding.engine.FlutterJNI)
io.flutter.plugins.firebase.core.FlutterFirebasePluginRegistry: com.google.android.gms.tasks.Task getPluginConstantsForFirebaseApp(com.google.firebase.FirebaseApp)
androidx.window.embedding.SplitPairFilter: android.content.ComponentName getSecondaryActivityName()
androidx.window.embedding.ExtensionEmbeddingBackend: androidx.window.embedding.EmbeddingInterfaceCompat getEmbeddingExtension()
androidx.window.layout.WindowMetricsCalculator$-CC: void reset()
com.dexterous.flutterlocalnotifications.FlutterLocalNotificationsPlugin: void applyGrouping(com.dexterous.flutterlocalnotifications.models.NotificationDetails,androidx.core.app.NotificationCompat$Builder)
io.flutter.embedding.engine.FlutterJNI: void dispatchPointerDataPacket(java.nio.ByteBuffer,int)
id.flutter.flutter_background_service.R$style: R$style()
androidx.window.embedding.SplitRuleParser: androidx.window.embedding.SplitPairRule parseSplitPairRule(android.content.Context,android.content.res.XmlResourceParser)
com.dexterous.flutterlocalnotifications.FlutterLocalNotificationsPlugin: com.dexterous.flutterlocalnotifications.models.NotificationDetails extractNotificationDetails(io.flutter.plugin.common.MethodChannel$Result,java.util.Map)
org.threeten.bp.chrono.HijrahDate: java.lang.Object writeReplace()
com.google.gson.stream.JsonToken: com.google.gson.stream.JsonToken[] values()
com.dexterous.flutterlocalnotifications.FlutterLocalNotificationsPlugin: FlutterLocalNotificationsPlugin()
androidx.window.embedding.EmbeddingAdapter: java.util.List translate(java.util.List)
androidx.window.layout.WindowInfoTrackerImpl: androidx.window.layout.WindowBackend access$getWindowBackend$p(androidx.window.layout.WindowInfoTrackerImpl)
org.threeten.bp.LocalDate: java.lang.Object readResolve()
org.threeten.bp.zone.StandardZoneRules: java.lang.Object writeReplace()
androidx.window.layout.SidecarCompat$DistinctSidecarElementCallback: void onDeviceStateChanged(androidx.window.sidecar.SidecarDeviceState)
androidx.window.layout.SidecarWindowBackend: boolean isActivityRegistered(android.app.Activity)
com.google.android.gms.measurement.internal.AppMeasurementDynamiteService: void generateEventId(com.google.android.gms.internal.measurement.zzcf)
com.dexterous.flutterlocalnotifications.FlutterLocalNotificationsPlugin: void getNotificationChannels(io.flutter.plugin.common.MethodChannel$Result)
androidx.window.layout.ExtensionsWindowLayoutInfoAdapter: boolean validBounds(android.app.Activity,androidx.window.core.Bounds)
androidx.window.layout.EmptyDecorator: androidx.window.layout.WindowInfoTracker decorate(androidx.window.layout.WindowInfoTracker)
androidx.window.embedding.MatcherUtils: boolean areComponentsMatching$window_release(android.content.ComponentName,android.content.ComponentName)
android.support.v4.media.AudioAttributesImplApi26Parcelizer: AudioAttributesImplApi26Parcelizer()
com.dexterous.flutterlocalnotifications.models.DateTimeComponents: com.dexterous.flutterlocalnotifications.models.DateTimeComponents[] values()
androidx.media.AudioAttributesCompatParcelizer: void write(androidx.media.AudioAttributesCompat,androidx.versionedparcelable.VersionedParcel)
com.dexterous.flutterlocalnotifications.models.NotificationDetails: void readPlatformSpecifics(java.util.Map,com.dexterous.flutterlocalnotifications.models.NotificationDetails)
com.google.android.gms.measurement.AppMeasurement: void setConditionalUserProperty(com.google.android.gms.measurement.AppMeasurement$ConditionalUserProperty)
com.dexterous.flutterlocalnotifications.models.NotificationChannelGroupDetails: com.dexterous.flutterlocalnotifications.models.NotificationChannelGroupDetails from(java.util.Map)
androidx.media.AudioAttributesImplApi21Parcelizer: void write(androidx.media.AudioAttributesImplApi21,androidx.versionedparcelable.VersionedParcel)
kotlin.coroutines.jvm.internal.SuspendLambda: java.lang.String toString()
com.google.android.datatransport.cct.CctBackendFactory: com.google.android.datatransport.runtime.backends.TransportBackend create(com.google.android.datatransport.runtime.backends.CreationContext)
androidx.window.layout.SidecarAdapter$Companion: java.util.List getSidecarDisplayFeatures(androidx.window.sidecar.SidecarWindowLayoutInfo)
androidx.window.embedding.ActivityStack: boolean isEmpty()
io.flutter.embedding.engine.FlutterJNI: void setViewportMetrics(float,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int[],int[],int[])
android.support.v4.app.RemoteActionCompatParcelizer: RemoteActionCompatParcelizer()
com.google.firebase.analytics.FirebaseAnalytics: java.lang.String getFirebaseInstanceId()
id.flutter.flutter_background_service.R$color: R$color()
android.support.v4.media.AudioAttributesImplBaseParcelizer: void write(androidx.media.AudioAttributesImplBase,androidx.versionedparcelable.VersionedParcel)
androidx.window.layout.SidecarAdapter$Companion: void setSidecarDisplayFeatures(androidx.window.sidecar.SidecarWindowLayoutInfo,java.util.List)
androidx.window.layout.FoldingFeature$State: java.lang.String toString()
io.flutter.view.AccessibilityBridge$Action: io.flutter.view.AccessibilityBridge$Action[] values()
com.google.gson.LongSerializationPolicy: com.google.gson.LongSerializationPolicy[] values()
com.google.android.datatransport.cct.internal.NetworkConnectionInfo$MobileSubtype: com.google.android.datatransport.cct.internal.NetworkConnectionInfo$MobileSubtype valueOf(java.lang.String)
androidx.window.layout.SidecarWindowBackend$WindowLayoutChangeCallbackWrapper: void accept$lambda-0(androidx.window.layout.SidecarWindowBackend$WindowLayoutChangeCallbackWrapper,androidx.window.layout.WindowLayoutInfo)
com.dexterous.flutterlocalnotifications.models.NotificationDetails: com.dexterous.flutterlocalnotifications.models.PersonDetails readPersonDetails(java.util.Map)
android.support.v4.media.AudioAttributesImplApi26Parcelizer: androidx.media.AudioAttributesImplApi26 read(androidx.versionedparcelable.VersionedParcel)
id.flutter.flutter_background_service.Config: boolean isAutoStartOnBoot()
kotlinx.coroutines.channels.BufferOverflow: kotlinx.coroutines.channels.BufferOverflow[] values()
androidx.window.embedding.MatcherUtils: MatcherUtils()
io.flutter.embedding.engine.FlutterJNI: boolean isAttached()
androidx.window.layout.SidecarCompat$TranslatingCallback: void onWindowLayoutChanged(android.os.IBinder,androidx.window.sidecar.SidecarWindowLayoutInfo)
io.flutter.embedding.engine.FlutterJNI: void dispatchPlatformMessage(java.lang.String,java.nio.ByteBuffer,int,int)
com.google.firebase.datatransport.TransportRegistrar: java.util.List getComponents()
io.flutter.embedding.engine.FlutterJNI: void invokePlatformMessageResponseCallback(int,java.nio.ByteBuffer,int)
io.flutter.view.FlutterCallbackInformation: io.flutter.view.FlutterCallbackInformation lookupCallbackInformation(long)
com.google.android.gms.measurement.internal.AppMeasurementDynamiteService: void getUserProperties(java.lang.String,java.lang.String,boolean,com.google.android.gms.internal.measurement.zzcf)
io.flutter.plugin.editing.ImeSyncDeferringInsetsCallback: android.view.View access$602(io.flutter.plugin.editing.ImeSyncDeferringInsetsCallback,android.view.View)
io.flutter.plugins.firebase.messaging.FlutterFirebaseAppRegistrar: java.util.List getComponents()
kotlin.coroutines.jvm.internal.ContinuationImpl: void releaseIntercepted()
androidx.window.layout.FoldingFeature$OcclusionType$Companion: FoldingFeature$OcclusionType$Companion(kotlin.jvm.internal.DefaultConstructorMarker)
org.threeten.bp.Duration: java.lang.Object readResolve()
androidx.window.layout.WindowInfoTrackerImpl: kotlinx.coroutines.flow.Flow windowLayoutInfo(android.app.Activity)
androidx.window.embedding.SplitController$Companion: androidx.window.embedding.SplitController getInstance()
io.flutter.embedding.engine.FlutterJNI: java.lang.String getObservatoryUri()
com.dexterous.flutterlocalnotifications.ScheduledNotificationReceiver: void onReceive(android.content.Context,android.content.Intent)
kotlin.jvm.internal.FunctionReferenceImpl: FunctionReferenceImpl(int,java.lang.Class,java.lang.String,java.lang.String,int)
io.flutter.embedding.engine.FlutterJNI: void nativeInvokePlatformMessageResponseCallback(long,int,java.nio.ByteBuffer,int)
com.google.android.gms.measurement.internal.AppMeasurementDynamiteService: void logHealthData(int,java.lang.String,com.google.android.gms.dynamic.IObjectWrapper,com.google.android.gms.dynamic.IObjectWrapper,com.google.android.gms.dynamic.IObjectWrapper)
com.google.firebase.messaging.FirebaseMessagingRegistrar: com.google.firebase.messaging.FirebaseMessaging lambda$getComponents$0(com.google.firebase.components.ComponentContainer)
io.flutter.embedding.engine.FlutterJNI: void dispatchSemanticsAction(int,int,java.nio.ByteBuffer,int)
com.google.firebase.concurrent.SequentialExecutor$WorkerRunningState: com.google.firebase.concurrent.SequentialExecutor$WorkerRunningState[] values()
com.dexterous.flutterlocalnotifications.ScheduledNotificationBootReceiver: ScheduledNotificationBootReceiver()
io.flutter.embedding.engine.FlutterJNI: boolean nativeFlutterTextUtilsIsEmoji(int)
androidx.window.embedding.SplitRule: int getMinWidth()
androidx.window.embedding.SplitController: void setStaticSplitRules(java.util.Set)
com.dexterous.flutterlocalnotifications.utils.StringUtils: StringUtils()
androidx.window.embedding.SplitController: void initialize(android.content.Context,int)
androidx.window.embedding.ExtensionEmbeddingBackend: java.util.concurrent.CopyOnWriteArrayList getSplitChangeCallbacks()
kotlin.jvm.internal.CallableReference: boolean isFinal()
androidx.core.graphics.drawable.IconCompatParcelizer: IconCompatParcelizer()
kotlin.coroutines.jvm.internal.BaseContinuationImpl: kotlin.coroutines.jvm.internal.CoroutineStackFrame getCallerFrame()
id.flutter.flutter_background_service.FlutterBackgroundServicePlugin$1: FlutterBackgroundServicePlugin$1(id.flutter.flutter_background_service.FlutterBackgroundServicePlugin)
com.dexterous.flutterlocalnotifications.utils.BooleanUtils: boolean getValue(java.lang.Boolean)
androidx.window.embedding.SplitRule: SplitRule()
androidx.window.layout.ExtensionsWindowLayoutInfoAdapter: ExtensionsWindowLayoutInfoAdapter()
androidx.window.layout.SidecarWindowBackend: androidx.window.layout.ExtensionInterfaceCompat getWindowExtension()
com.dexterous.flutterlocalnotifications.models.IconSource: com.dexterous.flutterlocalnotifications.models.IconSource valueOf(java.lang.String)
com.dexterous.flutterlocalnotifications.RuntimeTypeAdapterFactory: java.lang.Class access$100(com.dexterous.flutterlocalnotifications.RuntimeTypeAdapterFactory)
androidx.window.layout.SidecarCompat$registerConfigurationChangeListener$configChangeObserver$1: SidecarCompat$registerConfigurationChangeListener$configChangeObserver$1(androidx.window.layout.SidecarCompat,android.app.Activity)
com.dexterous.flutterlocalnotifications.FlutterLocalNotificationsPlugin: void tryCommittingInBackground(android.content.SharedPreferences$Editor,int)
io.flutter.embedding.engine.FlutterJNI: void nativeDispatchEmptyPlatformMessage(long,java.lang.String,int)
androidx.window.layout.SidecarAdapter$Companion: SidecarAdapter$Companion()
io.flutter.embedding.engine.FlutterJNI: void nativeDestroy(long)
io.flutter.embedding.engine.FlutterJNI: void onPreEngineRestart()
androidx.window.embedding.EmbeddingCompat$Companion: EmbeddingCompat$Companion()
com.dexterous.flutterlocalnotifications.RuntimeTypeAdapterFactory: com.dexterous.flutterlocalnotifications.RuntimeTypeAdapterFactory registerSubtype(java.lang.Class,java.lang.String)
io.flutter.embedding.engine.FlutterJNI: void onDisplayPlatformView(int,int,int,int,int,int,int,io.flutter.embedding.engine.mutatorsstack.FlutterMutatorsStack)
androidx.window.layout.SidecarWindowBackend: void unregisterLayoutChangeCallback(androidx.core.util.Consumer)
androidx.window.embedding.SplitController: SplitController(kotlin.jvm.internal.DefaultConstructorMarker)
com.dexterous.flutterlocalnotifications.FlutterLocalNotificationsPlugin: void createNotificationChannelGroup(io.flutter.plugin.common.MethodCall,io.flutter.plugin.common.MethodChannel$Result)
io.flutter.embedding.android.FlutterActivityLaunchConfigs$BackgroundMode: io.flutter.embedding.android.FlutterActivityLaunchConfigs$BackgroundMode[] values()
io.flutter.embedding.android.RenderMode: io.flutter.embedding.android.RenderMode[] values()
org.threeten.bp.LocalDateTime: java.lang.Object readResolve()
com.dexterous.flutterlocalnotifications.models.styles.DefaultStyleInformation: DefaultStyleInformation(java.lang.Boolean,java.lang.Boolean)
io.flutter.view.AccessibilityBridge$AccessibilityFeature: io.flutter.view.AccessibilityBridge$AccessibilityFeature valueOf(java.lang.String)
org.threeten.bp.chrono.ThaiBuddhistEra: org.threeten.bp.chrono.ThaiBuddhistEra[] values()
io.flutter.embedding.android.FlutterImageView$SurfaceKind: io.flutter.embedding.android.FlutterImageView$SurfaceKind valueOf(java.lang.String)
com.google.android.datatransport.cct.internal.NetworkConnectionInfo$MobileSubtype: com.google.android.datatransport.cct.internal.NetworkConnectionInfo$MobileSubtype[] values()
org.threeten.bp.chrono.MinguoEra: org.threeten.bp.chrono.MinguoEra valueOf(java.lang.String)
androidx.window.layout.HardwareFoldingFeature: java.lang.String toString()
androidx.window.layout.WindowMetricsCalculatorCompat: void getRectSizeFromDisplay(android.app.Activity,android.graphics.Rect)
androidx.window.layout.SidecarWindowBackend$WindowLayoutChangeCallbackWrapper: void setLastInfo(androidx.window.layout.WindowLayoutInfo)
org.threeten.bp.format.ResolverStyle: org.threeten.bp.format.ResolverStyle[] values()
com.google.android.gms.measurement.AppMeasurement: void clearConditionalUserProperty(java.lang.String,java.lang.String,android.os.Bundle)
com.google.firebase.messaging.FirebaseMessagingRegistrar: FirebaseMessagingRegistrar()
com.dexterous.flutterlocalnotifications.models.NotificationDetails: void readBigPictureStyleInformation(com.dexterous.flutterlocalnotifications.models.NotificationDetails,java.util.Map,com.dexterous.flutterlocalnotifications.models.styles.DefaultStyleInformation)
androidx.window.layout.SidecarWindowBackend$Companion: void resetInstance()
androidx.window.layout.SidecarAdapter$Companion: int getSidecarDevicePosture$window_release(androidx.window.sidecar.SidecarDeviceState)
androidx.window.layout.WindowInfoTracker$-CC: void reset()
io.flutter.embedding.engine.FlutterJNI: android.graphics.Bitmap decodeImage(java.nio.ByteBuffer,long)
androidx.window.layout.WindowLayoutInfo: java.lang.String toString()
androidx.window.layout.HardwareFoldingFeature$Type: java.lang.String toString()
org.threeten.bp.temporal.IsoFields$Unit: org.threeten.bp.temporal.IsoFields$Unit valueOf(java.lang.String)
io.flutter.view.AccessibilityBridge$Flag: io.flutter.view.AccessibilityBridge$Flag valueOf(java.lang.String)
com.google.android.gms.common.GooglePlayServicesMissingManifestValueException: GooglePlayServicesMissingManifestValueException()
org.threeten.bp.chrono.JapaneseChronology: java.lang.Object readResolve()
io.flutter.embedding.engine.FlutterJNI: io.flutter.embedding.engine.FlutterJNI spawn(java.lang.String,java.lang.String,java.lang.String,java.util.List)
io.flutter.embedding.engine.FlutterJNI: boolean nativeFlutterTextUtilsIsEmojiModifier(int)
androidx.window.layout.WindowInfoTracker$Companion: androidx.window.layout.WindowBackend windowBackend$window_release(android.content.Context)
com.dexterous.flutterlocalnotifications.models.NotificationChannelDetails: com.dexterous.flutterlocalnotifications.models.NotificationChannelDetails from(java.util.Map)
androidx.window.core.Version$Companion: androidx.window.core.Version getUNKNOWN()
androidx.core.content.ContextCompat$Api24Impl: android.content.Context createDeviceProtectedStorageContext(android.content.Context)
androidx.window.layout.ExtensionWindowLayoutInfoBackend$MulticastConsumer: boolean isEmpty()
androidx.window.embedding.SplitInfo: int hashCode()
androidx.window.layout.HardwareFoldingFeature: androidx.window.layout.HardwareFoldingFeature$Type getType$window_release()
com.dexterous.flutterlocalnotifications.models.NotificationDetails: void readLedInformation(com.dexterous.flutterlocalnotifications.models.NotificationDetails,java.util.Map)
com.dexterous.flutterlocalnotifications.models.NotificationDetails: java.util.ArrayList readMessages(java.util.ArrayList)
com.dexterous.flutterlocalnotifications.NotificationStyle: com.dexterous.flutterlocalnotifications.NotificationStyle[] values()
com.dexterous.flutterlocalnotifications.models.NotificationChannelAction: NotificationChannelAction(java.lang.String,int)
io.flutter.embedding.engine.systemchannels.SettingsChannel$PlatformBrightness: io.flutter.embedding.engine.systemchannels.SettingsChannel$PlatformBrightness[] values()
androidx.window.embedding.EmbeddingTranslatingCallback: void accept(java.util.List)
com.google.firebase.heartbeatinfo.HeartBeatInfo$HeartBeat: com.google.firebase.heartbeatinfo.HeartBeatInfo$HeartBeat valueOf(java.lang.String)
kotlin.coroutines.jvm.internal.ContinuationImpl: kotlin.coroutines.Continuation intercepted()
androidx.lifecycle.Lifecycle$State: androidx.lifecycle.Lifecycle$State[] values()
com.dexterous.flutterlocalnotifications.FlutterLocalNotificationsPlugin: void setLights(com.dexterous.flutterlocalnotifications.models.NotificationDetails,androidx.core.app.NotificationCompat$Builder)
androidx.window.embedding.SplitPairRule: java.util.Set getFilters()
androidx.window.embedding.SplitPairFilter: int hashCode()
org.threeten.bp.DayOfWeek: org.threeten.bp.DayOfWeek valueOf(java.lang.String)
io.flutter.embedding.android.FlutterImageView: android.view.Surface getSurface()
androidx.window.java.R: R()
io.flutter.embedding.android.TransparencyMode: io.flutter.embedding.android.TransparencyMode[] values()
com.dexterous.flutterlocalnotifications.FlutterLocalNotificationsPlugin: void onAttachedToEngine(android.content.Context,io.flutter.plugin.common.BinaryMessenger)
com.google.firebase.messaging.FirebaseMessagingService: FirebaseMessagingService()
androidx.window.embedding.EmbeddingAdapter: java.util.function.Predicate translateActivityPairPredicates(java.util.Set)
com.google.firebase.installations.FirebaseInstallationsException$Status: com.google.firebase.installations.FirebaseInstallationsException$Status valueOf(java.lang.String)
com.google.android.gms.measurement.internal.AppMeasurementDynamiteService: void getSessionId(com.google.android.gms.internal.measurement.zzcf)
androidx.window.core.Bounds: Bounds(int,int,int,int)
com.dexterous.flutterlocalnotifications.FlutterLocalNotificationsPlugin: void zonedScheduleNextNotificationMatchingDateComponents(android.content.Context,com.dexterous.flutterlocalnotifications.models.NotificationDetails)
androidx.media.AudioAttributesImplBaseParcelizer: AudioAttributesImplBaseParcelizer()
com.google.firebase.FirebaseCommonRegistrar: FirebaseCommonRegistrar()
com.google.android.gms.measurement.internal.AppMeasurementDynamiteService: AppMeasurementDynamiteService()
com.dexterous.flutterlocalnotifications.FlutterLocalNotificationsPlugin: void zonedScheduleNextNotification(android.content.Context,com.dexterous.flutterlocalnotifications.models.NotificationDetails)
androidx.window.core.Version$Companion: androidx.window.core.Version getVERSION_0_1()
io.flutter.view.AccessibilityViewEmbedder: android.view.accessibility.AccessibilityNodeInfo createAccessibilityNodeInfo(int)
com.google.gson.stream.JsonToken: com.google.gson.stream.JsonToken valueOf(java.lang.String)
androidx.window.layout.HardwareFoldingFeature$Companion: HardwareFoldingFeature$Companion()
androidx.window.layout.SidecarWindowBackend$ExtensionListenerImpl: SidecarWindowBackend$ExtensionListenerImpl(androidx.window.layout.SidecarWindowBackend)
io.flutter.embedding.engine.plugins.lifecycle.HiddenLifecycleReference: androidx.lifecycle.Lifecycle getLifecycle()
androidx.lifecycle.ReportFragment$LifecycleCallbacks: void onActivityStarted(android.app.Activity)
io.flutter.embedding.engine.FlutterJNI: void nativeUpdateJavaAssetManager(long,android.content.res.AssetManager,java.lang.String)
com.dexterous.flutterlocalnotifications.FlutterLocalNotificationsPlugin: boolean launchedActivityFromHistory(android.content.Intent)
com.google.android.gms.measurement.AppMeasurement: java.util.Map getUserProperties(java.lang.String,java.lang.String,boolean)
org.threeten.bp.LocalDateTime: java.lang.Object writeReplace()
androidx.window.layout.DisplayCompatHelperApi17: DisplayCompatHelperApi17()
id.flutter.flutter_background_service.FlutterBackgroundServicePlugin: void onListen(java.lang.Object,io.flutter.plugin.common.EventChannel$EventSink)
io.flutter.view.AccessibilityViewEmbedder: void setFlutterNodeParent(android.view.accessibility.AccessibilityNodeInfo,android.view.View,android.view.accessibility.AccessibilityNodeInfo)
io.flutter.plugins.firebase.messaging.JobIntentService: JobIntentService()
com.dexterous.flutterlocalnotifications.FlutterLocalNotificationsPlugin: android.net.Uri retrieveSoundResourceUri(android.content.Context,java.lang.String,com.dexterous.flutterlocalnotifications.SoundSource)
androidx.window.layout.SidecarCompat: void register(android.os.IBinder,android.app.Activity)
com.google.android.datatransport.runtime.backends.BackendResponse$Status: com.google.android.datatransport.runtime.backends.BackendResponse$Status[] values()
io.flutter.embedding.engine.systemchannels.PlatformChannel$SystemUiMode: io.flutter.embedding.engine.systemchannels.PlatformChannel$SystemUiMode[] values()
com.dexterous.flutterlocalnotifications.FlutterLocalNotificationsPlugin: void deleteNotificationChannelGroup(io.flutter.plugin.common.MethodCall,io.flutter.plugin.common.MethodChannel$Result)
org.threeten.bp.temporal.ChronoField: org.threeten.bp.temporal.ChronoField valueOf(java.lang.String)
org.threeten.bp.zone.ZoneOffsetTransitionRule$TimeDefinition: org.threeten.bp.zone.ZoneOffsetTransitionRule$TimeDefinition[] values()
androidx.window.layout.WindowMetricsCalculatorCompat: androidx.window.layout.WindowMetrics computeCurrentWindowMetrics(android.app.Activity)
id.flutter.flutter_background_service.FlutterBackgroundServicePlugin: void onAttachedToEngine(io.flutter.embedding.engine.plugins.FlutterPlugin$FlutterPluginBinding)
io.flutter.plugin.editing.ImeSyncDeferringInsetsCallback: boolean access$302(io.flutter.plugin.editing.ImeSyncDeferringInsetsCallback,boolean)
androidx.window.java.layout.WindowInfoTrackerCallbackAdapter$addListener$1$1$invokeSuspend$$inlined$collect$1: java.lang.Object emit(java.lang.Object,kotlin.coroutines.Continuation)
androidx.window.embedding.SplitPairFilter: android.content.ComponentName getPrimaryActivityName()
androidx.window.core.Bounds: boolean equals(java.lang.Object)
com.google.firebase.provider.FirebaseInitProvider: FirebaseInitProvider()
io.flutter.embedding.engine.FlutterJNI: void nativeSetSemanticsEnabled(long,boolean)
io.flutter.plugin.editing.ImeSyncDeferringInsetsCallback$AnimationCallback: void onEnd(android.view.WindowInsetsAnimation)
androidx.window.embedding.EmbeddingAdapter: boolean translateActivityPredicates$lambda-6(java.util.Set,android.app.Activity)
com.dexterous.flutterlocalnotifications.models.NotificationDetails: void readBigTextStyleInformation(com.dexterous.flutterlocalnotifications.models.NotificationDetails,java.util.Map,com.dexterous.flutterlocalnotifications.models.styles.DefaultStyleInformation)
androidx.window.layout.WindowMetricsCalculator$Companion$decorator$1: androidx.window.layout.WindowMetricsCalculator invoke(androidx.window.layout.WindowMetricsCalculator)
androidx.window.layout.WindowMetricsCalculator$Companion$reset$1: java.lang.Object invoke(java.lang.Object)
com.dexterous.flutterlocalnotifications.FlutterLocalNotificationsPlugin: void access$000(android.content.SharedPreferences$Editor,int)
org.threeten.bp.Year: java.lang.Object readResolve()
androidx.window.embedding.EmbeddingInterfaceCompat: void setEmbeddingCallback(androidx.window.embedding.EmbeddingInterfaceCompat$EmbeddingCallbackInterface)
com.dexterous.flutterlocalnotifications.models.styles.StyleInformation: StyleInformation()
androidx.window.layout.WindowMetrics: boolean equals(java.lang.Object)
id.flutter.flutter_background_service.BackgroundService: void receiveData(org.json.JSONObject)
kotlin.jvm.internal.Lambda: Lambda(int)
androidx.window.embedding.SplitController: androidx.window.embedding.SplitController getInstance()
com.dexterous.flutterlocalnotifications.FlutterLocalNotificationsPlugin: void repeatNotification(android.content.Context,com.dexterous.flutterlocalnotifications.models.NotificationDetails,java.lang.Boolean)
androidx.window.layout.FoldingFeature: androidx.window.layout.FoldingFeature$State getState()
kotlin.jvm.internal.FunctionReference: boolean isExternal()
io.flutter.embedding.android.FlutterView$ZeroSides: io.flutter.embedding.android.FlutterView$ZeroSides[] values()
androidx.window.layout.WindowMetricsCalculatorCompat: androidx.window.layout.WindowMetrics computeMaximumWindowMetrics(android.app.Activity)
com.dexterous.flutterlocalnotifications.models.Time: Time()
io.flutter.view.AccessibilityViewEmbedder: android.view.accessibility.AccessibilityNodeInfo getRootNode(android.view.View,int,android.graphics.Rect)
com.google.android.gms.measurement.AppMeasurement: com.google.android.gms.measurement.AppMeasurement getInstance(android.content.Context)
io.flutter.embedding.engine.systemchannels.PlatformChannel$HapticFeedbackType: io.flutter.embedding.engine.systemchannels.PlatformChannel$HapticFeedbackType valueOf(java.lang.String)
org.threeten.bp.ZoneOffset: java.lang.Object writeReplace()
id.flutter.flutter_background_service.BackgroundService$2: void run()
io.flutter.embedding.engine.FlutterJNI: void nativeOnVsync(long,long,long)
com.dexterous.flutterlocalnotifications.FlutterLocalNotificationsPlugin: androidx.core.app.NotificationManagerCompat getNotificationManager(android.content.Context)
androidx.window.core.Version: androidx.window.core.Version parse(java.lang.String)
kotlin.coroutines.jvm.internal.BaseContinuationImpl: kotlin.coroutines.Continuation getCompletion()
androidx.window.embedding.EmbeddingBackend: boolean isSplitSupported()
org.threeten.bp.Ser: java.lang.Object readResolve()
androidx.window.embedding.SplitInfo: androidx.window.embedding.ActivityStack getPrimaryActivityStack()
com.google.android.gms.common.internal.safeparcel.AbstractSafeParcelable: AbstractSafeParcelable()
io.flutter.embedding.engine.renderer.SurfaceTextureWrapper: SurfaceTextureWrapper(android.graphics.SurfaceTexture,java.lang.Runnable)
io.flutter.embedding.engine.FlutterJNI: io.flutter.embedding.engine.FlutterJNI nativeSpawn(long,java.lang.String,java.lang.String,java.lang.String,java.util.List)
androidx.window.layout.SidecarWindowBackend: void setWindowExtension(androidx.window.layout.ExtensionInterfaceCompat)
io.flutter.embedding.engine.FlutterJNI: void setSemanticsEnabled(boolean)
kotlin.coroutines.jvm.internal.ContinuationImpl: ContinuationImpl(kotlin.coroutines.Continuation,kotlin.coroutines.CoroutineContext)
androidx.window.layout.ExtensionsWindowLayoutInfoAdapter: androidx.window.layout.FoldingFeature translate$window_release(android.app.Activity,androidx.window.extensions.layout.FoldingFeature)
androidx.window.layout.FoldingFeature$Orientation: java.lang.String toString()
com.dexterous.flutterlocalnotifications.models.NotificationDetails: void readMessagingStyleInformation(com.dexterous.flutterlocalnotifications.models.NotificationDetails,java.util.Map,com.dexterous.flutterlocalnotifications.models.styles.DefaultStyleInformation)
io.flutter.embedding.engine.mutatorsstack.FlutterMutatorsStack: void pushClipRRect(int,int,int,int,float[])
id.flutter.flutter_background_service.FlutterBackgroundServicePlugin: void onDetachedFromEngine(io.flutter.embedding.engine.plugins.FlutterPlugin$FlutterPluginBinding)
androidx.window.embedding.SplitInfo: boolean contains(android.app.Activity)
org.threeten.bp.format.ResolverStyle: org.threeten.bp.format.ResolverStyle valueOf(java.lang.String)
com.google.firebase.concurrent.SequentialExecutor$WorkerRunningState: com.google.firebase.concurrent.SequentialExecutor$WorkerRunningState valueOf(java.lang.String)
org.threeten.bp.MonthDay: java.lang.Object writeReplace()
com.google.android.gms.measurement.internal.AppMeasurementDynamiteService: void setMeasurementEnabled(boolean,long)
kotlin.coroutines.intrinsics.CoroutineSingletons: kotlin.coroutines.intrinsics.CoroutineSingletons valueOf(java.lang.String)
androidx.window.core.Bounds: int getHeight()
androidx.window.layout.WindowMetricsCalculator$Companion$reset$1: androidx.window.layout.WindowMetricsCalculator invoke(androidx.window.layout.WindowMetricsCalculator)
com.dexterous.flutterlocalnotifications.models.ScheduledNotificationRepeatFrequency: com.dexterous.flutterlocalnotifications.models.ScheduledNotificationRepeatFrequency[] values()
kotlin.jvm.internal.CallableReference: boolean isOpen()
androidx.window.layout.SidecarWindowBackend$WindowLayoutChangeCallbackWrapper: void accept(androidx.window.layout.WindowLayoutInfo)
